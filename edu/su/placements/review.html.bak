<!-------------------------- Â© 2007 - present, dmj.one and contributors. ----------------------------------
   Part of the dmjone project. Licensed under the GNU AGPL. Provided as-is, without warranty of any kind. 
-------------------- Redistribution and modifications must retain this notice. --------------------------->


<!DOCTYPE html>
<html>

    <head>
        <title>Questions</title>
        <link rel="stylesheet" href="/css/print-article-APA6.css">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css" rel="stylesheet">
        <style>
           body {
                margin: 20px;
                line-height: 1.5;
                font-size: 12pt;
            }

            .question {
                margin-bottom: 20px;
                padding: 10px;
                border: 1px solid #ccc;
            }

            .question-text {
                font-weight: bold;
            }

            .options {
                margin: 10px 0;
                padding-left: 20px;
            }

            .correct-answer {
                color: green;
                font-weight: bold;
            }

            @media print {
                body {
                    font-family: 'Times New Roman', Times, serif;
                    font-size: 12pt;
                }

                .question-text {
                    font-weight: normal;
                    line-height: 2;
                }

                .question {
                    text-align: justify;
                    break-inside: avoid !important;
                    border: 1px solid #ccc;
                    padding: 5pt !important;
                }

                .options {
                    break-inside: avoid !important;
                    margin-bottom: 10px 0 !important;
                    padding-left: 20pt !important;
                }

                .correct-answer {
                    color: green;
                    font-style: normal;
                    font-weight: normal;                    
                }
                .correct-answer::after{
                    content: " (Correct)";
                    font-weight: bold;
                    font-style: normal;
                }
            }
        </style>
    </head>

    <body>
        <div id="questions-container"></div>
        <script>
            async function fetchQuestions() {
                try {
                    const response = await fetch('qb.txt');
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const data = await response.text();
                    const questions = parseQuestions(data);
                    displayQuestions(questions);
                } catch (error) {
                    console.error('Error fetching the questions:', error);
                }
            }

            function parseQuestions(data) {
                const lines = data.split('\n');
                let questions = [];
                let currentQuestion = null;

                lines.forEach(line => {
                    line = line.trim();
                    if (line.startsWith('ANSWER:')) {
                        if (currentQuestion) {
                            currentQuestion.answer = line.split(' ')[1];
                            questions.push(currentQuestion);
                            currentQuestion = null;
                        }
                    } else if (line.match(/^[A-Z][).]/)) {
                        if (currentQuestion) {
                            currentQuestion.options.push(line);
                        }
                    } else if (line) {
                        if (currentQuestion) {
                            questions.push(currentQuestion);
                        }
                        currentQuestion = { text: line, options: [], answer: '' };
                    }
                });
                return questions;
            }

            function shuffle(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
                return array;
            }

            function displayQuestions(questions) {
                const container = document.getElementById('questions-container');
                const fragment = document.createDocumentFragment();

                questions.forEach((q, index) => {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'question';

                    const questionText = document.createElement('div');
                    questionText.className = 'question-text';
                    questionText.textContent = `Q${index + 1}: ${q.text}`;
                    questionDiv.appendChild(questionText);

                    const optionsDiv = document.createElement('div');
                    optionsDiv.className = 'options';

                    const shuffledOptions = shuffle([...q.options]);
                    const optionLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];

                    shuffledOptions.forEach((option, i) => {
                        const optionLetter = option.charAt(0);
                        const isCorrect = optionLetter === q.answer;
                        const optionDiv = document.createElement('div');
                        optionDiv.className = isCorrect ? 'correct-answer' : '';
                        optionDiv.textContent = `${optionLabels[i]}) ${option.slice(2)}`;
                        optionsDiv.appendChild(optionDiv);
                    });
                    questionDiv.appendChild(optionsDiv);
                    fragment.appendChild(questionDiv);
                });

                container.appendChild(fragment);
            }

            fetchQuestions();
        </script>
    </body>

</html>
