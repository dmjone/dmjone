Answer the question - ` if ( x > 10 ) System.out.println("Greater"); else if ( x < 10 ) System.out.println("Smaller"); else System.out.println("Equal"); `
A) Prints "Greater" if x &gt; 10
B) Prints "Smaller" if x &lt; 10
C) Prints "Equal" if x is neither greater nor smaller than 10
D) All of the above
ANSWER: D
Answer the question - ` if (false) System.out.println("False"); else if (true) System.out.println("True"); `
A) Prints "False"
B) Prints "True"
C) Prints both "False" and "True"
D) Prints nothing
ANSWER: B
Answer the question - ` if (true) ; else System.out.println("False"); `
A) Prints "False"
B) Does not print anything
C) Syntax error
D) Runtime error
ANSWER: B
Answer the question - ` if (true) if (false) System.out.println("True"); else System.out.println("False"); `
A) Prints "True"
B) Prints "False"
C) Syntax error
D) Prints both "True" and "False"
ANSWER: B
Answer the question - ` if (x > 10) ; else if ( x < 10 ) System.out.println("Smaller"); `
A) Prints "Smaller" if x &lt; 10
B) Does nothing if x &gt; 10
C) Both A and B
D) Syntax error
ANSWER: C
Answer the question - ` if (x > 10) { System.out.println("Greater"); } else if ( x < 10 ) { System.out.println("Smaller"); } `
A) Prints "Greater" if x &gt; 10
B) Prints "Smaller" if x &lt; 10
C) Does nothing if x is 10
D) All of the above
ANSWER: D
Answer the question - ` if (x > 10) System.out.println("Greater"); else if ( x < 10 ) ; else System.out.println("Equal"); `
A) Prints "Greater" if x &gt; 10
B) Prints "Equal" if x is 10
C) Does nothing if x &lt; 10
D) All of the above
ANSWER: D
Answer the question - ` if (x > 5) if (x < 10) System.out.println("Yes"); else System.out.println("No"); `
A) Prints "Yes" if x is between 5 and 10
B) Prints "No" if x is less than 5
C) Prints "Yes" if x is greater than 5 and less than 10
D) Prints "No" if x is greater than 10
ANSWER: C
Answer the question - ` if (x > y) { if (x > z) System.out.println("X"); } else if (y > z) System.out.println("Y"); else System.out.println("Z"); `
A) Prints "X" if x is the largest
B) Prints "Y" if y is the largest and x is not the largest
C) Prints "Z" if z is the largest and x is not the largest
D) All of the above
ANSWER: D
Answer the question - ` if (x != y) if (x > y) System.out.println("Greater"); else System.out.println("Smaller"); `
A) Prints "Greater" if x &gt; y
B) Prints "Smaller" if x &lt; y
C) Syntax error
D) Both A and B
ANSWER: D
Answer the question - ` if (x) System.out.println("True"); `
A) Prints "True" if x is true
B) Syntax error
C) Prints "True" if x is non-zero
D) None of the above
ANSWER: B
Answer the question - ` switch(x + 1) { case 2: System.out.println("Two"); break; } `
A) Prints "Two" if x is 1
B) Prints "Two" if x is 2
C) Syntax error
D) None of the above
ANSWER: A
Answer the question - ` switch(x) { } `
A) Syntax error
B) No output
C) Prints "Default"
D) Runtime error
ANSWER: B
Answer the question - ` switch(x) { case 'A': System.out.println("A"); break; case 65: System.out.println("65"); break; } `
A) Prints "A" if x is 'A'
B) Prints "65" if x is 65
C) Syntax error
D) Both A and B
ANSWER: C
Answer the question - ` switch(x) { case 1: case 2: default: case 3: } `
A) Syntax error
B) No output
C) Prints "Default" if x is neither 1, 2, nor 3
D) Both A and C
ANSWER: B
Answer the question - ` switch(x) { case 1: case 2: System.out.println("One or Two"); break; default: System.out.println("Default"); } `
A) Prints "One or Two" if x is either 1 or 2
B) Prints "Default" if x is neither 1 nor 2
C) Both A and B
D) None of the above
ANSWER: C
Answer the question - ` switch(x) { case 1: System.out.println("One"); default: System.out.println("Default"); case 2: System.out.println("Two"); } `
A) Prints "Default" only if x is not 1 or 2
B) Prints "One" and "Default" if x is 1
C) Prints "Default" and "Two" if x is 2
D) Prints "One", "Default", and "Two" if x is 1
ANSWER: D
Answer the question - ` switch(x) { case 1: System.out.println("One"); case 2: System.out.println("Two"); } `
A) Prints "One" if x is 1
B) Prints "Two" if x is 2
C) Prints "One" and "Two" if x is 1
D) All of the above
ANSWER: D
Answer the question - ` switch(x) { case 1: y++; case 2: y++; default: y++; } `
A) y is incremented once if x is 1
B) y is incremented twice if x is 1
C) y is incremented thrice if x is 1
D) y is incremented twice if x is 2
ANSWER: C
Answer the question - ` switch(x) { default: System.out.println("Default"); } `
A) Always prints "Default"
B) Syntax error
C) Prints "Default" only if x is null
D) Prints "Default" only if x is zero
ANSWER: A
Can `Collections.sort()` sort a Vector of mixed data types?
A) Yes
B) No
C) Only if all elements are Comparable
D) It depends on the implementation
ANSWER: B
Can a `CopyOnWriteArrayList` contain null elements?
A) Yes
B) No
C) Only if it's empty
D) Only if it's not empty
ANSWER: A
Can a `final` class contain non-final methods?
A) Yes
B) No
C) Only if the methods are static
D) Only if the methods are abstract
ANSWER: A
Can a `private` method be accessed from a different package?
A) Yes
B) No
C) Only if the class is public
D) Only if the method is static
ANSWER: B
Can a `private` method be overridden in a subclass?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can a `private` method in a superclass be accessed by a method in a subclass?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can a `protected` method be accessed from a subclass in a different package?
A) Yes
B) No
C) Only if the subclass overrides it
D) Only if the subclass is final
ANSWER: A
Can a `public` method be accessed from a different package without any imports?
A) Yes
B) No
C) Only if the class is public
D) Only if the method is static
ANSWER: B
Can a `public` method in a `public` class be overridden with a `private` method in a subclass?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can a `void` method contain a `return` statement?
A) Yes
B) No
C) Only if it returns `null`
D) Only if it returns `void`
ANSWER: A
Can a class have multiple constructors?
A) Yes
B) No
C) Only if the constructors have different parameters
D) Only if the constructors have the same parameters
ANSWER: C
Can a class implement multiple interfaces?
A) Yes
B) No
C) Only if the interfaces are in the same package
D) Only if the interfaces are in different packages
ANSWER: A
Can a constructor be declared as final?
A) Yes
B) No
C) Only if the class is final
D) Only if the class is abstract
ANSWER: B
Can a constructor be final?
A) Yes
B) No
C) Only in final classes
D) Only in abstract classes
ANSWER: B
Can a constructor be made final?
A) Yes
B) No
C) Only if the class is final
D) Only if the class is abstract
ANSWER: B
Can a constructor be overloaded across classes?
A) Yes
B) No
C) Only if the classes are related
D) Only if the classes are in the same package
ANSWER: B
Can a constructor be overloaded?
A) Yes
B) No
C) Only in abstract classes
D) Only in final classes
ANSWER: A
Can a constructor be overridden?
A) Yes
B) No
C) Only in abstract classes
D) Only in final classes
ANSWER: B
Can a constructor be static?
A) Yes
B) No
C) Only in static classes
D) Only in nested classes
ANSWER: B
Can a constructor call itself either directly or indirectly?
A) Yes
B) No
C) Only directly
D) Only indirectly
ANSWER: B
Can a constructor call itself?
A) Yes
B) No
C) Only if it's a default constructor
D) Only if it's a parameterized constructor
ANSWER: B
Can a constructor have a `return` statement?
A) Yes
B) No
C) Only if it returns `void`
D) Only if it returns `null`
ANSWER: B
Can a constructor have a return statement?
A) Yes
B) No
C) Only if it returns `void`
D) Only if it returns an object
ANSWER: B
Can a constructor have the same name as its class but different case sensitivity?
A) Yes
B) No
C) Only if the constructor is public
D) Only if the constructor is private
ANSWER: B
Can a constructor return a value?
A) Yes
B) No
C) Only void
D) Only integers
ANSWER: B
Can a constructor throw exceptions?
A) Yes
B) No
C) Only checked exceptions
D) Only runtime exceptions
ANSWER: A
Can a constructor throw exceptions?
A) Yes
B) No
C) Only checked exceptions
D) Only runtime exceptions
ANSWER: A
Can a constructor throw multiple exceptions?
A) Yes
B) No
C) Only if they are of the same type
D) Only if they are of different types
ANSWER: A
Can a default constructor be private?
A) Yes
B) No
C) Only in nested classes
D) Only in abstract classes
ANSWER: A
Can a generic class extend another generic class?
A) Yes
B) No
C) Only if they have the same type parameter
D) Only if they have different type parameters
ANSWER: A
Can a generic method have multiple type parameters?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can a lambda expression have a return statement?
A) Yes
B) No
C) Only if it's a single-line expression
D) Only if it's a block of code
ANSWER: D
Can a lambda expression throw an exception?
A) Yes
B) No
C) Only checked exceptions
D) Only unchecked exceptions
ANSWER: D
Can a LinkedList contain duplicate elements?
A) Yes
B) No
C) Only if it's not sorted
D) Only if it has more than 10 elements
ANSWER: A
Can a LinkedList have null elements?
A) Yes
B) No
C) Only if it's empty
D) Only if it's not empty
ANSWER: A
Can a method be declared inside another method in Java?
A) Yes
B) No
C) Only if the inner method is static
D) Only if the inner method is final
ANSWER: B
Can a method be overloaded in derived classes?
A) Yes
B) No
C) Only if the base class allows it
D) Only if the method is static
ANSWER: A
Can a method have a parameter with the same name as one of its class's fields?
A) Yes
B) No
C) Only if the field is static
D) Only if the field is non-static
ANSWER: A
Can a method have a variable number of arguments in Java?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is a constructor
ANSWER: A
Can a method have multiple `catch` blocks?
A) Yes
B) No
C) Only if it has multiple `try` blocks
D) Only if it throws multiple exceptions
ANSWER: A
Can a method have multiple return statements?
A) Yes
B) No
C) Only if the method returns void
D) Only if the method returns an object
ANSWER: A
Can a method have the same name as its class?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is a constructor
ANSWER: D
Can a method return `this` keyword in Java?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is non-static
ANSWER: D
Can a method return multiple values in Java?
A) Yes
B) No
C) Only if the method returns an array or object
D) Only if the method returns a primitive type
ANSWER: C
Can a method take a variable number of arguments?
A) Yes, using varargs
B) No
C) Only if it's static
D) Only if it's final
ANSWER: A
Can a method with `package-private` access be overridden in a subclass in a different package?
A) Yes
B) No
C) Only if the subclass is in a different package
D) Only if the subclass is in the same package
ANSWER: B
Can a method with `package-private` access be overridden in a subclass in the same package?
A) Yes
B) No
C) Only if the subclass is in a different package
D) Only if the subclass is in the same package
ANSWER: A
Can a method with `private` access modifier be accessed from a subclass?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass overrides it
ANSWER: B
Can a method with a `public` access modifier be overridden to `private` in a subclass?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can a method with varargs accept zero arguments?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can a recursive method have multiple base cases?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can a Singleton class be cloned?
A) Yes
B) No
C) Only if it implements Cloneable
D) Only if it overrides the `clone()` method
ANSWER: B
Can a static initialization block throw exceptions?
A) Yes
B) No
C) Only unchecked exceptions
D) Only checked exceptions
ANSWER: B
Can a static inner class access non-static members of the outer class?
A) Yes
B) No
C) Only if the inner class is public
D) Only if the inner class is final
ANSWER: B
Can a static method access instance variables?
A) Yes
B) No
C) Only if the instance variables are public
D) Only if the instance variables are static
ANSWER: B
Can a static method be annotated with `@Override`?
A) Yes
B) No
C) Only if it overrides a static method from the superclass
D) Only if it overrides a non-static method from the superclass
ANSWER: C
Can a static method be overridden to be non-static?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can a static method be overridden?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is private
ANSWER: B
Can a static method call a non-static method?
A) Yes
B) No
C) Only if the non-static method is public
D) Only if the non-static method is private
ANSWER: B
Can a subclass constructor access a private constructor of its superclass?
A) Yes
B) No
C) Only if it is in the same package
D) Only if it explicitly calls `super()`
ANSWER: B
Can a subclass constructor access private variables of its superclass?
A) Yes
B) No
C) Only through getters and setters
D) Only if the variables are static
ANSWER: C
Can a subclass constructor directly access the private members of its superclass?
A) Yes
B) No
C) Only if the superclass allows it
D) Only through inheritance
ANSWER: B
Can a subclass constructor directly access the private members of its superclass constructor?
A) Yes
B) No
C) Only if it is defined in the same package
D) Only if it overrides the superclass constructor
ANSWER: B
Can a subclass have more than one superclass?
A) Yes
B) No
C) Only through interfaces
D) Only through abstract classes
ANSWER: B
Can a subclass inherit constructors from a superclass?
A) Yes
B) No
C) Only parameterized constructors
D) Only default constructors
ANSWER: B
Can a subclass inherit private members of a superclass?
A) Yes
B) No
C) Only if they are marked as protected
D) Only if they are marked as public
ANSWER: B
Can a subclass object implicitly cast to a superclass type?
A) Yes
B) No
C) Only if it overrides all methods
D) Only if it's final
ANSWER: A
Can a Vector contain duplicate elements?
A) Yes
B) No
C) Only if it is not synchronized
D) Only if the elements are immutable
ANSWER: A
Can a Vector contain null elements?
A) Yes
B) No
C) It depends on the initial capacity
D) It depends on the capacity increment
ANSWER: A
Can an `if` statement be used to make multiple decisions?
A) No, it can only be used for a single decision
B) Yes, using `else if` or `elif` clauses
C) Yes, but only if combined with a `while` loop
D) No, multiple decisions require a `switch` or `case` statement
ANSWER: B
Can an `if` statement exist without an `else` statement?
A) Yes
B) No
C) Only in some programming languages
D) Only if the `if` statement is nested
ANSWER: A
Can an abstract class have a constructor?
A) Yes
B) No
C) Only if the class has no abstract methods
D) Only if the class is also final
ANSWER: A
Can an abstract class have a constructor?
A) Yes
B) No
C) Only if it's also final
D) Only if it's also static
ANSWER: A
Can an abstract class have instance variables?
A) Yes
B) No
C) Only if they are static
D) Only if they are final
ANSWER: A
Can an abstract class have non-abstract methods?
A) Yes
B) No
C) Only if the methods are static
D) Only if the methods are final
ANSWER: A
Can an ArrayList contain duplicate elements?
A) Yes
B) No
C) Only if it's not sorted
D) Only if it has more than 10 elements
ANSWER: A
Can an ArrayList have null elements?
A) Yes
B) No
C) Only if it's empty
D) Only if it's not empty
ANSWER: A
Can an initialization block throw exceptions?
A) Yes
B) No
C) Only checked exceptions
D) Only runtime exceptions
ANSWER: A
Can an interface contain instance methods?
A) Yes
B) No
C) Only if they are static
D) Only if they are final
ANSWER: B
Can an interface contain static methods?
A) Yes
B) No
C) Only if the interface is also final
D) Only if the interface is also abstract
ANSWER: A
Can an interface extend multiple interfaces?
A) Yes
B) No
C) Only if they are in the same package
D) Only if they are in different packages
ANSWER: A
Can an interface extend multiple interfaces?
A) Yes
B) No
C) Only if they are in the same package
D) Only if they are abstract
ANSWER: A
Can an interface have instance variables?
A) Yes
B) No
C) Only if they are static
D) Only if they are final
ANSWER: D
Can composition exist in the absence of inheritance?
A) Yes
B) No
C) Only in abstract classes
D) Only in interfaces
ANSWER: A
Can custom annotations be inherited?
A) Yes
B) No
C) Only if annotated with `@Inherited`
D) Only if annotated with `@Override`
ANSWER: C
Can custom annotations have parameters?
A) Yes
B) No
C) Only primitive types
D) Only String types
ANSWER: A
Can instance variables be accessed from static methods?
A) Yes
B) No
C) Only if the instance variables are static
D) Only if the instance variables are final
ANSWER: B
Can overloaded methods have different return types?
A) Yes
B) No
C) Only if the parameter list is also different
D) Only if the parameter list is the same
ANSWER: C
Can overloaded methods have different return types?
A) Yes
B) No
C) Only if the parameters are different
D) Only if the parameters are the same
ANSWER: A
Can the `instanceof` operator be used with null references?
A) Yes, it returns true
B) Yes, it returns false
C) No, it throws an exception
D) No, it causes a compile-time error
ANSWER: B
Can the `super` keyword be used in a static context?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is private
ANSWER: B
Can the `super()` call be used to call a parameterized constructor of the superclass?
A) Yes
B) No
C) Only if the superclass also has a default constructor
D) Only if the superclass has no other constructors
ANSWER: A
Can the `this` keyword be used in a static method?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is private
ANSWER: B
Can the `this()` and `super()` calls be used in the same constructor?
A) Yes
B) No
C) Only if `this()` is called before `super()`
D) Only if `super()` is called before `this()`
ANSWER: B
Can the 'this' keyword be assigned a value?
A) Yes
B) No
C) Only within constructors
D) Only within static methods
ANSWER: B
Can the 'this' keyword be used to refer to static members?
A) Yes
B) No
C) Only for static methods
D) Only for static variables
ANSWER: B
Can the 'this' keyword be used to refer to static variables?
A) Yes
B) No
C) Only within constructors
D) Only within instance methods
ANSWER: B
Can the JIT compiler change the functionality of the bytecode?
A) Yes
B) No
C) Sometimes
D) Only for optimization
ANSWER: B
Can the Singleton pattern be implemented using a static class?
A) Yes
B) No
C) Only if the class is final
D) Only if the class is abstract
ANSWER: B
Can we pass an array as an argument to a method?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can you access a `protected` instance variable from a subclass that resides in a different package?
A) Yes
B) No
C) Only if the subclass is final
D) Only through inheritance
ANSWER: A
Can you access a `static` variable through an object reference?
A) Yes
B) No
C) Only if the variable is also final
D) Only if the variable is also private
ANSWER: A
Can you access a static method using the 'this' keyword?
A) Yes
B) No
C) Only within constructors
D) Only within instance methods
ANSWER: B
Can you access instance variables within a static method?
A) Yes
B) No
C) Only if the instance variables are also static
D) Only if the instance variables are public
ANSWER: B
Can you add `null` to a Vector?
A) Yes
B) No
C) Throws NullPointerException
D) Undefined behavior
ANSWER: A
Can you add a `final` variable to an interface?
A) Yes
B) No
C) Only if it's also static
D) Only if it's also abstract
ANSWER: A
Can you add elements at a specific index in a LinkedList?
A) Yes, using list.add(index, element)
B) No, elements can only be added at the end
C) Only if the index is less than the size of the list
D) Only if the index is greater than or equal to the size of the list
ANSWER: A
Can you add elements to a List while iterating through it using an Iterator?
A) Yes
B) No
C) Only if the list is not empty
D) Only for specific types of lists
ANSWER: B
Can you apply annotations to local variables?
A) Yes
B) No
C) Only if the variable is static
D) Only if the variable is final
ANSWER: B
Can you apply the `final` keyword to local variables?
A) Yes
B) No
C) Only if they are static
D) Only if they are public
ANSWER: A
Can you call a constructor using the `this()` statement in Java?
A) Yes
B) No
C) Only if the constructor is parameterized
D) Only if the constructor is default
ANSWER: A
Can you call a method before it's declared in the code?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can you call a non-static method from a static method in the same class?
A) Yes
B) No
C) Only if the method returns `void`
D) Only if the method returns an object
ANSWER: B
Can you call a static method from a non-static method in the same class?
A) Yes
B) No
C) Only if the method returns `void`
D) Only if the method returns an object
ANSWER: A
Can you call a static method using the object reference?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is private
ANSWER: A
Can you call a subclass method using a superclass reference?
A) Yes
B) No
C) Only if the method is overridden
D) Only if the method is overloaded
ANSWER: C
Can you call a superclass constructor using `super` at any line in the subclass constructor?
A) Yes
B) No
C) Only if it's the first line
D) Only if it's the last line
ANSWER: C
Can you call a superclass method from a subclass in Java?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is protected
ANSWER: A
Can you call an abstract method directly from its abstract class?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is non-static
ANSWER: B
Can you call one constructor from another in the same class?
A) Yes, using `this()` with appropriate parameters
B) Yes, using `super()` with appropriate parameters
C) No
D) Only if the class is final
ANSWER: A
Can you call one constructor from another in the same class?
A) Yes, using `this()` keyword
B) No
C) Yes, using `super()` keyword
D) None of the above
ANSWER: A
Can you catch an exception thrown by a constructor in the same constructor?
A) Yes
B) No
C) Only if it's a runtime exception
D) Only if it's a checked exception
ANSWER: A
Can you catch multiple exceptions in a single catch block while working with Vector?
A) Yes
B) No
C) It depends on the Java version
D) It depends on the exceptions
ANSWER: A
Can you change the state of an immutable object?
A) Yes
B) No
C) Yes, but only through reflection
D) Yes, but only through special methods
ANSWER: B
Can you create an array of a generic type?
A) Yes
B) No
C) Only if the type is bounded
D) Only if the type is unbounded
ANSWER: B
Can you create an instance of an interface?
A) Yes
B) No
C) Only if it has default methods
D) Only if it's also final
ANSWER: B
Can you create an object of a static nested class?
A) Yes
B) No
C) Only if the class is also final
D) Only if the class is also abstract
ANSWER: A
Can you create an object of an inner class outside the outer class?
A) Yes
B) No
C) Only if the inner class is static
D) Only if the inner class is public
ANSWER: C
Can you create an object without using the `new` keyword in Java?
A) Yes, using reflection
B) Yes, using cloning
C) No
D) Both A and B
ANSWER: D
Can you create custom annotations in Java?
A) Yes
B) No
C) Only in abstract classes
D) Only in interfaces
ANSWER: A
Can you declare a `final` abstract method?
A) Yes
B) No
C) Only in an interface
D) Only in a final class
ANSWER: B
Can you declare a `static` method inside a non-static inner class?
A) Yes
B) No
C) Only if the method is also final
D) Only if the method is also abstract
ANSWER: B
Can you declare a class as both `abstract` and `final`?
A) Yes
B) No
C) Only if the class has no methods
D) Only if the class has no instance variables
ANSWER: B
Can you declare an abstract method as `private`?
A) Yes
B) No
C) Only if the class is also abstract
D) Only if the class is also final
ANSWER: B
Can you declare an abstract method in an interface?
A) Yes
B) No
C) Only if the interface is also abstract
D) Only if the interface is also final
ANSWER: A
Can you declare instance variables inside a method?
A) Yes
B) No
C) Only if they are final
D) Only if they are static
ANSWER: B
Can you define a constructor inside a method?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: B
Can you define a method inside another method in Java?
A) Yes
B) No
C) Only if the inner method is static
D) Only if the inner method is final
ANSWER: B
Can you define methods inside an Enum type?
A) Yes
B) No
C) Only if the methods are static
D) Only if the methods are final
ANSWER: A
Can you define your own custom annotations in Java?
A) Yes
B) No
C) Only by extending existing annotations
D) Only by implementing a special interface
ANSWER: A
Can you execute a static initialization block more than once?
A) Yes
B) No
C) Yes, but only explicitly
D) Yes, but only implicitly
ANSWER: B
Can you handle an exception within an initialization block?
A) Yes
B) No
C) Only runtime exceptions
D) Only checked exceptions
ANSWER: A
Can you have a `final` method in an interface?
A) Yes
B) No
C) Only if it's also static
D) Only if it's also abstract
ANSWER: B
Can you have a constructor with a variable number of arguments?
A) Yes
B) No
C) Only if it's a default constructor
D) Only if it's a parameterized constructor
ANSWER: A
Can you have a constructor with the `static` keyword?
A) Yes
B) No
C) Only if the constructor is also final
D) Only if the constructor is also abstract
ANSWER: B
Can you have a constructor with the same name as the class but different case sensitivity?
A) Yes
B) No
C) Only if the class is final
D) Only if the class is abstract
ANSWER: B
Can you have a generic method inside a non-generic class?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can you have a method and an instance variable with the same name in a class?
A) Yes
B) No
C) Only if the method is static
D) Only if the variable is static
ANSWER: A
Can you have an abstract method in a non-abstract class?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: B
Can you have multiple inheritance in Java?
A) Yes
B) No
C) Only through interfaces
D) Only through abstract classes
ANSWER: C
Can you have multiple static blocks in a class?
A) Yes
B) No
C) Only if they are in different methods
D) Only if they are in the same method
ANSWER: A
Can you instantiate an abstract class?
A) Yes
B) No
C) Only if it has no abstract methods
D) Only if it has a constructor
ANSWER: B
Can you instantiate an abstract class?
A) Yes
B) No
C) Only if it has a constructor
D) Only if it has no abstract methods
ANSWER: B
Can you invoke a static method using an object reference?
A) Yes
B) No
C) Only if the method is also final
D) Only if the method is also abstract
ANSWER: A
Can you invoke one constructor from another within the same class?
A) Yes, using `this()`
B) No
C) Only if the constructors have the same parameters
D) Only if the constructors have different parameters
ANSWER: A
Can you iterate through Enum constants using a loop?
A) Yes
B) No
C) Only using a for-loop
D) Only using a while-loop
ANSWER: A
Can you make a `final` method abstract?
A) Yes
B) No
C) Only in an interface
D) Only in an abstract class
ANSWER: B
Can you make a class `private`?
A) Yes
B) No
C) Only if the class is nested
D) Only if the class is abstract
ANSWER: C
Can you make a constructor static?
A) Yes
B) No
C) Only if the class is also static
D) Only if the class is abstract
ANSWER: B
Can you make a static initialization block final?
A) Yes
B) No
C) Only if it's the only static block
D) Only if it's the first static block
ANSWER: B
Can you make an abstract class `final`?
A) Yes
B) No
C) Only if it has no abstract methods
D) Only if it has a constructor
ANSWER: B
Can you make an interface `final`?
A) Yes
B) No
C) Only if it has no methods
D) Only if it has no variables
ANSWER: B
Can you make an interface `final`?
A) Yes
B) No
C) Only if it's also abstract
D) Only if it's empty
ANSWER: B
Can you make an object of an abstract class?
A) Yes
B) No
C) Only if the abstract class has a constructor
D) Only if the abstract class has no abstract methods
ANSWER: B
Can you modify the access level of a constructor using Java Reflection?
A) Yes
B) No
C) Only from private to public
D) Only from public to private
ANSWER: B
Can you modify the fields of an object at runtime using reflection?
A) Yes
B) No
C) Only if the fields are public
D) Only if the fields are private
ANSWER: A
Can you nest `if` statements inside a `for` loop?
A) Yes
B) No
C) Only in some languages
D) It's not recommended
ANSWER: A
Can you overload a method by changing only its return type?
A) Yes
B) No
C) Only if the parameters are different
D) Only in the subclass
ANSWER: B
Can you overload a method by changing only its return type?
A) Yes
B) No
C) Only in the subclass
D) Only in the superclass
ANSWER: B
Can you overload a method by changing only the name of the parameters?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: B
Can you overload a method by changing only the return type?
A) Yes
B) No
C) Only if the parameters are also different
D) Only in the subclass
ANSWER: B
Can you overload a method by changing the access modifier?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: B
Can you overload a method by changing the order of modifiers?
A) Yes
B) No
C) Only if one of the modifiers is `static`
D) Only if one of the modifiers is `final`
ANSWER: B
Can you overload a method by just changing the return type?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: B
Can you overload a method by making it static?
A) Yes
B) No
C) Only if the original method is public
D) Only if the original method is private
ANSWER: B
Can you overload a method with varargs?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can you overload a method with variable arguments (varargs) and an array?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: B
Can you overload constructors by changing only the return type?
A) Yes
B) No
C) Only if the return type is void
D) Only if the return type is int
ANSWER: B
Can you overload constructors in Java?
A) Yes
B) No
C) Only in abstract classes
D) Only in final classes
ANSWER: A
Can you overload methods in different classes?
A) Yes
B) No
C) Only if the classes are related by inheritance
D) Only if the classes are in the same package
ANSWER: A
Can you overload methods that are inherited from a superclass?
A) Yes
B) No
C) Only in the same package
D) Only if the method is public
ANSWER: A
Can you override a `final` method?
A) Yes
B) No
C) Only in a subclass
D) Only in the same class
ANSWER: B
Can you override a `private` method in Java?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can you override a `protected` method in Java?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: A
Can you override a `static` method?
A) Yes
B) No
C) Only in the subclass
D) Only in the superclass
ANSWER: B
Can you override a method if the subclass is in a different package?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is protected
ANSWER: A
Can you override a private method from a superclass in a subclass?
A) Yes
B) No
C) Only if the subclass is in the same package
D) Only if the subclass is in a different package
ANSWER: B
Can you override the `equals()` method in a class?
A) Yes
B) No
C) Only if the class is final
D) Only if the class is abstract
ANSWER: A
Can you pass a null argument to an overloaded method?
A) Yes
B) No
C) Only if the method has Object type parameters
D) Only if the method has primitive type parameters
ANSWER: A
Can you pass a variable number of arguments to a method?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can you pass an array to a method defined with varargs?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Can you perform explicit type casting between unrelated object types?
A) Yes
B) No
C) Only if they share a common interface
D) Only if one class extends the other
ANSWER: B
Can you prevent a method from being overridden?
A) Yes, by marking it as `final`
B) No
C) Only if it's static
D) Only if it's private
ANSWER: A
Can you replace an element at a specific index in a LinkedList?
A) Yes, using list.set(index, element)
B) No, LinkedLists are immutable
C) Only if the element already exists in the list
D) Only if the list is not empty
ANSWER: A
Can you sort a Vector of custom objects if the objects do not implement Comparable or provide a custom Comparator?
A) Yes
B) No
C) Only in ascending order
D) Only in descending order
ANSWER: B
Can you store custom objects in a Vector?
A) Yes
B) No
C) Only if they implement Serializable
D) Only if they extend Vector
ANSWER: A
Can you throw multiple exceptions from a single method using a single `throws` clause?
A) Yes
B) No
C) Only for checked exceptions
D) Only for unchecked exceptions
ANSWER: A
Can you use `subList()` method to get a sublist view of another sublist view?
A) Yes
B) No
C) Throws an UnsupportedOperationException
D) Throws a NullPointerException
ANSWER: A
Can you use `super` in a method to call a superclass static method?
A) Yes
B) No
C) Only if the method is public
D) Only if the method is protected
ANSWER: B
Can you use a Lambda expression to define a custom Comparator for sorting a Vector?
A) Yes
B) No
C) Only for String elements
D) Only for numeric elements
ANSWER: A
Can you use a static variable inside an instance method?
A) Yes
B) No
C) Only if the method is also static
D) Only if the method is public
ANSWER: A
Can you use an enhanced for-loop to remove elements from a List?
A) Yes
B) No
C) Only if the list is not empty
D) Only for specific types of lists
ANSWER: B
Can you use copy constructors for immutable objects?
A) Yes
B) No
C) Only for specific cases
D) None of the above
ANSWER: A
Can you use Enum types as keys in a `HashMap`?
A) Yes
B) No
C) Only if the Enum type is bounded
D) Only if the Enum type is unbounded
ANSWER: A
Can you use Enum types in switch statements?
A) Yes
B) No
C) Only in nested switch statements
D) Only if the Enum type is static
ANSWER: A
Can you use logical operators like `&&` and `||` in an `if` statement condition?
A) Yes
B) No
C) Only in some programming languages
D) Only `&amp;&amp;` is allowed
ANSWER: A
Can you use the `instanceof` operator with primitive types?
A) Yes
B) No
C) Only with numeric types
D) Only with boolean types
ANSWER: B
Can you use the `super` keyword in a constructor to call the superclass's constructor?
A) Yes
B) No
C) Only if the superclass's constructor is public
D) Only if the superclass's constructor is private
ANSWER: A
Can you use the `this` keyword to call a static method?
A) Yes
B) No
C) Only if the static method is in the same class
D) Only if the static method is in a different class
ANSWER: B
Can you use the 'this' keyword within a static method?
A) Yes
B) No
C) Only if the method is also final
D) Only if the method is private
ANSWER: B
Can you use varargs with other types of parameters?
A) Yes
B) No
C) Only if varargs are the first parameter
D) Only if varargs are the last parameter
ANSWER: D
Consider the following code snippet: `public MyClass(int x) { this(x, 0); }` What does this constructor do?
A) Calls another constructor in the same class with two int parameters
B) Calls the superclass constructor with two int parameters
C) Throws a compilation error
D) Initializes x with 0
ANSWER: A
Did Oracle continue to support the Java Community Process (JCP) post-acquisition?
A) Yes
B) No
ANSWER: A
Did Oracle continue to use the "Write Once, Run Anywhere" slogan for Java?
A) Yes
B) No
ANSWER: A
Did the acquisition lead to any significant changes in the Java language syntax?
A) Yes
B) No
ANSWER: B
During which phase are .class files loaded into memory?
A) Source Code Creation
B) Compilation
C) Class Loading
D) Bytecode Verification
ANSWER: C
During which phase are the static blocks executed in the class loading process?
A) Loading
B) Linking
C) Initialization
D) Verification
ANSWER: C
HotSpot JVM uses which kind of compilation strategy?
A) Just-In-Time
B) Ahead-Of-Time
C) Both
D) Neither
ANSWER: A
HotSpot primarily aims to improve what aspect of execution?
A) Memory
B) Speed
C) Portability
D) Reliability
ANSWER: B
How are constructors used in dependency injection frameworks like Spring?
A) To autowire dependencies
B) To create singleton objects
C) To manage the application context
D) All of the above
ANSWER: A
How are native methods generally written?
A) C/C++
B) Java
C) Python
D) JavaScript
ANSWER: A
How are objects passed to methods in Java?
A) By value
B) By reference
C) Either by value or by reference
D) By reference to the object's memory location
ANSWER: D
How are primitive types passed to methods in Java?
A) By value
B) By reference
C) Either by value or by reference
D) None of the above
ANSWER: A
How are unused objects detected in the Garbage Collection process?
A) Reference Counting
B) Reachability Analysis
C) Both A and B
D) None of the above
ANSWER: B
How can assertions be enabled in Java?
A) By using the `-ea` option when running the Java interpreter
B) By using the `enableAssertions` method
C) By using the `Assertions.enable()` method
D) They are enabled by default
ANSWER: A
How can heap dump analyzers help in identifying memory leaks?
A) By tracing method calls
B) By showing unreachable objects
C) By showing retained objects
D) By monitoring CPU usage
ANSWER: C
How can long GC pauses be mitigated?
A) By increasing heap size
B) By choosing a low-latency garbage collector
C) By reducing object allocation
D) Both B and C
ANSWER: D
How can one identify a potential memory leak?
A) Through CPU profiling
B) By analyzing heap dumps
C) By monitoring disk I/O
D) Through network monitoring
ANSWER: B
How can pattern matching in `switch` (Java 16+) simplify code?
A) By eliminating the need for explicit casting
B) By automatically breaking out of the switch after a case is matched
C) By supporting multiple case labels
D) All of the above
ANSWER: A
How can you access a private constructor using Java Reflection?
A) Using `Constructor.setAccessible(true)`
B) Using `Class.forName()`
C) Using `Class.newInstance()`
D) None of the above
ANSWER: A
How can you access an instance variable `x` of an object `obj`?
A) `x.obj`
B) `obj-&gt;x`
C) `obj.x`
D) `x(obj)`
ANSWER: C
How can you add a new dependency in a Maven project?
A) Edit the 'pom.xml' file
B) Use the 'mvn install' command
C) Add the JAR to the project's 'lib' folder
D) All of the above
ANSWER: A
How can you add all elements of a Collection to a Vector?
A) addAll(Collection c)
B) appendAll(Collection c)
C) insertAll(Collection c)
D) setAll(Collection c)
ANSWER: A
How can you automatically update your IDE plugins?
A) IDEs don’t support automatic updates for plugins
B) Check 'Automatically update plugins' in the IDE settings
C) Use the `auto-update` CLI command
D) None of the above
ANSWER: B
How can you break the Singleton property of a class?
A) Using reflection
B) Using multiple class loaders
C) Deserialization
D) All of the above
ANSWER: D
How can you call a static method?
A) Using the class name
B) Using an object reference
C) Either using the class name or an object reference
D) Using the `this` keyword
ANSWER: C
How can you call a superclass constructor from a subclass constructor?
A) super()
B) this()
C) super
D) this
ANSWER: A
How can you catch an exception thrown by a Vector operation?
A) Catch VectorException
B) Catch CollectionException
C) Catch IndexOutOfBoundsException for index-related errors
D) Catch RuntimeException
ANSWER: C
How can you change the JDK version for an existing project in Eclipse?
A) Right-click on the project -&gt; Build Path -&gt; Configure Build Path
B) File -&gt; Project Properties -&gt; Java Build Path
C) Window -&gt; Preferences -&gt; Java -&gt; Installed JREs
D) Any of the above
ANSWER: A
How can you change the JDK version for an existing project in IntelliJ IDEA?
A) Edit -&gt; Project Settings -&gt; Project SDK
B) File -&gt; Project Structure -&gt; Project SDK
C) IntelliJ IDEA -&gt; Preferences -&gt; Project SDK
D) View -&gt; Tool Windows -&gt; Project SDK
ANSWER: B
How can you check for the existence of more elements while using Enumeration?
A) hasMore()
B) hasMoreElements()
C) hasNext()
D) exists()
ANSWER: B
How can you check the compilation activity of the JIT compiler?
A) -XX:+PrintCompilation
B) -XX:PrintBytecode
C) -verbose:compilation
D) -verbose:jit
ANSWER: A
How can you collect detailed GC logs?
A) Using `-XX:+PrintGCDetails` flag
B) By manual inspection
C) Through heap dump analysis
D) By checking system logs
ANSWER: A
How can you combine multiple comparators for sorting a List?
A) Using Comparator.combined()
B) Using Comparator.thenComparing()
C) Using Comparator.and()
D) Using Comparator.chain()
ANSWER: B
How can you concatenate two Vectors?
A) Using `addAll()`
B) Using `concat()`
C) Using `join()`
D) Using `merge()`
ANSWER: A
How can you convert a LinkedList to an array?
A) list.toArray()
B) list.toSimpleArray()
C) list.convertToArray()
D) list.arrayify()
ANSWER: A
How can you convert a Stream back to a Vector?
A) `vector.stream().collect(Collectors.toCollection(Vector::new))`
B) `vector.stream().toVector()`
C) `Vector.fromStream(vector.stream())`
D) `vector.stream().collect(Collectors.toVector())`
ANSWER: A
How can you convert a Vector to a LinkedList?
A) new LinkedList(vector)
B) LinkedList.fromVector(vector)
C) LinkedList.asList(vector)
D) LinkedList.of(vector)
ANSWER: A
How can you convert a Vector to a Queue?
A) new PriorityQueue(vector)
B) Queue.fromVector(vector)
C) vector.toQueue()
D) Queue.of(vector)
ANSWER: A
How can you convert a Vector to a Set?
A) new HashSet(vector)
B) Set.fromVector(vector)
C) vector.toSet()
D) Collections.toSet(vector)
ANSWER: A
How can you convert a Vector to a Stack?
A) new Stack().addAll(vector)
B) Stack.fromVector(vector)
C) vector.toStack()
D) Vector cannot be converted to Stack
ANSWER: A
How can you convert a Vector to an array?
A) toArray()
B) toVector()
C) toList()
D) toStringArray()
ANSWER: A
How can you convert an ArrayList to an array?
A) list.toArray()
B) list.toSimpleArray()
C) list.convertToArray()
D) list.arrayify()
ANSWER: A
How can you disable the JIT compiler entirely for a Java program?
A) -DdisableJIT=true
B) -XX:-UseJIT
C) -Xint
D) None of the above
ANSWER: C
How can you enable GC logging in Java 8 and later versions?
A) -XX:+PrintGCDetails
B) -Xlog:gc*
C) -verbose:gc
D) Both A and C
ANSWER: D
How can you enable the parallel garbage collector in JVM?
A) -XX:+UseParallelGC
B) -XX:+UseConcMarkSweepGC
C) -XX:+UseG1GC
D) -XX:+UseSerialGC
ANSWER: A
How can you ensure deep copy while creating a copy constructor?
A) By using the `clone` method for object references
B) By using `new` keyword for object references
C) By copying the values of primitive types only
D) Both A and B
ANSWER: D
How can you execute multiple statements within an `if` block?
A) Write each statement on a new line
B) Separate each statement with a comma
C) Enclose the statements within curly braces or indentation
D) Any of the above
ANSWER: C
How can you explicitly invoke garbage collection in Java code?
A) System.invokeGC()
B) System.gc()
C) System.clean()
D) You can't
ANSWER: B
How can you explicitly load a class in a Java program?
A) Using Class.forName()
B) Using System.loadClass()
C) Using ClassLoader.loadClass()
D) All of the above
ANSWER: D
How can you force garbage collection in Java?
A) Call `Runtime.getRuntime().gc()`
B) Use `-XX:+ForceGC`
C) Call `System.gc()`
D) Both A and C
ANSWER: D
How can you force garbage collection in Java? (Easy)
A) System.gc()
B) Runtime.getRuntime().gc()
C) Both A and B
D) None of the above
ANSWER: C
How can you handle a null value in a List?
A) Lists can't contain null values
B) Check for null before performing operations
C) Use Optional class
D) Both B and C
ANSWER: D
How can you handle an IndexOutOfBoundsException when accessing a List?
A) Using try-catch block
B) Checking the index against list size before accessing
C) Both A and B
D) None of the above
ANSWER: C
How can you handle ConcurrentModificationException when iterating over a list?
A) Use CopyOnWriteArrayList
B) Use Iterator's remove method
C) Synchronize the list
D) All of the above
ANSWER: D
How can you handle exceptions within a constructor?
A) Using try-catch blocks
B) Using throws keyword
C) Both A and B
D) None of the above
ANSWER: C
How can you implement a Singleton pattern in Java?
A) By making constructors public
B) By making constructors protected
C) By making constructors private
D) By making constructors abstract
ANSWER: C
How can you implement custom exception handling specific to Vector operations?
A) By extending RuntimeException
B) By using try-catch blocks around Vector methods
C) By extending Vector class and overriding its methods
D) By using Java's built-in VectorException class
ANSWER: C
How can you implement multi-level sorting on a List of custom objects?
A) Using multiple Collections.sort() calls
B) Using Comparator.thenComparing()
C) Using nested streams
D) Both B and C are correct
ANSWER: B
How can you improve the performance of Vector in a multi-threaded environment?
A) Increase its initial capacity
B) Use `Collections.synchronizedList`
C) Use ReadWriteLock
D) None of the above can improve performance
ANSWER: A
How can you increase the capacity of a Vector?
A) vector.ensureCapacity(minCapacity)
B) vector.resize(newCapacity)
C) vector.setCapacity(newCapacity)
D) vector.expand(newCapacity)
ANSWER: A
How can you initiate remote debugging in IntelliJ IDEA?
A) Run -&gt; Attach to Remote JVM
B) Run -&gt; Edit Configurations -&gt; Remote
C) Run -&gt; Debug -&gt; Attach to Remote JVM
D) None of the above
ANSWER: B
How can you install a new plugin in Eclipse?
A) Help -&gt; Eclipse Marketplace
B) Window -&gt; Preferences -&gt; Plugins
C) File -&gt; New -&gt; Plugin
D) None of the above
ANSWER: A
How can you iterate through a Vector using a traditional for-loop?
A) for(int i = 0; i &lt; vector.size(); i++) {}
B) for(int i : vector) {}
C) for(E element : vector) {}
D) Both A and B are correct
ANSWER: A
How can you iterate through a Vector using an enhanced for-loop?
A) for(int i = 0; i &lt; vector.size(); i++) {}
B) for(int i : vector) {}
C) for(E element : vector) {}
D) Both B and C are correct
ANSWER: D
How can you iterate through a Vector using Enumeration?
A) Enumeration&lt;E&gt; e = vector.elements()
B) Enumeration&lt;E&gt; e = vector.enumerate()
C) Enumeration&lt;E&gt; e = vector.getEnumeration()
D) Enumeration&lt;E&gt; e = vector.list()
ANSWER: A
How can you make a `for` loop iterate in reverse order?
A) By setting the loop variable to the last value and decrement it in each iteration
B) By setting the loop condition to `false`
C) By setting the loop variable to a negative value
D) None of the above
ANSWER: A
How can you make a thread pause its execution temporarily?
A) By using `Thread.yield()`
B) By using `Thread.sleep(long millis)`
C) By using `Thread.wait()`
D) Both B and C
ANSWER: D
How can you make a Vector perform better in a single-threaded environment?
A) Use ArrayList instead
B) Remove synchronization using `Collections.synchronizedList`
C) It’s not possible to improve the performance
D) Use lazy initialization
ANSWER: A
How can you make a Vector thread-unsafe for performance reasons?
A) Using `Collections.unmodifiableList()`
B) Using `Collections.synchronizedList()`
C) Cannot make it thread-unsafe
D) Using `Collections.unsynchronizedList()`
ANSWER: C
How can you make an ArrayList thread-safe?
A) Collections.synchronizedList(arrayList)
B) arrayList.synchronize()
C) arrayList.lock()
D) ArrayList does not support thread-safety
ANSWER: A
How can you make an immutable class final?
A) By making its methods final
B) By making its data members final
C) By making the class declaration final
D) By making its constructor final
ANSWER: C
How can you make constructor-based dependency injection mandatory in Spring?
A) By using the `@Autowired(required=true)` annotation
B) By using the `@Required` annotation
C) By using the `@Mandatory` annotation
D) By using the `@Inject` annotation
ANSWER: A
How can you make Vector operations more efficient in a multi-threaded scenario?
A) By using fine-grained locks
B) By using the synchronized keyword
C) By using read-write locks
D) By using a CopyOnWriteArrayList
ANSWER: A
How can you manually increase the capacity of an ArrayList?
A) `list.ensureCapacity(int minCapacity);`
B) `list.resize(int newCapacity);`
C) `list.setCapacity(int newCapacity);`
D) `list.expand(int newCapacity);`
ANSWER: A
How can you obtain the current capacity of a Vector?
A) size()
B) length()
C) capacity()
D) getCapacity()
ANSWER: C
How can you pass command-line arguments to a Java program?
A) Using System.args[]
B) Using main(String[] args)
C) Using System.getProperty()
D) Using System.getenv()
ANSWER: B
How can you pass environment variables to a Java program in IntelliJ IDEA?
A) Run -&gt; Edit Configurations -&gt; Environment Variables
B) File -&gt; Project Structure -&gt; Environment Variables
C) IntelliJ IDEA -&gt; Preferences -&gt; Run/Debug Configurations
D) None of the above
ANSWER: A
How can you perform a case-insensitive sort on a List of Strings?
A) Collections.sort(list, String.CASE_INSENSITIVE_ORDER)
B) list.sort(String::compareToIgnoreCase)
C) Both A and B
D) None of the above
ANSWER: C
How can you perform case-insensitive sorting on a List of Strings using Java Streams?
A) list.stream().sorted(String::compareToIgnoreCase)
B) list.stream().sorted(String.CASE_INSENSITIVE_ORDER)
C) list.stream().sorted().ignoreCase()
D) list.stream().sort(Comparator.comparing(String::toLowerCase))
ANSWER: A
How can you permanently set the PATH variable on Linux?
A) Edit /etc/environment
B) Edit .bashrc
C) System Settings
D) Edit /etc/PATH
ANSWER: A
How can you pre-size a Vector?
A) Using the Vector(int initialCapacity) constructor
B) Using the ensureCapacity() method
C) Both A and B
D) None of the above
ANSWER: C
How can you prevent Reflection from breaking encapsulation?
A) By using the `final` keyword
B) By using the `transient` keyword
C) By throwing a security exception in the constructor
D) By using the `volatile` keyword
ANSWER: C
How can you prevent Singleton property breakage due to reflection?
A) By throwing an exception in the constructor
B) By using a static block
C) By using private constructors
D) By making the class final
ANSWER: A
How can you read all the system properties available in a Java application?
A) System.getProperties().list(System.out);
B) System.getAllProperties();
C) System.getenv().list(System.out);
D) None of the above
ANSWER: A
How can you read the `java.version` system property in Java?
A) System.getenv("java.version")
B) System.getProperty("java.version")
C) System.getEnv("java.version")
D) None of the above
ANSWER: B
How can you remove all elements from a Vector?
A) clear()
B) removeAll()
C) remove()
D) Both A and B
ANSWER: D
How can you remove all elements from an ArrayList?
A) list.empty()
B) list.removeAll()
C) list.clear()
D) list.deleteAll()
ANSWER: C
How can you remove JDK from a macOS system?
A) Delete JDK folder
B) sudo apt remove jdk
C) Use the Uninstaller
D) brew uninstall jdk
ANSWER: A
How can you replace an element at a specific index in a Vector?
A) replace(int index, E element)
B) set(int index, E element)
C) change(int index, E element)
D) modify(int index, E element)
ANSWER: B
How can you reverse a List using Java Streams?
A) list.stream().sorted(Comparator.reverseOrder())
B) list.stream().reversed()
C) list.stream().collect(Collectors.toCollection(LinkedList::new)).descendingIterator()
D) list.stream().sorted().reverse()
ANSWER: C
How can you rollback a refactoring in IntelliJ IDEA?
A) Ctrl + Z
B) Right Click -&gt; Undo Refactoring
C) Refactor -&gt; Undo
D) Any of the above
ANSWER: D
How can you run a Java program from any directory in the command prompt on Windows?
A) Set JAVA_HOME only
B) Update PATH only
C) Both A and B
D) Neither A nor B
ANSWER: C
How can you set JVM options in IntelliJ IDEA?
A) File -&gt; Project Structure -&gt; SDKs -&gt; Edit JVM options
B) Help -&gt; Edit Custom VM Options
C) Run -&gt; Edit Configurations -&gt; VM options
D) None of the above
ANSWER: C
How can you set up a remote development environment using Visual Studio Code?
A) By using the 'Remote - SSH' extension
B) By setting up a VPN connection
C) By enabling remote access from the settings
D) None of the above
ANSWER: A
How can you sort a List of custom objects by a specific field?
A) Collections.sort(list, Comparator.comparing(Object::getField))
B) list.sort(Object::getField)
C) Collections.sort(list, Object::getField)
D) list.orderBy(Object::getField)
ANSWER: A
How can you sort a Vector using a custom comparator?
A) `Collections.sort(vector, customComparator)`
B) `Vector.sort(customComparator)`
C) `vector.sortBy(customComparator)`
D) `vector.sortedWith(customComparator)`
ANSWER: A
How can you sort a Vector using Java Streams?
A) `vector.stream().sort()`
B) `vector.stream().sorted()`
C) `Vector.sort(vector.stream())`
D) `Collections.sort(vector.stream())`
ANSWER: B
How can you specify JVM flags in a Gradle build script?
A) tasks.withType(JavaCompile)
B) tasks.withType(JavaExec)
C) tasks.withType(CompileJava)
D) None of the above
ANSWER: B
How can you specify the `-Xmx` parameter in Eclipse?
A) Run -&gt; Run Configurations -&gt; Arguments -&gt; VM Arguments
B) Edit -&gt; Preferences -&gt; Java -&gt; Installed JREs
C) Window -&gt; Show View -&gt; Console -&gt; VM Arguments
D) File -&gt; Settings -&gt; Build and Run
ANSWER: A
How can you take a heap dump of a running Java application?
A) jstat -dump
B) jmap -dump
C) jvisualvm --dump
D) jconsole -dump
ANSWER: B
How can you transform each element in a Vector using Java Streams?
A) `vector.stream().map()`
B) `vector.stream().transform()`
C) `Vector.map(vector)`
D) `Collections.map(vector)`
ANSWER: A
How can you use Java Streams to filter elements in a Vector?
A) `vector.stream().filter()`
B) `Stream.filter(vector)`
C) `Vector.filter()`
D) `Collections.filter(vector)`
ANSWER: A
How can you verify that JDK is correctly installed on a Windows system?
A) java -version
B) javac -version
C) Both A and B
D) Checking Program Files
ANSWER: C
How can you verify that the JAVA_HOME variable is set correctly?
A) echo $JAVA_HOME on Linux/macOS or echo %JAVA_HOME% on Windows
B) java --version
C) javac -version
D) All of the above
ANSWER: A
How can you view installed plugins in IntelliJ IDEA?
A) File -&gt; Settings -&gt; Installed Plugins
B) File -&gt; Project Structure -&gt; Plugins
C) File -&gt; Settings -&gt; Plugins
D) None of the above
ANSWER: C
How did Oracle plan to monetize Java further after the acquisition?
A) By introducing subscription plans
B) By making Java proprietary
C) Through increased advertising
D) By making the JDK paid
ANSWER: A
How did Project Oak address the issue of security?
A) By using a secure bytecode verification process
B) By eliminating pointer arithmetic
C) By enforcing strict type checking
D) All of the above
ANSWER: D
How did the acquisition affect Oracle's relationship with Google?
A) Improved
B) Worsened
C) No change
D) Led to a partnership
ANSWER: B
How did the acquisition affect the development of the JVM?
A) Slowed it down
B) Sped it up
C) No impact
D) Made it proprietary
ANSWER: B
How did the acquisition affect the Java Community Process (JCP)?
A) Made it more open
B) Tightened Oracle's control
C) Disbanded it
D) No effect
ANSWER: B
How did the acquisition affect the licensing of Java?
A) Switched to GPL
B) Remained under the Oracle Binary Code License
C) Became proprietary
D) No change
ANSWER: D
How did the acquisition affect the NetBeans IDE?
A) Made it a paid product
B) Donated to the Apache Software Foundation
C) Discontinued it
D) Integrated it into Oracle JDeveloper
ANSWER: B
How did the acquisition impact Oracle's position in the software industry?
A) Strengthened it
B) Weakened it
C) No change
D) Made it more specialized
ANSWER: A
How did the Java ecosystem respond to Oracle's acquisition of Sun Microsystems?
A) Positively
B) Negatively
C) Mixed reactions
D) Indifferently
ANSWER: C
How do you access a `public` instance variable from a subclass?
A) Directly by variable name
B) Using `super` keyword
C) Using `this` keyword
D) Both A and B
ANSWER: D
How do you access a static variable?
A) Through the class name
B) Through an object reference
C) Either through the class name or an object reference
D) Through the 'this' keyword
ANSWER: C
How do you access instance variables of a class?
A) Using the class name
B) Using the object reference
C) Using the method name
D) Using the package name
ANSWER: B
How do you add all elements of one list to another?
A) destinationList.addAll(sourceList)
B) destinationList.appendAll(sourceList)
C) destinationList += sourceList
D) destinationList.add(sourceList)
ANSWER: A
How do you add an element to a Stack?
A) stack.add(element)
B) stack.push(element)
C) stack.enqueue(element)
D) stack.insert(element)
ANSWER: B
How do you add an element to the beginning of a LinkedList?
A) list.addFirst(element)
B) list.add(0, element)
C) list.push(element)
D) All of the above
ANSWER: D
How do you add JDK to PATH on Windows?
A) Edit .bashrc
B) System Environment Variables
C) Edit .bash_profile
D) Edit .env
ANSWER: B
How do you call a method from the same class in Java?
A) Using the `this` keyword
B) Using the class name
C) Directly by the method name
D) Using an object reference
ANSWER: C
How do you call a static method from a different class?
A) Using the `this` keyword
B) Using the class name
C) Directly by the method name
D) Using an object reference
ANSWER: B
How do you call a superclass constructor from a subclass?
A) `super()`
B) `super.constructor()`
C) `this()`
D) `super.super()`
ANSWER: A
How do you call a superclass constructor from a subclass?
A) using `this()`
B) using `super()`
C) using `new`
D) using `super`
ANSWER: B
How do you call an instance method `myMethod` of an object `obj`?
A) `obj-&gt;myMethod();`
B) `myMethod.obj();`
C) `obj.myMethod();`
D) `myMethod(obj);`
ANSWER: C
How do you catch a NoSuchElementException when using Enumeration?
A) Using try-catch blocks
B) Using if-else conditions to check if `hasMoreElements()` returns true
C) Both A and B
D) Enumeration does not throw NoSuchElementException
ANSWER: C
How do you check if a LinkedList is empty?
A) list.size() == 0
B) list.isEmpty()
C) Either A or B
D) list.contains(null)
ANSWER: C
How do you check if a list contains all elements of another collection?
A) list.containsAll(collection)
B) list.hasAll(collection)
C) list.includesAll(collection)
D) list.equalTo(collection)
ANSWER: A
How do you check if a Vector is empty?
A) isEmpty()
B) isBlank()
C) isNull()
D) hasElements()
ANSWER: A
How do you check if there are more elements while iterating through a List using an Iterator?
A) hasMore()
B) hasNext()
C) isNotEmpty()
D) hasElements()
ANSWER: B
How do you collect elements from a Stream back into a list?
A) stream.collect(Collectors.toList())
B) stream.toList()
C) stream.collect(toList())
D) stream.assemble(Collectors.toList())
ANSWER: A
How do you compile a Java program for Java 8 using the `--release` flag?
A) javac --release 8 MyProgram.java
B) javac -version 8 MyProgram.java
C) javac -release:8 MyProgram.java
D) None of the above
ANSWER: A
How do you concatenate two lists into a single list using Java Streams?
A) Stream.concat(list1.stream(), list2.stream()).collect(Collectors.toList())
B) list1.stream().concat(list2.stream()).collect(Collectors.toList())
C) list1.stream().add(list2.stream()).collect(Collectors.toList())
D) list1.stream().merge(list2.stream()).collect(Collectors.toList())
ANSWER: A
How do you convert a list of Strings to uppercase using Java Streams?
A) list.stream().map(String::toUpperCase)
B) list.stream().toUpperCase()
C) list.stream().convert(String::toUpperCase)
D) list.stream().map(s -&gt; s.toUpperCase())
ANSWER: A
How do you convert a List to a Queue in Java?
A) new LinkedList&lt;&gt;(list)
B) Queue.fromList(list)
C) list.toQueue()
D) list.convertTo(Queue.class)
ANSWER: A
How do you convert a List to a Set in Java?
A) new HashSet&lt;&gt;(list)
B) Set.fromList(list)
C) list.toSet()
D) list.convertTo(Set.class)
ANSWER: A
How do you convert a List to an array in Java?
A) list.toArray()
B) Arrays.asList(list)
C) new Array(list)
D) Arrays.fromList(list)
ANSWER: A
How do you convert a String to an int in Java?
A) Integer.parseInt()
B) String.toInt()
C) Integer.toInteger()
D) String.parseInteger()
ANSWER: A
How do you convert a Vector to an array?
A) toArray()
B) toVectorArray()
C) toCollectionArray()
D) vectorArray()
ANSWER: A
How do you convert an array to a List in Java?
A) list.toArray(array)
B) Arrays.asList(array)
C) list.fromArray(array)
D) new List(array)
ANSWER: B
How do you convert an array to a Vector?
A) new Vector(Arrays.asList(array))
B) new Vector(array)
C) Vector.fromArray(array)
D) Vector.asVector(array)
ANSWER: A
How do you create a copy constructor?
A) By passing an object of the same class as a parameter
B) By passing the class type as a parameter
C) By using the `clone` method
D) None of the above
ANSWER: A
How do you create a new Java class in NetBeans?
A) File -&gt; New -&gt; Java Class
B) Right Click on Project -&gt; New -&gt; Java Class
C) File -&gt; Open -&gt; New Java Class
D) Navigate to Project -&gt; Add -&gt; Class
ANSWER: B
How do you create a sublist from an ArrayList named `list` from index 1 to 3?
A) list.subList(1, 3)
B) list.subList(1, 4)
C) list.slice(1, 3)
D) list.range(1, 3)
ANSWER: B
How do you create an ArrayList from another Collection object?
A) new ArrayList(collection)
B) ArrayList.fromCollection(collection)
C) ArrayList.addAll(collection)
D) ArrayList.of(collection)
ANSWER: A
How do you create an immutable list in Java?
A) Collections.unmodifiableList(list)
B) List.of(elements)
C) Collections.freeze(list)
D) A and B
ANSWER: D
How do you create an object of a class `MyClass`?
A) `new MyClass;`
B) `new object(MyClass);`
C) `new MyClass();`
D) `MyClass.new();`
ANSWER: C
How do you declare an instance variable in a class?
A) `int x;`
B) `static int x;`
C) `final int x;`
D) `transient int x;`
ANSWER: A
How do you declare multiple instance variables `x`, `y`, and `z` of type `int`?
A) `int x, int y, int z;`
B) `int x, y, z;`
C) `int x; int y; int z;`
D) Both B and C
ANSWER: D
How do you define a custom annotation?
A) enum @Name {}
B) class @Name {}
C) interface @Name {}
D) @interface Name {}
ANSWER: D
How do you define a retention policy for a custom annotation?
A) @Retention(RetentionPolicy.RUNTIME)
B) @Retention(time = RetentionPolicy.RUNTIME)
C) @Retain(RetentionPolicy.RUNTIME)
D) None of the above
ANSWER: A
How do you define an instance method that takes an integer `x` and returns its double value?
A) `int double(int x) { return 2 * x; }`
B) `double(int x) { return 2 * x; }`
C) `int double(x) { return 2 * x; }`
D) `double = 2 * x;`
ANSWER: A
How do you enable remote debugging in a Java application running in a Docker container?
A) Use the `-Dcom.sun.management.jmxremote` JVM option
B) Expose port 5005 and use remote debugging JVM options
C) Attach a debugging agent to the running container
D) None of the above
ANSWER: B
How do you ensure that a Singleton class is thread-safe?
A) By using synchronized methods
B) By using a static instance variable
C) By using lazy initialization
D) By using eager initialization
ANSWER: A
How do you ensure that a Vector is only accessible for read operations?
A) Use `Collections.unmodifiableList(vector)`
B) Use `vector.setReadOnly()`
C) Use `Collections.synchronizedList(vector)`
D) Use `Collections.readOnlyList(vector)`
ANSWER: A
How do you ensure that an Enumeration has more elements to avoid NoSuchElementException?
A) Use hasNext()
B) Use hasMoreElements()
C) Use next()
D) Use exists()
ANSWER: B
How do you ensure thread safety with ArrayList?
A) Collections.synchronizedList(list)
B) ArrayList is already thread-safe
C) Use ReentrantLock
D) None of the above
ANSWER: A
How do you establish a simple client-server connection using Sockets?
A) new Socket("hostname", port)
B) new ServerSocket(port)
C) Both A and B
D) None of the above
ANSWER: C
How do you explicitly cast a double to an int in Java?
A) (int) doubleVariable
B) int(doubleVariable)
C) Cast.doubleToInt(doubleVariable)
D) Double.toInt(doubleVariable)
ANSWER: A
How do you filter elements from a list using Java Streams?
A) list.stream().filter(predicate)
B) list.filter(predicate)
C) list.stream().select(predicate)
D) list.select(predicate)
ANSWER: A
How do you find the first occurrence of an element in a List?
A) list.indexOf(element)
B) list.search(element)
C) list.find(element)
D) list.firstOf(element)
ANSWER: A
How do you find the last occurrence of an element in a List?
A) list.lastIndexOf(element)
B) list.searchLast(element)
C) list.findLast(element)
D) list.endOf(element)
ANSWER: A
How do you find the minimum element in a list of integers using Java Streams?
A) list.stream().min()
B) list.stream().minimum()
C) list.stream().smallest()
D) list.stream().least()
ANSWER: A
How do you find the sum of all integers in a list using Java Streams?
A) list.stream().sum()
B) list.stream().collect(Collectors.summingInt(Integer::intValue))
C) list.stream().reduce(0, Integer::sum)
D) B and C
ANSWER: D
How do you generate a stack trace for Java classes?
A) jmap
B) jhat
C) jstack
D) jconsole
ANSWER: C
How do you get an instance of the `Class` object?
A) Class.getInstance()
B) Class.forName("className")
C) new Class("className")
D) Class.new("className")
ANSWER: B
How do you handle a null list in Java?
A) Check for null before any operation
B) Use Optional.ofNullable(list)
C) Throw a custom exception
D) A and B
ANSWER: D
How do you handle an IndexOutOfBoundsException in Vector?
A) Using try-catch blocks
B) Using if-else conditions to check bounds
C) Using the `contains()` method before access
D) A and B
ANSWER: D
How do you initialize an instance variable `x` with a value `10`?
A) `int x(10);`
B) `int x = 10;`
C) `int x; x = 10;`
D) Both B and C
ANSWER: D
How do you initialize instance variables in Java?
A) In the constructor
B) In methods
C) Directly in the class body
D) All of the above
ANSWER: D
How do you insert an element at a specific position in Vector?
A) insertAt()
B) insert()
C) add(index, element)
D) put(index, element)
ANSWER: C
How do you install Eclipse IDE on Ubuntu?
A) sudo apt install eclipse
B) yum install eclipse
C) pacman -S eclipse
D) brew install eclipse
ANSWER: A
How do you install JDK on Ubuntu Linux?
A) sudo apt install openjdk
B) yum install jdk
C) brew install jdk
D) pacman -S jdk
ANSWER: A
How do you integrate SonarQube with Eclipse?
A) Through the 'SonarLint' plugin
B) Through the 'Maven Sonar Plugin'
C) Through 'Project -&gt; Configure -&gt; Add SonarQube'
D) None of the above
ANSWER: A
How do you invoke a method in Java?
A) Using the method name
B) Using the object reference
C) Using the class name
D) Both A and B
ANSWER: B
How do you iterate through an ArrayList using a for-each loop?
A) `for(int i : list)`
B) `for(Element e : list)`
C) `for(int i = 0; i &lt; list.size(); i++)`
D) Both A and B
ANSWER: D
How do you limit a stream to N elements?
A) list.stream().limit(N)
B) list.stream().cap(N)
C) list.stream().restrict(N)
D) list.stream().bound(N)
ANSWER: A
How do you make a List thread-safe for read operations?
A) Synchronize every read operation
B) Use ReadWriteLock
C) Use CopyOnWriteArrayList
D) A and B
ANSWER: D
How do you make a shallow copy of a Vector?
A) vector.clone()
B) new Vector(vector)
C) vector.copy()
D) Both A and B are correct
ANSWER: D
How do you obtain an array from a Vector?
A) toArray()
B) toVectorArray()
C) toListArray()
D) toSetArray()
ANSWER: A
How do you obtain an Iterator object from a List?
A) list.iterator()
B) new Iterator(list)
C) Iterator.fromList(list)
D) Iterator.of(list)
ANSWER: A
How do you pass an argument to a method?
A) By declaring it inside the method
B) By placing it within the parentheses when calling the method
C) By declaring it outside the method
D) By returning it from the method
ANSWER: B
How do you perform a binary search on a sorted ArrayList?
A) Collections.binarySearch(list, element)
B) list.binarySearch(element)
C) list.indexOf(element)
D) Arrays.binarySearch(list, element)
ANSWER: A
How do you perform a case-insensitive search for a String element in a List?
A) Override equals method for case-insensitive comparison
B) Use a loop with `equalsIgnoreCase`
C) Convert list and element to lowercase before using indexOf
D) Both B and C are correct
ANSWER: D
How do you perform a case-insensitive search for a String element in a Vector?
A) Override equals method for case-insensitive comparison
B) Use a loop with `equalsIgnoreCase`
C) Convert Vector and element to lowercase before using indexOf
D) Both B and C are correct
ANSWER: D
How do you perform a descending sort on a List of integers using Java Streams?
A) list.stream().sorted(Comparator.reverseOrder())
B) list.stream().sorted().reverse()
C) list.stream().sorted(Collections.reverseOrder())
D) list.stream().reversed().sorted()
ANSWER: A
How do you prevent a class from being subclassed?
A) By making it private
B) By making it final
C) By making it static
D) By making it abstract
ANSWER: B
How do you read a character from the console in Java?
A) System.in.read()
B) System.in.readChar()
C) Scanner.nextChar()
D) BufferedReader.readChar()
ANSWER: A
How do you read multiple integers from a single line using `Scanner`?
A) Use nextInt() multiple times
B) Use nextLine() and split the line
C) Use nextInt() with useDelimiter()
D) All of the above are valid
ANSWER: D
How do you remove all elements from a LinkedList?
A) list.empty()
B) list.removeAll()
C) list.clear()
D) list.deleteAll()
ANSWER: C
How do you remove all elements from a Vector?
A) removeAll()
B) clear()
C) deleteAll()
D) Both A and B are correct
ANSWER: B
How do you remove an element from a specific index in a Vector?
A) remove(int index)
B) delete(int index)
C) erase(int index)
D) pop(int index)
ANSWER: A
How do you remove an element from an ArrayList by index?
A) `list.remove(index);`
B) `list.delete(index);`
C) `list.removeElement(index);`
D) `list.destroy(index);`
ANSWER: A
How do you remove synchronization from a Vector while still using its API?
A) Using `Collections.unmodifiableList`
B) Using `Collections.synchronizedList`
C) It's not possible
D) Using reflection to remove the `synchronized` keyword
ANSWER: C
How do you remove the first occurrence of a specific element in a Vector?
A) remove(E element)
B) delete(E element)
C) erase(E element)
D) removeAll(E element)
ANSWER: A
How do you remove the last element from a LinkedList?
A) list.removeLast()
B) list.pollLast()
C) list.pop()
D) All of the above
ANSWER: D
How do you replace an element at a specific index in an ArrayList?
A) list.replace(index, element)
B) list.update(index, element)
C) list.set(index, element)
D) list.modify(index, element)
ANSWER: C
How do you retrieve a localized message from a `ResourceBundle`?
A) ResourceBundle.get("key")
B) ResourceBundle.getMessage("key")
C) ResourceBundle.getString("key")
D) ResourceBundle.retrieve("key")
ANSWER: C
How do you reverse a List in Java?
A) Collections.reverse(list)
B) list.reverse()
C) Collections.sort(list, Collections.reverseOrder())
D) Both A and C
ANSWER: D
How do you reverse a list in Java?
A) Collections.sort(list, Collections.reverseOrder())
B) Collections.reverse(list)
C) list.sort(Comparator.reverseOrder())
D) All of the above
ANSWER: D
How do you reverse sort a Vector using a custom comparator?
A) Use `Collections.reverseOrder(customComparator)`
B) Use `Collections.sort(vector, Collections.reverseOrder(customComparator))`
C) Use `vector.reverseSort(customComparator)`
D) Use `Collections.sort(vector, customComparator).reverse()`
ANSWER: B
How do you reverse the order of elements in a Vector?
A) Collections.reverse(vector)
B) vector.reverse()
C) Reverse the elements manually using a loop
D) Both A and C are correct
ANSWER: D
How do you search for an element in a Vector from a particular index?
A) indexOf(Object o, int index)
B) search(Object o, int index)
C) find(Object o, int index)
D) query(Object o, int index)
ANSWER: A
How do you set JAVA_HOME on a macOS system?
A) Edit .bashrc
B) Edit .bash_profile
C) System Preferences
D) Edit /etc/environment
ANSWER: B
How do you set JAVA_HOME on a Windows system?
A) Edit .bashrc
B) System Environment Variables
C) Edit /etc/environment
D) Edit .bash_profile
ANSWER: B
How do you set the JAVA_HOME variable on macOS?
A) Edit .bash_profile
B) Use the export command
C) Edit .bashrc
D) System Preferences
ANSWER: A
How do you skip the first N elements of a list using Java Streams?
A) list.stream().skip(N)
B) list.stream().ignore(N)
C) list.stream().jump(N)
D) list.stream().bypass(N)
ANSWER: A
How do you skip to the next element while iterating through a List using an Iterator?
A) next()
B) skip()
C) forward()
D) jump()
ANSWER: A
How do you sort a List in natural order using a custom Comparator?
A) Collections.sort(list, Comparator.naturalOrder())
B) list.sort(Comparator.naturalOrder())
C) Both A and B
D) None of the above
ANSWER: C
How do you sort a List in random order?
A) Collections.shuffle(list)
B) list.randomSort()
C) Collections.sort(list, Comparator.randomOrder())
D) list.sort(Comparator.randomOrder())
ANSWER: A
How do you sort a list of integers in descending order using Java Streams?
A) list.stream().sorted(Comparator.reverseOrder())
B) list.stream().sort(Comparator.reverseOrder())
C) list.stream().sorted().reverse()
D) list.stream().reverse().sorted()
ANSWER: A
How do you sort a List using Java Streams?
A) list.stream().sort()
B) list.stream().ordered()
C) list.stream().sorted()
D) list.stream().arrange()
ANSWER: C
How do you sort a List using the Collections framework?
A) Collections.sort(list)
B) list.sort()
C) Collections.order(list)
D) list.orderBy()
ANSWER: A
How do you sort a Vector based on multiple attributes of its custom objects?
A) Use `Comparator.comparing()` followed by `thenComparing()`
B) Use multiple `Collections.sort()` calls
C) Sort based on one attribute and then use a loop for the second attribute
D) Use `Comparator.multiSort()`
ANSWER: A
How do you sort a Vector in descending order without using a custom comparator?
A) `Collections.sort(vector, Collections.reverseOrder())`
B) `Collections.reverseSort(vector)`
C) `vector.sortDesc()`
D) `Collections.sort(vector).reverse()`
ANSWER: A
How do you sort a Vector of Strings in case-insensitive order?
A) Use `String.CASE_INSENSITIVE_ORDER` as the Comparator
B) Convert all Strings to lowercase before sorting
C) Convert all Strings to uppercase before sorting
D) It's not possible
ANSWER: A
How do you sort a Vector?
A) Vector.sort()
B) Collections.sort(vector)
C) vector.sort()
D) Both B and C are correct
ANSWER: B
How do you specify a Locale in Java?
A) new Locale("language", "country")
B) Locale.forLanguageTag("tag")
C) Both A and B
D) Locale.set("language", "country")
ANSWER: C
How do you specify multiple JVM options in a single command line?
A) Separate them with commas
B) Separate them with semicolons
C) Separate them with spaces
D) None of the above
ANSWER: C
How do you specify that a thread should be a daemon thread?
A) Using `setDaemon(true)`
B) Using `setPriority(Thread.MAX_PRIORITY)`
C) Using `setDaemonThread(true)`
D) None of the above
ANSWER: A
How do you switch JDK versions in a Maven project?
A) Edit the 'pom.xml' file
B) Reinstall Maven with the desired JDK
C) Use the 'mvn --set-jdk' command
D) Change the project's build path in the IDE
ANSWER: A
How do you transform elements of a list using Java Streams?
A) list.stream().map(function)
B) list.stream().transform(function)
C) list.map(function)
D) list.transform(function)
ANSWER: A
How do you update the PATH on macOS?
A) System Preferences
B) Edit .bash_profile
C) Edit /etc/environment
D) Edit .bashrc
ANSWER: B
How does `CopyOnWriteArrayList` achieve thread-safety?
A) By locking
B) By making a fresh copy of the underlying array during modification
C) By using volatile variables
D) By blocking reads during writes
ANSWER: B
How does `insertElementAt(E obj, int index)` differ from `add(int index, E element)`?
A) `insertElementAt` is synchronized, `add` is not
B) `insertElementAt` adds the element at the end, `add` adds at the specified index
C) Both do the same thing
D) `insertElementAt` replaces the element, `add` inserts without replacing
ANSWER: A
How does `removeElement(Object obj)` differ from `remove(Object o)`?
A) `removeElement` removes all occurrences, `remove` removes the first occurrence
B) `removeElement` removes the first occurrence, `remove` removes all occurrences
C) Both do the same thing
D) `removeElement` is synchronized, `remove` is not
ANSWER: C
How does a change in the sublist reflect in the original Vector?
A) Change in sublist causes the original Vector to be sorted
B) Change in sublist causes a new Vector to be created
C) Change in sublist reflects in the original Vector
D) Change in sublist has no effect on the original Vector
ANSWER: C
How does a List differ from an array in Java?
A) List is resizable
B) List can contain different types of elements
C) List is not ordered
D) List has fixed size
ANSWER: A
How does bytecode achieve platform independence?
A) By using native machine code
B) By using a high-level language
C) By using an intermediate representation
D) By compiling at runtime
ANSWER: C
How does CMS Collector try to minimize application pauses?
A) Using incremental collection
B) Using background threads
C) Using single threads
D) None of the above
ANSWER: B
How does escape analysis improve performance?
A) By optimizing native calls
B) By allocating some objects on the stack instead of the heap
C) By parallelizing method calls
D) By reducing disk I/O
ANSWER: B
How does garbage collection interact with multi-threaded applications?
A) Causes more CPU load
B) Can introduce pause times affecting all threads
C) Reduces memory leaks
D) Speeds up execution
ANSWER: B
How does GC affect application latency?
A) GC pauses introduce delays
B) GC improves latency
C) GC has no effect on latency
D) GC reduces CPU usage
ANSWER: A
How does Generational GC improve performance?
A) By reducing fragmentation
B) By focusing on collecting short-lived objects
C) By reducing CPU usage
D) None of the above
ANSWER: B
How does HotSpot achieve high performance?
A) Just-In-Time compilation
B) Adaptive optimization techniques
C) Efficient garbage collection
D) All of the above
ANSWER: D
How does Just-In-Time (JIT) compilation affect startup performance?
A) Speeds up
B) Slows down
C) No effect
D) Varies depending on code
ANSWER: B
How does Just-In-Time Compilation (JIT) improve performance?
A) By reducing memory usage
B) By optimizing the translated machine code during runtime
C) By skipping the bytecode verification process
D) None of the above
ANSWER: B
How does the `-Xms` flag affect the JVM?
A) Sets maximum heap size
B) Sets initial heap size
C) Sets stack size
D) Enables garbage collection logging
ANSWER: B
How does the `javac` command work?
A) Compiles to native code
B) Compiles to bytecode
C) Executes Java code
D) Loads classes into memory
ANSWER: B
How does the JIT compiler improve performance?
A) By interpreting bytecode
B) By compiling bytecode to native code
C) By reducing the heap size
D) By performing garbage collection
ANSWER: B
How does the JIT compiler optimize performance?
A) By eliminating dead code
B) By loop unrolling
C) By method inlining
D) All of the above
ANSWER: D
How does the JVM allocate objects?
A) On the stack
B) In the method area
C) On the heap
D) In the native method stack
ANSWER: C
How does the JVM manage the lifecycle of an object?
A) Through Class Loading
B) Through Execution
C) Through Garbage Collection
D) Through Just-In-Time Compilation
ANSWER: C
How does the Serial Collector work?
A) Uses single thread for garbage collection
B) Uses multiple threads for garbage collection
C) Uses background threads for garbage collection
D) None of the above
ANSWER: A
How does Vector differ from ArrayList?
A) Vector is synchronized
B) Vector has fixed size
C) Vector uses a linked list data structure
D) ArrayList is synchronized
ANSWER: A
How does Vector ensure thread safety?
A) By using synchronized methods
B) By using volatile variables
C) By using ReentrantLock
D) By using atomic operations
ANSWER: A
How does Vector handle capacity overflow?
A) Increases capacity by 50%
B) Doubles the current capacity
C) Increases capacity based on the capacityIncrement value
D) Throws an OutOfMemoryError
ANSWER: C
How does ZGC achieve low-latency?
A) By avoiding stop-the-world pauses
B) By optimizing the Young Generation
C) By reducing the heap size
D) By optimizing the Old Generation
ANSWER: A
How is `JRE` different from `JDK`?
A) JRE contains tools for Java development
B) JRE is for running applications only
C) JDK is a subset of JRE
D) JRE includes the Java compiler
ANSWER: B
How is garbage collection mainly triggered?
A) Manually by the programmer
B) When the heap is full
C) At fixed time intervals
D) When CPU usage is low
ANSWER: B
How is GC duration typically measured?
A) In bytes
B) In milliseconds
C) In percentage
D) In kilobytes
ANSWER: B
How is JRE different from JDK?
A) JDK includes JRE
B) JRE includes JDK
C) JDK is for developers, JRE is for end-users
D) Both A and C
ANSWER: D
How is remote debugging different from local debugging?
A) Local debugging is faster
B) Remote debugging allows you to debug an application running on a different machine
C) Remote debugging doesn’t allow you to step through the code
D) None of the above
ANSWER: B
How is the `native` keyword used in Java?
A) To declare a thread-safe method
B) To declare an abstract method
C) To declare a method implemented in native code
D) To declare a static method
ANSWER: C
How many `case` labels can an `enum` type have in a `switch` statement?
A) Only one
B) As many as the number of constants in the enum
C) At most two
D) None
ANSWER: B
How many bytes does a `float` data type consume?
A) 2
B) 4
C) 8
D) 16
ANSWER: B
How many classes can a class extend in Java?
A) Zero
B) One
C) Multiple
D) As many as the system memory allows
ANSWER: B
How many constructors can a class have?
A) Only one
B) As many as needed
C) At most two
D) None
ANSWER: B
How many copies of a static variable are created?
A) One for each class
B) One for each object
C) One for each method
D) One for each package
ANSWER: A
How many default constructors can a class have?
A) Multiple
B) Only one
C) None
D) Depends on the number of attributes
ANSWER: B
How many objects can you create from a single class?
A) Only one
B) As many as the system memory allows
C) Zero
D) None of the above
ANSWER: B
How many parameters can a method have in Java?
A) 128
B) 256
C) No limit
D) Depends on JVM implementation
ANSWER: B
How many threads can execute a synchronized method on a given object simultaneously?
A) Zero
B) One
C) As many as the hardware supports
D) Two
ANSWER: B
How many varargs can a method have?
A) Only one
B) Up to two
C) Any number
D) None
ANSWER: A
How was Oak initially advertised?
A) As a language for embedded systems
B) As a language for interactive TV
C) As a language for web development
D) None of the above
ANSWER: B
How would you identify issues like long pause times in a Java application?
A) Manual code review
B) Detailed GC logs
C) CPU profiling
D) Disk I/O metrics
ANSWER: B
How would you specify an initial heap size of 512MB and a maximum heap size of 2GB?
A) -Xms=512MB -Xmx=2GB
B) -Xms512M -Xmx2G
C) -XX:NewSize=512MB -XX:MaxNewSize=2GB
D) -XX:MinHeapSize=512M -XX:MaxHeapSize=2G
ANSWER: B
If a class has multiple constructors with different parameters, what is it called?
A) Constructor Overriding
B) Constructor Initialization
C) Constructor Overloading
D) Constructor Invocation
ANSWER: C
If a class has one constructor which takes an argument, what happens when you try to create an object without passing any argument?
A) Compilation Error
B) An object is created with default values
C) A runtime error occurs
D) None of the above
ANSWER: A
If a Java application experiences frequent full GC events, what is likely to be affected the most?
A) Disk I/O
B) CPU usage
C) Application latency
D) Network latency
ANSWER: C
In a case study where GC tuning improved application performance, what metric is most likely to have been positively affected?
A) CPU utilization
B) Latency
C) Disk I/O
D) Network bandwidth
ANSWER: B
In a case study, if application latency decreased after GC tuning, what likely changed?
A) Decreased heap size
B) Reduced GC pause times
C) Increased CPU utilization
D) Improved network latency
ANSWER: B
In a real-world scenario like a login system, which control structure is typically used to validate user credentials?
A) if-else statement
B) switch statement
C) for loop
D) while loop
ANSWER: A
In a real-world scenario like processing a list of orders, which loop is generally used?
A) for loop
B) while loop
C) for-each loop
D) do-while loop
ANSWER: C
In a real-world scenario, which loop is generally used for iterating over a collection of elements?
A) for loop
B) while loop
C) for-each loop
D) do-while loop
ANSWER: C
In composition, who is responsible for the lifetime of the object being composed?
A) The composed object itself
B) The composing object
C) The garbage collector
D) None of the above
ANSWER: B
In Eclipse, how do you create a new Java Class?
A) File -&gt; New -&gt; Class
B) File -&gt; New -&gt; Java Class
C) File -&gt; Import -&gt; Java Class
D) File -&gt; Open -&gt; New Class
ANSWER: A
In IntelliJ IDEA, what does the 'Extract Method' refactoring do?
A) Replaces a set of comments with a method
B) Turns a code fragment into a new method
C) Creates a copy of the selected method
D) None of the above
ANSWER: B
In IntelliJ IDEA, what does the 'Step Over' debugging option do?
A) Skips the current line of code
B) Executes the current line and moves to the next line
C) Steps into the function being called
D) Exits the debugging session
ANSWER: B
In IntelliJ IDEA, what does the green 'Run' button do?
A) Compiles the code
B) Executes the code
C) Compiles and Executes the code
D) Debugs the code
ANSWER: C
In Java 16+, which keyword is used to perform pattern matching in a `switch` statement?
A) match
B) instanceof
C) pattern
D) switch
ANSWER: B
In Java Memory Model, where are local variables primarily stored?
A) Stack Memory
B) Heap Memory
C) Native Memory
D) None of the above
ANSWER: A
In Java, everything is an object except:
A) Primitives
B) Arrays
C) Strings
D) None of the above
ANSWER: A
In Java, what is the concept of a thread?
A) A path of execution
B) A class in the Java standard library
C) A CPU core
D) A data structure
ANSWER: A
In Spring Framework, what annotation can be used as an alternative to `@Autowired` for constructor injection?
A) `@Component`
B) `@Inject`
C) `@Service`
D) `@Resource`
ANSWER: B
In the command `javac HelloWorld.java`, what is `HelloWorld.java`?
A) The source code file
B) The bytecode file
C) The class file
D) The Java Archive
ANSWER: A
In the context of GC logs, what does "Full GC" imply?
A) Only Young Generation is collected
B) Only Old Generation is collected
C) Both Young and Old Generations are collected
D) None of the above
ANSWER: C
In the context of Java, what does 'HotSpot' refer to?
A) A particular line of code that takes a long time to execute
B) The Java IDE provided by Oracle
C) An implementation of the Java Virtual Machine
D) None of the above
ANSWER: C
In what case is the `else` block executed in an `if-else` construct?
A) When the `if` condition is true
B) When the `if` condition is false
C) When there is a syntax error in the `if` block
D) When the program ends
ANSWER: B
In what format does the Java compiler output code?
A) Source code
B) Native machine code
C) Bytecode
D) Assembly code
ANSWER: C
In what format does the Java compiler store literals for floating-point numbers?
A) float
B) double
C) long float
D) int
ANSWER: B
In what sequence are class loaders called by default?
A) Bootstrap -&gt; System -&gt; Extension
B) Bootstrap -&gt; Extension -&gt; System
C) System -&gt; Bootstrap -&gt; Extension
D) Extension -&gt; System -&gt; Bootstrap
ANSWER: B
In what year did Project Oak get started?
A) 1990
B) 1991
C) 1992
D) 1994
ANSWER: B
In what year was Project Oak initiated?
A) 1991
B) 1992
C) 1993
D) 1994
ANSWER: A
In which directory does Eclipse usually store new Java projects by default?
A) Home directory
B) Workspace
C) Current directory
D) Desktop
ANSWER: B
In which file can you specify a JDK version for a Gradle project?
A) settings.gradle
B) build.gradle
C) gradle.properties
D) gradle-config.xml
ANSWER: B
In which file would you specify JVM options in a Maven project?
A) build.xml
B) pom.xml
C) settings.gradle
D) None of the above
ANSWER: B
In which folder do you usually find the classes loaded by the Bootstrap class loader?
A) /lib
B) /ext
C) /bin
D) None of the above
ANSWER: A
In which IDE would you find the 'Pull Request' feature natively supported?
A) Eclipse
B) IntelliJ IDEA
C) NetBeans
D) Visual Studio Code
ANSWER: B
In which language is Java bytecode written?
A) Binary
B) Java
C) Assembly
D) XML
ANSWER: A
In which memory area does HotSpot store the bytecodes?
A) Heap
B) Stack
C) Method Area
D) Code Cache
ANSWER: C
In which part of the memory do class definitions get stored?
A) Stack
B) Method Area
C) Java Heap
D) Native Method Stack
ANSWER: B
In which phase is the bytecode verified for security constraints?
A) Loading
B) Verification
C) Preparation
D) Initialization
ANSWER: B
In which real-world scenario would you recommend using Vector?
A) High-frequency trading systems
B) Single-threaded applications
C) Legacy systems requiring thread safety
D) Data analytics processing
ANSWER: C
In which scenario is a `while` loop generally more appropriate than a `for` loop?
A) When you know the exact number of iterations
B) When you need to iterate through an array
C) When the number of iterations is not known beforehand
D) All of the above
ANSWER: C
In which scenario is using Vector preferable over ArrayList?
A) When thread-safety is required
B) When frequent insertions and deletions occur
C) When the data structure is used in a single-threaded environment
D) When the least amount of memory usage is desired
ANSWER: A
In which scenario would you typically use the `jlink` tool?
A) When you want to share your application
B) When your application has a small number of dependencies
C) When you need to create a lightweight, custom JRE
D) All of the above
ANSWER: C
In which space are new objects primarily allocated?
A) Eden Space
B) Survivor Space
C) Old Generation
D) Metaspace
ANSWER: A
In which version of Java was the G1 garbage collector introduced?
A) Java 6
B) Java 7
C) Java 8
D) Java 9
ANSWER: B
In which version was the Java Compiler API introduced?
A) Java 5
B) Java 6
C) Java 7
D) Java 8
ANSWER: B
In which year did Oracle acquire Sun Microsystems?
A) 2008
B) 2009
C) 2010
D) 2011
ANSWER: C
In which year was Java first publicly released?
A) 1994
B) 1996
C) 1995
D) 1993
ANSWER: C
In which year was Java officially released to the public?
A) 1991
B) 1995
C) 2000
D) 2004
ANSWER: B
Is `addElement(E obj)` a synchronized method?
A) Yes
B) No
C) Partially
D) It depends on the implementation
ANSWER: A
Is ArrayList synchronized?
A) Yes
B) No
C) It can be made synchronized using Collections.synchronizedList()
D) Both B and C
ANSWER: D
Is indentation required for `if` statements?
A) Yes, it's mandatory in all languages
B) No, but it improves readability
C) Yes, but only in languages like Python
D) No, it's purely optional and has no effect
ANSWER: C
Is it a good practice to manually call `System.gc()` to optimize GC?
A) Yes, always
B) No, never
C) Only in specific edge cases
D) It doesn't matter
ANSWER: C
Is it mandatory to catch an exception when a method throws it?
A) Yes
B) No
C) Only for checked exceptions
D) Only for unchecked exceptions
ANSWER: C
Is it mandatory to have a return statement in a non-void method?
A) Yes
B) No
C) Only if the method has parameters
D) Only if the method is static
ANSWER: A
Is it mandatory to pass an argument to a method that has parameters?
A) Yes
B) No
C) Only if the parameters are of primitive types
D) Only if the parameters are of object types
ANSWER: A
Is it possible to call a constructor from a method?
A) Yes
B) No
C) Only from static methods
D) Only from non-static methods
ANSWER: B
Is it possible to call a private method from a different class?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is non-static
ANSWER: B
Is it possible to call a subclass constructor from a superclass constructor?
A) Yes
B) No
C) Only if the subclass constructor is public
D) Only if the subclass constructor is protected
ANSWER: B
Is it possible to explicitly call a constructor from a method?
A) Yes
B) No
C) Only from static methods
D) Only from non-static methods
ANSWER: B
Is it possible to make a constructor abstract?
A) Yes
B) No
C) Only if the class is abstract
D) Only if the class is final
ANSWER: B
Is it possible to overload a method in the same class where it is declared?
A) Yes
B) No
C) Only if the method is static
D) Only if the method is final
ANSWER: A
Is it possible to overload the main method in Java?
A) Yes
B) No
C) Only with different return types
D) Only in Java 8 and above
ANSWER: A
Is it possible to turn off the JIT compiler for specific methods?
A) No
B) Yes, with the -XX:CompileOnly flag
C) Yes, with the -XX:CompileCommand flag
D) Yes, but requires recompiling Java
ANSWER: C
Is it possible to use the `this` keyword in a constructor?
A) Yes
B) No
C) Only if the constructor is public
D) Only if the constructor is private
ANSWER: A
Is it possible to view bytecode of a Java class file?
A) No
B) Yes, with any text editor
C) Yes, with the `javap` command
D) Yes, but requires a special compiler
ANSWER: C
Is JVM platform-independent?
A) Yes
B) No
C) Depends on the version
D) None of the above
ANSWER: B
Is the `insertElementAt(E obj, int index)` method more efficient than `addElement(E obj)`?
A) Yes
B) No
C) Depends on the index
D) They are equally efficient
ANSWER: B
Is the sublist returned by `subList()` method thread-safe?
A) Yes
B) No
C) Depends on the original Vector
D) Depends on the Java version
ANSWER: C
Is Vector a legacy class in Java?
A) Yes
B) No
C) Partially
D) It depends on the Java version
ANSWER: A
Is Vector suitable for use in multi-threaded applications?
A) Yes
B) No
C) Only for read operations
D) Only for write operations
ANSWER: A
Is Vector thread-safe in Java?
A) Yes
B) No
C) Partially
D) It depends on the implementation
ANSWER: A
Java was initially developed as a part of which project?
A) Green Project
B) Red Project
C) Blue Project
D) Yellow Project
ANSWER: A
On which of the following operating systems can JDK be installed?
A) macOS
B) Linux
C) Windows
D) All of the above
ANSWER: D
Project Oak was intended to operate on which kind of processors?
A) ARM
B) RISC
C) x86
D) SPARC
ANSWER: B
Project Oak was part of which larger initiative at Sun Microsystems?
A) Blue Project
B) Green Project
C) Red Project
D) Yellow Project
ANSWER: B
Project Panama aims to improve what aspect of JVM?
A) Foreign function interface
B) Garbage Collection
C) Concurrency
D) Security
ANSWER: A
The adoption of which technology has significantly improved JVM performance in recent years?
A) GraalVM
B) OpenJ9
C) JRockit
D) All of the above
ANSWER: A
The bytecode in Java is executed by which of the following?
A) Compiler
B) Linker
C) JVM
D) OS
ANSWER: C
The Parallel Collector is also known as __________.
A) Throughput Collector
B) Latency Collector
C) Real-Time Collector
D) None of the above
ANSWER: A
The Serial Collector is generally suitable for which type of applications?
A) Real-time systems
B) Client-side applications
C) Large-scale enterprise applications
D) None of the above
ANSWER: B
Was Project Oak initially open-source?
A) Yes
B) No
ANSWER: B
What algorithm does the JVM use for garbage collection?
A) Depth-First Search
B) Breadth-First Search
C) Mark and Sweep
D) None of the above
ANSWER: C
What are .class files in Java?
A) Source code files
B) Object files
C) Compiled bytecode files
D) Executable files
ANSWER: C
What are Annotations in Java primarily used for?
A) Data Storage
B) Metadata
C) Encryption
D) Synchronization
ANSWER: B
What are daemon threads in Java?
A) Threads that execute background tasks
B) Threads responsible for garbage collection
C) Both A and B
D) None of the above
ANSWER: C
What are Java 'annotations' primarily used for?
A) Data manipulation
B) Meta-programming
C) Asynchronous programming
D) Multithreading
ANSWER: B
What are the key differences between Generational and Mark-and-Sweep GC?
A) Generational is faster but uses more memory
B) Mark-and-Sweep compacts memory, Generational does not
C) Generational focuses on short-lived objects, Mark-and-Sweep does not
D) Both A and C
ANSWER: D
What are the performance implications of setting a high initial capacity for a Vector?
A) Faster addition operations
B) More memory consumption
C) Slower search operations
D) A and B
ANSWER: D
What are the performance implications of Vector being synchronized?
A) Slower read operations
B) Slower write operations
C) Slower both read and write operations
D) Faster both read and write operations
ANSWER: C
What area of memory is cleaned during a minor garbage collection event?
A) Old Generation
B) Young Generation
C) Permanent Generation
D) Native Method Stack
ANSWER: B
What aspect of a Java application is most improved by advanced GC algorithms?
A) Code readability
B) Latency
C) Security
D) Code reusability
ANSWER: B
What can an inner class access?
A) Only static members of the outer class
B) Only non-static members of the outer class
C) Both static and non-static members of the outer class
D) None of the above
ANSWER: C
What can be a consequence of improper garbage collection tuning?
A) Improved throughput
B) Balanced latency
C) Application crashes
D) Reduced disk I/O
ANSWER: C
What can be a reason to disable JIT compilation?
A) To improve startup speed
B) To achieve faster execution
C) To debug certain issues more easily
D) To reduce memory footprint
ANSWER: C
What can cause GC to negatively impact application throughput?
A) Frequent object allocation
B) Infrequent object allocation
C) Small heap size
D) Large heap size
ANSWER: A
What can contribute to frequent minor GCs?
A) Large Young Generation
B) Small Young Generation
C) Large heap size
D) Small Old Generation
ANSWER: B
What can long GC pauses lead to in a latency-sensitive application?
A) Improved latency
B) Degrading user experience
C) Improved throughput
D) Reduced CPU usage
ANSWER: B
What can trigger a NoClassDefFoundError?
A) Class file exists but is empty
B) Class file exists but has illegal bytecode
C) Class file does not exist
D) None of the above
ANSWER: C
What can you define in an interface?
A) Only abstract methods
B) Abstract methods and static methods
C) Abstract methods, static methods, and default methods
D) Abstract methods, static methods, default methods, and instance variables
ANSWER: C
What can you infer about a Java class file with a major version number of 57?
A) It was compiled with Java 13
B) It was compiled with Java 8
C) It was compiled with Java 11
D) It was compiled with Java 7
ANSWER: A
What class in the Reflection API can you use to instantiate a new object?
A) `java.lang.Class`
B) `java.lang.reflect.Constructor`
C) `java.lang.Object`
D) Both A and B
ANSWER: D
What command can confirm that an IDE’s integrated JDK is used?
A) java -version within the IDE terminal
B) javac -version within the IDE terminal
C) Both A and B
D) Checking IDE settings
ANSWER: C
What command can you use to check if Java is installed on macOS?
A) javac -version
B) java --check
C) checkjava
D) java -v
ANSWER: A
What command do you use to update JDK package on Ubuntu?
A) sudo apt update &amp;&amp; sudo apt upgrade
B) sudo yum update jdk
C) sudo pacman -Syu jdk
D) brew upgrade jdk
ANSWER: A
What command initializes a new Maven project?
A) mvn init
B) mvn start
C) mvn archetype:generate
D) mvn create
ANSWER: C
What command would you use to monitor garbage collection statistics for a Java process with PID 1234?
A) jstat -gc 1234
B) jconsole 1234
C) jvisualvm -pid=1234
D) jinfo 1234
ANSWER: A
What command-line option in Java allows you to enable Just-In-Time compilation?
A) -enablejit
B) -DenableJIT
C) -XX:+UseJIT
D) -Xcomp
ANSWER: D
What could be a downside of having a very large heap size?
A) Frequent garbage collection
B) Longer GC pauses
C) Higher CPU usage
D) Smaller GC pauses
ANSWER: B
What data structure does the JVM use for storing method data?
A) Array
B) Stack
C) Heap
D) Queue
ANSWER: B
What design pattern ensures that a class has only one instance and provides a global point to access it?
A) Factory Pattern
B) Singleton Pattern
C) Observer Pattern
D) Builder Pattern
ANSWER: B
What design pattern provides an interface for creating objects in a superclass but allows subclasses to alter the type of objects that will be created?
A) Factory Pattern
B) Singleton Pattern
C) Observer Pattern
D) Builder Pattern
ANSWER: A
What did Oracle discontinue after acquiring Sun Microsystems?
A) Solaris
B) NetBeans
C) Project Kenai
D) JavaFX
ANSWER: C
What did Project Coin, part of Java 7, focus on?
A) Concurrency
B) Language simplicity
C) Modularization
D) Security
ANSWER: B
What did Project Jigsaw focus on?
A) Modules
B) Concurrency
C) Language syntax
D) Libraries
ANSWER: A
What do all reference data types have in common?
A) They are all subclasses of Object
B) They are all mutable
C) They all inherit from java.lang
D) They all implement Serializable interface
ANSWER: A
What do getters and setters allow you to do?
A) Get and set static variables
B) Get and set private variables
C) Get and set public variables
D) Get and set protected variables
ANSWER: B
What do you analyze to identify inefficient memory use patterns in a Java application?
A) GC duration
B) Heap occupancy
C) CPU usage
D) Network latency
ANSWER: B
What do you call a data type created using an enumeration?
A) Enum Type
B) Object Type
C) Reference Type
D) Value Type
ANSWER: A
What do you call a data type defined by the user?
A) Custom Data Type
B) Class
C) User Type
D) Enum
ANSWER: B
What do you need to install to get IntelliJ IDEA on macOS?
A) Installer package
B) Homebrew package
C) .deb file
D) .tar.gz file
ANSWER: B
What do you need to pass as arguments to the `subList()` method to get a view of the entire Vector?
A) `subList(0, vector.size())`
B) `subList(0, 0)`
C) `subList(vector.size(), vector.size())`
D) `subList(0, vector.size()-1)`
ANSWER: A
What do you need to provide when you use getters?
A) A return type
B) An argument
C) Both A and B
D) None of the above
ANSWER: A
What do you need to provide when you use setters?
A) A return type
B) An argument
C) Both A and B
D) None of the above
ANSWER: B
What do you need to run bytecode on a different platform?
A) Recompile the source code
B) A different bytecode file
C) A platform-specific JVM
D) No changes are needed
ANSWER: C
What do you use `System.clearProperty` for?
A) To reset an environment variable
B) To reset a system property
C) To clear the console output
D) None of the above
ANSWER: B
What does `Collections.binarySearch(vector, key)` do?
A) Returns the index of the key if it exists in the sorted Vector
B) Sorts the Vector and then returns the index of the key
C) Returns a boolean indicating if the key exists in the Vector
D) None of the above
ANSWER: A
What does `contains(Object o)` do?
A) Checks if the Vector contains the specified object
B) Returns the index of the specified object
C) Both A and B
D) None of the above
ANSWER: A
What does `CopyOnWriteArrayList` return when you call its `toArray()` method?
A) The original array
B) A shallow copy of the array
C) A deep copy of the array
D) A synchronized array
ANSWER: B
What does `firstElement()` return?
A) The first element in the Vector
B) The index of the first element
C) A new Vector containing the first element
D) None of the above
ANSWER: A
What does `indexOf(Object o)` do in a Vector?
A) Returns the index of the first occurrence of the specified element
B) Returns the index of the last occurrence of the specified element
C) Returns a boolean indicating if the element exists
D) None of the above
ANSWER: A
What does `jar` stand for in the context of JDK?
A) Java ARchive
B) Just A Resource
C) Java Application Runtime
D) Java Argument Resolver
ANSWER: A
What does `lastElement()` return?
A) The last element in the Vector
B) The index of the last element
C) A new Vector containing the last element
D) None of the above
ANSWER: A
What does `lastIndexOf(Object o)` do in a Vector?
A) Returns the index of the first occurrence of the specified element
B) Returns the index of the last occurrence of the specified element
C) Returns a boolean indicating if the element exists
D) None of the above
ANSWER: B
What does `list.contains(element)` method return?
A) The index of the element
B) True if the list contains the element
C) The element itself
D) The size of the list
ANSWER: B
What does `list.contains(Object o)` return?
A) The index of the object
B) True if the list contains the object
C) The object itself
D) The size of the list
ANSWER: B
What does `list.indexOf(element)` return if the element is not found in the ArrayList?
A) -1
B) 0
C) NullPointerException
D) IndexOutOfBoundsException
ANSWER: A
What does `list.isEmpty()` return?
A) True if the list is empty
B) False if the list is empty
C) The size of the list
D) Null if the list is empty
ANSWER: A
What does `list.stream().anyMatch(predicate)` do?
A) Checks if any elements of the list satisfy the given predicate
B) Checks if all elements of the list satisfy the given predicate
C) Checks if no elements of the list satisfy the given predicate
D) Counts the elements that satisfy the given predicate
ANSWER: A
What does `list.stream().distinct().count()` return?
A) Total number of distinct elements in the list
B) Total number of elements in the list
C) Total number of null elements in the list
D) It throws an exception
ANSWER: A
What does `list.stream().flatMap()` do?
A) Flattens nested lists into a single list
B) Maps each element to a Stream and flattens it
C) Transforms the list into a Stream of lists
D) Maps each element to a new type
ANSWER: B
What does `list.stream().sorted().collect(Collectors.toList())` return?
A) A new sorted list
B) The original list sorted
C) A set
D) An array
ANSWER: A
What does `list.subList(start, end).clear()` do?
A) Removes elements from start to end from the list
B) Clears the sublist but not the original list
C) UnsupportedOperationException
D) Clears the original list
ANSWER: A
What does `removeElementAt(int index)` do?
A) Removes the element at the specified index
B) Removes all elements from the specified index to the end
C) Removes all elements from the beginning to the specified index
D) None of the above
ANSWER: A
What does `retainAll()` do?
A) Retains only the elements that are contained in the specified collection
B) Removes all elements that are contained in the specified collection
C) Adds all elements that are not in the specified collection
D) Removes all elements that are not in the specified collection
ANSWER: A
What does `retainAll(Collection c)` do in a Vector?
A) Retains only the elements that are contained in the specified collection
B) Removes all elements that are contained in the specified collection
C) Adds all elements that are not in the specified collection
D) Removes all elements that are not in the specified collection
ANSWER: A
What does `subList(int fromIndex, int toIndex)` do in a Vector?
A) Creates a new Vector with elements from `fromIndex` to `toIndex`
B) Creates a view of the original Vector from `fromIndex` to `toIndex`
C) Removes elements from the original Vector from `fromIndex` to `toIndex`
D) None of the above
ANSWER: B
What does `synchronized` block lock on when used inside a static method?
A) The Class object
B) The current object (`this`)
C) A designated object
D) The method's arguments
ANSWER: A
What does `System.in` represent?
A) Standard output stream
B) Standard input stream
C) Error output stream
D) File input stream
ANSWER: B
What does `toArray(T[] a)` do?
A) Converts the Vector to an array of type T
B) Throws a ClassCastException
C) Converts the array to a Vector of type T
D) None of the above
ANSWER: A
What does 'escape analysis' in JIT compiler optimizations refer to?
A) Identifying loops in code
B) Identifying if an object can be stack allocated
C) Identifying unreachable code
D) None of the above
ANSWER: B
What does a `final` class prevent?
A) Instantiation
B) Inheritance
C) Overriding
D) Overloading
ANSWER: B
What does a `return` statement without any expression do in a non-void method?
A) Returns `null`
B) Causes a compilation error
C) Causes a runtime error
D) Returns the default value for the return type
ANSWER: B
What does a `void` method return?
A) `null`
B) Nothing
C) 0
D) An empty object
ANSWER: B
What does a constructor in Java do?
A) Creates an object
B) Initializes an object
C) Destroys an object
D) None of the above
ANSWER: B
What does a custom annotation typically contain?
A) Metadata
B) Implementation
C) Constants
D) All of the above
ANSWER: A
What does a Garbage Collection root include?
A) Local variables
B) Active threads
C) Static variables
D) All of the above
ANSWER: D
What does a heap dump provide?
A) CPU usage statistics
B) Snapshot of all objects in memory
C) Thread state
D) Disk usage statistics
ANSWER: B
What does a high frequency of GC collections usually indicate?
A) Optimal performance
B) High CPU usage
C) Memory leak
D) Disk I/O issues
ANSWER: C
What does a method signature consist of in Java?
A) Method name and return type
B) Method name and parameter types
C) Method name, return type, and parameter types
D) Method name only
ANSWER: B
What does a method's parameter list contain?
A) Only the types of parameters
B) Only the names of parameters
C) Both the types and names of parameters
D) The default values of parameters
ANSWER: C
What does an `if` statement do?
A) Executes code based on whether a condition is true or false
B) Iterates over elements in a data structure
C) Sorts elements in an array
D) Terminates the program
ANSWER: A
What does Collections.sort(list, Comparator.reverseOrder()) do?
A) Sorts the list in ascending order
B) Sorts the list in descending order
C) Reverses the list without sorting
D) Throws a compilation error
ANSWER: B
What does cross-compilation in Java allow you to do?
A) Compile code into different programming languages
B) Compile code to run on different operating systems
C) Compile code for different versions of Java
D) None of the above
ANSWER: C
What does encapsulation help to achieve?
A) Data integrity
B) Code flexibility
C) Easier inheritance
D) Both A and B
ANSWER: D
What does encapsulation improve?
A) Flexibility
B) Maintainability
C) Testability
D) All of the above
ANSWER: D
What does ensureCapacity() do?
A) Sets the size of the Vector
B) Increases the capacity of the Vector to a specified capacity
C) Decreases the capacity of the Vector to release memory
D) Checks if the Vector has enough capacity
ANSWER: B
What does escape analysis optimize?
A) CPU usage
B) Disk I/O
C) Memory allocation
D) Network latency
ANSWER: C
What does garbage collection aim to reclaim?
A) CPU cycles
B) Disk space
C) Heap memory
D) Network bandwidth
ANSWER: C
What does heap occupancy refer to?
A) Amount of memory used by stack
B) Amount of memory used by the heap
C) Amount of memory available on the disk
D) Amount of CPU usage
ANSWER: B
What does high heap occupancy after a full GC indicate?
A) Optimized CPU usage
B) Memory leak
C) Disk I/O issues
D) Network latency
ANSWER: B
What does JDK stand for?
A) Java Debugging Kit
B) Java Developer's Kit
C) Java Deployment Kit
D) Java Development Kit
ANSWER: D
What does JIT stand for?
A) Java Implementation Technology
B) Java In-Time
C) Just-In-Time
D) Java Intermediate Text
ANSWER: C
What does JNI `FindClass` function do?
A) Finds a class by name
B) Finds a method by name and signature
C) Finds a field by name and type
D) None of the above
ANSWER: A
What does JRE stand for?
A) Java Runtime Edition
B) Java Runtime Environment
C) Java Resource Editor
D) Java Render Engine
ANSWER: B
What does JStat primarily monitor?
A) CPU usage
B) Heap statistics
C) Thread statistics
D) Disk I/O
ANSWER: B
What does Just-In-Time (JIT) compilation refer to?
A) Compiling entire bytecode before execution
B) Compiling only the frequently-used bytecode
C) Translating bytecode to native code at run time
D) None of the above
ANSWER: C
What does JVisualVM primarily offer?
A) Performance Monitoring
B) Debugging
C) Code Editing
D) Compilation
ANSWER: A
What does LTS mean in the context of JDK versions?
A) Last To Support
B) Long Term Support
C) Latest Tested Stable
D) Limited Time Support
ANSWER: B
What does polymorphism allow you to do?
A) Treat objects of different classes in a similar manner
B) Change the behavior of a class at runtime
C) Both A and B
D) None of the above
ANSWER: C
What does Project Loom aim to simplify?
A) Concurrency
B) Graphics
C) Serialization
D) None of the above
ANSWER: A
What does setting the `-XX:MaxPermSize` do in Java 7 and above?
A) Sets the maximum permanent generation size
B) Sets the maximum metaspace size
C) Throws an error, as the flag is deprecated
D) No effect
ANSWER: C
What does Tenured Generation refer to?
A) Another name for Old Generation
B) Another name for Young Generation
C) A new memory space introduced in Java 11
D) None of the above
ANSWER: A
What does the `--release` flag do in the `javac` command?
A) Specifies the target Java version for the bytecode
B) Releases the compiled bytecode
C) Specifies the JDK version to compile against
D) None of the above
ANSWER: A
What does the `-g` flag do in the `javac` command?
A) Enables all debugging info
B) Enables garbage collection logging
C) Enables generation of optimized code
D) None of the above
ANSWER: A
What does the `-Xms` JVM flag specify?
A) Minimum heap size
B) Maximum heap size
C) Size of Young Generation
D) Size of Old Generation
ANSWER: A
What does the `-XX:+PrintGCDetails` flag enable?
A) Printing of heap dump information
B) Detailed garbage collection logs
C) Thread dump information
D) Application profiling data
ANSWER: B
What does the `-XX:+UseG1GC` JVM option do?
A) Enables the Serial garbage collector
B) Enables the Parallel garbage collector
C) Enables the G1 garbage collector
D) None of the above
ANSWER: C
What does the `-XX:+UseNUMA` flag do?
A) Enables Non-Uniform Memory Access
B) Sets the number of threads for garbage collection
C) Enables JMX monitoring
D) Enables heap compression
ANSWER: A
What does the `-XX:+UseZGC` flag enable?
A) Z Garbage Collector
B) G1 Garbage Collector
C) Serial Collector
D) Parallel Collector
ANSWER: A
What does the `-XX:CompileThreshold` option do in HotSpot?
A) Sets the heap size
B) Sets the number of interpreted method invocations before compilation
C) Sets the stack size
D) Sets the code cache size
ANSWER: B
What does the `-XX:ConcGCThreads` flag specify?
A) Number of GC threads
B) Number of concurrent GC threads
C) Number of user threads
D) Number of compiler threads
ANSWER: B
What does the `-XX:G1HeapRegionSize` flag control in the G1 Garbage Collector?
A) Heap size
B) Size of each region in the heap
C) Young generation size
D) Old generation size
ANSWER: B
What does the `-XX:MaxMetaspaceSize` flag do?
A) Sets maximum Old Generation size
B) Sets maximum Young Generation size
C) Sets maximum metaspace size
D) None of the above
ANSWER: C
What does the `-XX:MaxPermSize` option set?
A) Maximum size of the Young Generation
B) Maximum size of the Old Generation
C) Maximum size of the Permanent Generation
D) Maximum size of the Native Method Stack
ANSWER: C
What does the `@Autowired` annotation in Spring Framework do?
A) It makes a class singleton
B) It autowires the bean dependencies
C) It makes a class immutable
D) It makes a method synchronized
ANSWER: B
What does the `@Component` annotation do in Spring Framework?
A) Makes a class into a Spring bean
B) Indicates where to inject a dependency
C) Makes a method synchronized
D) None of the above
ANSWER: A
What does the `@Deprecated` annotation indicate?
A) The method is overridden
B) The method should not be used
C) The method is an initializer
D) None of the above
ANSWER: B
What does the `@Deprecated` annotation indicate?
A) The method is overridden
B) The method is outdated
C) The method is final
D) The method is abstract
ANSWER: B
What does the `@FunctionalInterface` annotation indicate?
A) The interface is final
B) The interface has exactly one abstract method
C) The interface is deprecated
D) The interface is serializable
ANSWER: B
What does the `@Inject` annotation do in dependency injection frameworks like Spring?
A) It replaces the `@Autowired` annotation
B) It makes a class into a Spring bean
C) It indicates where to inject a dependency
D) It marks a method as a test case
ANSWER: C
What does the `@Override` annotation do?
A) Indicates that a method overrides a superclass method
B) Makes the method abstract
C) Makes the method final
D) None of the above
ANSWER: A
What does the `@Override` annotation indicate?
A) The method will be overridden in the subclass
B) The method overrides a method in its superclass
C) The method can be optionally overridden
D) None of the above
ANSWER: B
What does the `@Override` annotation indicate?
A) The method is deprecated
B) The method is an initializer
C) The method overrides a method in the superclass
D) None of the above
ANSWER: C
What does the `@Override` annotation indicate?
A) The method is final
B) The method is static
C) The method overrides a method from a superclass
D) The method is abstract
ANSWER: C
What does the `@Primary` annotation do in Spring Framework?
A) Indicates the primary bean when multiple beans match a single dependency
B) Marks a bean as the primary component
C) Marks a method as the primary autowiring candidate
D) Both A and C
ANSWER: D
What does the `@Qualifier` annotation do in Spring Framework?
A) Indicates which of multiple beans to autowire
B) Creates a new bean
C) Makes a class into a Spring component
D) None of the above
ANSWER: A
What does the `@SafeVarargs` annotation do?
A) Suppresses unchecked warnings
B) Makes a variable thread-safe
C) Makes a variable immutable
D) None of the above
ANSWER: A
What does the `addElement(E obj)` method do in a Vector?
A) Adds an element at the beginning
B) Adds an element at the end
C) Adds an element at a specific index
D) Replaces an element at a specific index
ANSWER: B
What does the `capacity()` method return?
A) The current capacity of the Vector
B) The number of elements in the Vector
C) The maximum capacity of the Vector
D) The index of the last element in the Vector
ANSWER: A
What does the `class` keyword do in Java?
A) Defines a new class
B) Creates a new object
C) Defines a new method
D) Defines a new package
ANSWER: A
What does the `Class.forName()` method do?
A) Loads a class dynamically
B) Checks the compatibility of a class
C) Translates source code to bytecode
D) None of the above
ANSWER: A
What does the `copyInto(Object[] anArray)` method do?
A) Copies the elements into a new array
B) Copies the elements into the provided array
C) Clones the Vector into a new array
D) None of the above
ANSWER: B
What does the `CopyOnWriteArrayList` return for the `size()` method after an element has been removed?
A) The size before the removal
B) The size after the removal
C) The size of the internal array
D) None of the above
ANSWER: B
What does the `extends` keyword do in Java?
A) It creates a new class
B) It derives a new class from a base class
C) It imports a package
D) It overrides a method
ANSWER: B
What does the `final` keyword do when applied to a class?
A) Makes the class immutable
B) Prevents the class from being subclassed
C) Makes the class abstract
D) None of the above
ANSWER: B
What does the `final` keyword do when applied to a method?
A) Makes it static
B) Prevents it from being overridden
C) Makes it abstract
D) None of the above
ANSWER: B
What does the `final` keyword do when applied to a variable?
A) Makes the variable immutable
B) Makes the variable mutable
C) Makes the variable static
D) None of the above
ANSWER: A
What does the `final` keyword do when applied to a variable?
A) Makes it immutable
B) Makes it static
C) Makes it abstract
D) Makes it transient
ANSWER: A
What does the `finalize()` method do?
A) It is a destructor
B) It performs object cleanup
C) It is invoked by the garbage collector
D) All of the above
ANSWER: D
What does the `getClass()` method return?
A) The name of the object's class
B) The Class object that represents the object's class
C) The hashcode of the object
D) The superclass of the object's class
ANSWER: B
What does the `instanceof` operator do?
A) Compares two object references
B) Checks if an object is an instance of a particular type
C) Checks if two objects are equal
D) Checks if an object is null
ANSWER: B
What does the `instanceof` operator do?
A) Checks if an object is an instance of a particular class
B) Checks if a class is a subclass of another class
C) Checks if an object is null
D) Checks if an object is empty
ANSWER: A
What does the `java` command do?
A) Compile Java source files
B) Execute Java bytecode
C) Generate documentation
D) Initialize the JVM
ANSWER: B
What does the `java` command require as an argument?
A) Source Code filename
B) Bytecode filename without the `.class` extension
C) Java Archive
D) Any of the above
ANSWER: B
What does the `JAVA_HOME` environment variable specify?
A) The location of the JRE
B) The location of the JDK
C) The Java classpath
D) None of the above
ANSWER: B
What does the `javac` command do?
A) It runs Java bytecode
B) It compiles Java source code into bytecode
C) It checks Java syntax without compiling
D) It creates Java documentation
ANSWER: B
What does the `jvisualvm` tool in JDK do?
A) Memory profiling
B) Thread analysis
C) Both A and B
D) Java code compilation
ANSWER: C
What does the `list.set(int index, E element)` method return?
A) void
B) The old element at the specified index
C) The new element
D) Boolean indicating success or failure
ANSWER: B
What does the `list.size()` method return?
A) The capacity of the list
B) The number of elements in the list
C) The index of the last element
D) The memory usage of the list
ANSWER: B
What does the `new` keyword do in Java?
A) Creates a new variable
B) Creates a new object
C) Creates a new method
D) Creates a new package
ANSWER: B
What does the `package-private` access modifier do?
A) Allows access within the same package only
B) Allows access from any class
C) Restricts access to the same class only
D) Allows access within the same package and all subclasses
ANSWER: A
What does the `private` access modifier do?
A) Allows access from any class
B) Restricts access to the same class only
C) Allows access within the same package
D) Allows access within the same package and subclasses
ANSWER: B
What does the `protected` access modifier allow?
A) Access from any class
B) Access only within the same class
C) Access within the same package and subclasses
D) Access only within the same package
ANSWER: C
What does the `protected` access modifier allow?
A) Access within the same class only
B) Access within the same package and subclasses
C) Access within the same package only
D) Unrestricted access
ANSWER: B
What does the `protected` access modifier do?
A) Allows access within the same package and all subclasses
B) Allows access within the same package only
C) Allows access from any class
D) Restricts access to the same class only
ANSWER: A
What does the `public` access modifier allow?
A) Access only within the same class
B) Access only within the same package
C) Unrestricted access
D) Access only within the same package and subclasses
ANSWER: C
What does the `public` access modifier do?
A) Restricts access to the same class only
B) Allows access within the same package only
C) Allows access within the same package and all subclasses
D) Allows access from any class
ANSWER: D
What does the `Scanner.useDelimiter()` method do?
A) Sets the Scanner's locale
B) Sets the input source for this scanner
C) Sets this scanner's delimiting pattern
D) None of the above
ANSWER: C
What does the `set()` method return in an ArrayList?
A) void
B) The old element at the specified position
C) The new element
D) Boolean value indicating success or failure
ANSWER: B
What does the `size()` method return?
A) The current capacity of the Vector
B) The number of elements in the Vector
C) The maximum capacity of the Vector
D) The index of the last element in the Vector
ANSWER: B
What does the `static` keyword do when applied to a variable?
A) Makes the variable constant
B) Makes the variable class-level
C) Makes the variable instance-level
D) None of the above
ANSWER: B
What does the `super` keyword do in a subclass method?
A) Calls the superclass's constructor
B) Calls the superclass's method
C) Calls the subclass's method
D) Calls the subclass's constructor
ANSWER: B
What does the `super` keyword do in the context of inheritance?
A) It refers to the immediate parent class instance
B) It refers to the immediate subclass instance
C) It refers to the current class instance
D) None of the above
ANSWER: A
What does the `super` keyword do inside a constructor?
A) Calls the default constructor of the subclass
B) Calls the default constructor of the superclass
C) Calls a specific constructor of the superclass
D) Both B and C
ANSWER: D
What does the `super` keyword refer to inside a subclass method?
A) The superclass
B) The subclass
C) The current method
D) The current object
ANSWER: A
What does the `synchronized` keyword in Java do?
A) Makes a method or block thread-safe
B) Makes the code execute faster
C) Synchronizes data between threads
D) None of the above
ANSWER: A
What does the `this` keyword refer to in a Java class?
A) Current object
B) Current method
C) Current class
D) Current package
ANSWER: A
What does the `this` keyword refer to inside an instance method?
A) The current class
B) The current method
C) The current object
D) The current package
ANSWER: C
What does the `this` keyword refer to?
A) The current method
B) The current class
C) The current object
D) The current package
ANSWER: C
What does the `this()` call in a constructor do?
A) Calls another constructor in the same class
B) Calls the superclass constructor
C) Calls the constructor of an interface
D) Calls itself recursively
ANSWER: A
What does the `Thread.yield()` method do?
A) Pauses the currently executing thread
B) Gives a hint to the scheduler that the current thread is willing to yield its current use of a processor
C) Stops the thread
D) Causes the thread to sleep
ANSWER: B
What does the `trimToSize()` method do?
A) Reduces the size of the Vector to the number of elements it contains
B) Removes null elements
C) Sorts the Vector
D) None of the above
ANSWER: A
What does the `void` keyword in a method signature indicate?
A) The method returns no value
B) The method returns a null value
C) The method is abstract
D) The method is final
ANSWER: A
What does the -Xmx JVM flag specify?
A) Minimum heap size
B) Maximum heap size
C) Stack size
D) None of the above
ANSWER: B
What does the -Xmx JVM option specify?
A) Initial heap size
B) Maximum heap size
C) Stack size
D) Native method stack size
ANSWER: B
What does the -XX:+PrintCompilation JVM flag do?
A) Prints a compilation plan
B) Prints the bytecode
C) Prints the methods being JIT-compiled
D) None of the above
ANSWER: C
What does the 'Eden Space' in JVM's memory model refer to?
A) Area where objects are initially created
B) Area where long-lived objects reside
C) Area where class metadata is stored
D) None of the above
ANSWER: A
What does the 'Eden' space represent in heap memory?
A) Area where new objects are created
B) Area where long-living objects are moved
C) Area for method execution
D) None of the above
ANSWER: A
What does the 'Inspect Code' feature primarily do in an IDE?
A) Checks for syntax errors
B) Checks for performance issues
C) Checks for code quality and possible bugs
D) Checks for compilation errors
ANSWER: C
What does the 'java.lang.Object' method 'clone()' do?
A) Creates a copy of the object in stack
B) Creates a copy of the object in heap
C) Creates a reference to the object in heap
D) None of the above
ANSWER: B
What does the 'javap' tool provide?
A) Decompiles a .class file to view its bytecode
B) Profile performance of a Java application
C) Package Java files into a .jar
D) None of the above
ANSWER: A
What does the 'loadClass()' method return?
A) Bytecode
B) An object of the class
C) A Class object
D) Null
ANSWER: C
What does the 'Resolution' phase in class loading accomplish?
A) Checking for bytecode validity
B) Replacing symbolic references with direct references
C) Assigning values to static variables
D) None of the above
ANSWER: B
What does the 'this' keyword do inside a constructor?
A) Refers to the object being constructed
B) Refers to another constructor in the same class
C) Refers to the superclass constructor
D) None of the above
ANSWER: A
What does the 'this' keyword refer to?
A) The current class
B) The current object
C) The current method
D) The current package
ANSWER: B
What does the 'Watch Expressions' feature do in IDE debugging?
A) Monitors variable values in real-time during debugging
B) Sets breakpoints when an expression evaluates to true
C) Automatically updates variable values
D) All of the above
ANSWER: A
What does the @Override annotation do?
A) Ensures that the method is being overridden correctly
B) Makes the method final
C) Makes the method static
D) None of the above
ANSWER: A
What does the acronym WORA stand for in the context of Java?
A) Write Once, Run Anywhere
B) Web Oriented Runtime Architecture
C) Windows Operating Runtime Adjustment
D) None of the above
ANSWER: A
What does the acronym WORA stand for in the context of Java?
A) Write Once Run Anywhere
B) With Object Reference Architecture
C) Web Oriented Running Application
D) Write Object Return Anywhere
ANSWER: A
What does the Bootstrap class loader primarily load?
A) Java standard library classes
B) User-defined classes
C) Third-party libraries
D) None of the above
ANSWER: A
What does the Builder Pattern allow you to do?
A) Construct an object step-by-step
B) Create single instances of an object
C) Create multiple instances of an object
D) None of the above
ANSWER: A
What does the bytecode verification process ensure?
A) Bytecode efficiency
B) Bytecode legality
C) Bytecode optimization
D) Bytecode encryption
ANSWER: B
What does the capacityIncrement parameter in Vector constructor specify?
A) The initial capacity of the Vector
B) The increment in capacity when Vector is full
C) The maximum capacity of the Vector
D) The decrement in capacity when elements are removed
ANSWER: B
What does the class initialization phase involve?
A) Verifying bytecode
B) Allocating memory for class variables
C) Executing static blocks
D) Loading the class into memory
ANSWER: C
What does the ClassLoader subsystem do during the 'Verification' phase?
A) Bytecode verification
B) Memory allocation
C) Loading the class into method area
D) Resolving symbolic references
ANSWER: A
What does the Copying algorithm primarily do?
A) Compacts memory
B) Frees up memory
C) Duplicates objects
D) Moves objects
ANSWER: D
What does the Execution Engine use to execute bytecode?
A) Just-In-Time Compiler
B) Interpreter
C) Both A and B
D) None of the above
ANSWER: C
What does the Extension class loader primarily load?
A) Core Java classes
B) Extensions to the standard libraries
C) User-defined classes
D) None of the above
ANSWER: B
What does the Factory pattern help to achieve?
A) Code reusability
B) Loose coupling
C) Data encapsulation
D) Data hiding
ANSWER: B
What does the following method declaration mean? `public int[] getValues()`
A) The method takes an array of integers as parameter and returns an integer
B) The method takes an integer as parameter and returns an array of integers
C) The method takes no parameters and returns an array of integers
D) The method takes an array of integers as parameter and returns an array of integers
ANSWER: C
What does the Full GC event do?
A) Cleans only the Young Generation
B) Cleans only the Old Generation
C) Cleans both Young and Old Generations
D) Does not clean any generation
ANSWER: C
What does the G1 Garbage Collector aim to provide?
A) Lower latency
B) Higher throughput
C) More scalability
D) None of the above
ANSWER: A
What does the Heap Area primarily contain?
A) Class definitions
B) Local variables
C) Objects
D) Native methods
ANSWER: C
What does the HotSpot `-XX:+AggressiveOpts` flag enable?
A) Enables debugging
B) Enables optimization techniques
C) Enables verbose logging
D) Enables bytecode verification
ANSWER: B
What does the Iterator's `next()` method return if there are no more elements?
A) null
B) Throws NoSuchElementException
C) The last element
D) An empty object
ANSWER: B
What does the Java Virtual Machine (JVM) begin executing first?
A) The `finalize()` method
B) Bytecode
C) The `main()` method
D) Native machine code
ANSWER: C
What does the Java Virtual Machine (JVM) do?
A) Converts source code to bytecode
B) Executes compiled Java code
C) Directly executes source code
D) Translates Java to native machine code
ANSWER: B
What does the Just-In-Time Compiler (JIT) do?
A) Translates source code to bytecode
B) Translates bytecode to native machine code
C) Manages memory allocation
D) Verifies bytecode
ANSWER: B
What does the JVM flag `-Xmx` specify?
A) Initial heap size
B) Maximum heap size
C) Garbage collection type
D) None of the above
ANSWER: B
What does the JVM flag `-XX:+UseG1GC` enable?
A) Serial Garbage Collector
B) G1 Garbage Collector
C) Parallel Garbage Collector
D) CMS (Concurrent Mark-Sweep)
ANSWER: B
What does the JVM flag -XX:+UseConcMarkSweepGC do?
A) Enables G1 GC
B) Enables CMS GC
C) Enables Parallel GC
D) Enables Serial GC
ANSWER: B
What does the JVM option `-Xms` define?
A) Initial heap size
B) Maximum heap size
C) Garbage collection type
D) None of the above
ANSWER: A
What does the JVM option `-Xss` control?
A) Initial heap size
B) Stack size
C) Old generation size
D) Young generation size
ANSWER: B
What does the JVM option `-XX:MaxPermSize` specify?
A) The maximum size of the heap
B) The maximum size of the method area
C) The maximum size of the permanent generation
D) None of the above
ANSWER: C
What does the List interface extend in Java's Collection framework?
A) Set
B) Collection
C) Map
D) Queue
ANSWER: B
What does the object header in the JVM typically contain?
A) Object's hash code
B) Class type information
C) Garbage collection metadata
D) All of the above
ANSWER: D
What does the Resolution sub-phase of Linking do?
A) Verifies bytecode
B) Replaces symbolic references with actual references
C) Allocates memory for static variables
D) Initializes static variables
ANSWER: B
What does the term 'JVM' stand for?
A) Java Virtual Memory
B) Java Variable Manager
C) Java Virtual Machine
D) Java Vector Model
ANSWER: C
What does the term 'warm-up time' refer to in the context of JIT?
A) The time it takes for JIT to start up
B) The time it takes for the compiled code to become optimized
C) The time it takes for the JVM to load classes
D) None of the above
ANSWER: B
What does the Young Generation contain?
A) Eden Space and Survivor Spaces
B) Old Generation and PermGen
C) Method Area and Native Stack
D) None of the above
ANSWER: A
What does the ZGC algorithm aim to eliminate?
A) Pause times
B) CPU usage
C) Memory usage
D) Thread contention
ANSWER: A
What does tiered compilation in JIT enable?
A) Better memory usage
B) Lower CPU usage
C) Faster startup and higher throughput
D) Garbage collection optimization
ANSWER: C
What does Vector.elementAt(int index) return?
A) The element at the specified index
B) The index of the specified element
C) A new Vector containing the element at the specified index
D) None of the above
ANSWER: A
What environment variable is often required to run Java programs from the command line?
A) CLASSPATH
B) JAVA_HOME
C) PATH
D) JRE_HOME
ANSWER: C
What exception does `BufferedReader.readLine()` throw?
A) InputMismatchException
B) IOException
C) EOFException
D) NoException
ANSWER: B
What exception does `Collections.sort()` throw if elements of Vector are not mutually comparable?
A) NullPointerException
B) ClassCastException
C) IllegalArgumentException
D) UnsupportedOperationException
ANSWER: B
What exception does `list.get(index)` throw if the index is out of bounds?
A) NullPointerException
B) IndexOutOfBoundsException
C) ArrayIndexOutOfBoundsException
D) IllegalArgumentException
ANSWER: B
What exception does Iterator's `remove()` method throw if called before `next()`?
A) UnsupportedOperationException
B) NoSuchElementException
C) IllegalStateException
D) NullPointerException
ANSWER: C
What exception is thrown when trying to access an element at an invalid index in a Vector?
A) NullPointerException
B) NoSuchElementException
C) ArrayIndexOutOfBoundsException
D) IndexOutOfBoundsException
ANSWER: D
What exception will be thrown if you try to access an element at an invalid index in a List?
A) NullPointerException
B) IndexOutOfBoundsException
C) IllegalArgumentException
D) ArrayIndexOutOfBoundsException
ANSWER: B
What feature does JVisualVM NOT provide?
A) Thread Analysis
B) CPU Profiling
C) Code Compilation
D) Heap Dump Analysis
ANSWER: C
What happened to JavaFX post-acquisition?
A) Discontinued
B) Became open source
C) Became a separate product
D) Became part of Oracle ADF
ANSWER: B
What happened to OpenOffice.org after Oracle's acquisition of Sun?
A) Discontinued
B) Became Oracle Office
C) Forked into LibreOffice
D) Became a paid service
ANSWER: C
What happens during a Full GC cycle?
A) Only Young Generation is cleaned
B) Only Old Generation is cleaned
C) Both Young and Old Generations are cleaned
D) Entire heap including metaspace is cleaned
ANSWER: C
What happens if `subList` is called with start index greater than end index?
A) Returns an empty list
B) IllegalArgumentException
C) IndexOutOfBoundsException
D) Reverses the list between start and end index
ANSWER: B
What happens if a class fails the verification process?
A) The class is loaded but not executed
B) The class is executed with warnings
C) An error is thrown
D) None of the above
ANSWER: C
What happens if a class has a parameterized constructor but no default constructor?
A) The compiler automatically provides a default constructor
B) Objects can only be created using the parameterized constructor
C) Compilation Error
D) None of the above
ANSWER: B
What happens if a method annotated with `@Override` does not actually override a method from its superclass?
A) Compilation Error
B) Runtime Error
C) Logical Error
D) No Error
ANSWER: A
What happens if a parent class loader can't load a class?
A) The child class loader attempts to load it
B) An exception is thrown immediately
C) The class is skipped
D) The JVM terminates
ANSWER: A
What happens if a subclass constructor cannot catch an exception thrown by its superclass constructor?
A) The subclass must also declare the exception using throws
B) A compilation error will occur
C) The program will run but produce unexpected results
D) None of the above
ANSWER: A
What happens if a Vector is used in a multi-threaded environment without synchronization?
A) Deadlock
B) Data corruption
C) No issues, Vector is thread-safe
D) Slower performance
ANSWER: C
What happens if multiple threads try to modify a Vector simultaneously?
A) Deadlock occurs
B) Vector takes care of synchronization
C) Data corruption occurs
D) First thread is processed, others are ignored
ANSWER: B
What happens if the condition in an `if` statement is false?
A) The code within the `if` block is still executed
B) The code within the `if` block is skipped
C) The program terminates
D) A runtime error occurs
ANSWER: B
What happens if we put a `break` statement outside any loop or switch statement?
A) It breaks the nearest loop
B) It breaks the entire program
C) Compilation Error
D) None of the above
ANSWER: C
What happens if you add a null element to an ArrayList?
A) NullPointerException
B) Compilation Error
C) The element is added successfully
D) IndexOutOfBoundsException
ANSWER: C
What happens if you call `remove()` twice consecutively without a `next()` in between, on an Iterator?
A) Removes the last two elements
B) Removes the last element twice
C) Throws IllegalStateException
D) Compilation Error
ANSWER: C
What happens if you do not define any constructor in a Java class?
A) Compilation error
B) The Java compiler provides a default constructor
C) The object cannot be instantiated
D) Runtime error
ANSWER: B
What happens if you don't define any constructor in a class?
A) Compilation error
B) Runtime error
C) A default constructor is provided by the compiler
D) The class cannot be instantiated
ANSWER: C
What happens if you don't initialize a static variable?
A) Compilation Error
B) It gets a default value
C) Runtime Error
D) It remains undefined
ANSWER: B
What happens if you forget to close the curly brace of an `if` statement in languages like C++ or Java?
A) The program will execute successfully
B) A compilation error will occur
C) Only the `if` block will execute, the rest of the program won't
D) The program will crash
ANSWER: B
What happens if you modify a List while iterating through it using an Iterator?
A) Compilation error
B) The Iterator adjusts to the changes
C) Throws ConcurrentModificationException
D) Undefined behavior
ANSWER: C
What happens if you modify a Vector while iterating over its sublist view?
A) Throws a ConcurrentModificationException
B) The sublist view gets updated automatically
C) The sublist view becomes invalid
D) The original Vector becomes invalid
ANSWER: A
What happens if you pass a primitive type to a method and modify it?
A) The original value will change
B) The original value will remain the same
C) A new copy of the variable will be created
D) None of the above
ANSWER: B
What happens if you perform a write operation on an unmodifiable Vector?
A) No operation is performed
B) Throws an UnsupportedOperationException
C) The operation is silently ignored
D) The Vector becomes modifiable
ANSWER: B
What happens if you try to access an index out of range using `subList(int fromIndex, int toIndex)`?
A) Returns an empty list
B) Throws an IndexOutOfBoundsException
C) Returns null
D) Ignores the out-of-range index
ANSWER: B
What happens if you try to add an element at a negative index in a List?
A) Adds the element at the beginning
B) IndexOutOfBoundsException
C) Adds the element at the end
D) IllegalArgumentException
ANSWER: B
What happens if you try to execute a Java program without compiling it first?
A) It will run but with errors
B) It will run correctly
C) It won't run
D) It will be automatically compiled and run
ANSWER: C
What happens if you try to insert an element at an index greater than the current size of the Vector?
A) Throws an IndexOutOfBoundsException
B) The element is added at the end
C) The element is not added
D) The Vector is resized to fit the element at the specified index
ANSWER: A
What happens if you try to instantiate a class with a private constructor from outside the class?
A) Compilation Error
B) A runtime error occurs
C) The object will still be created
D) None of the above
ANSWER: A
What happens if you try to override a static method?
A) Compilation Error
B) The method gets overridden
C) A new static method is created in the subclass
D) Runtime Error
ANSWER: C
What happens if you try to sort a Vector containing elements of different data types?
A) Sorts successfully
B) Throws a ClassCastException
C) Sorts based on the toString() method
D) Throws an IllegalArgumentException
ANSWER: B
What happens if you try to sort a Vector containing null values?
A) Throws a NullPointerException
B) Null values are moved to the end
C) Null values are moved to the beginning
D) Throws an IllegalArgumentException
ANSWER: A
What happens if you try to store a decimal value in an int variable without type casting?
A) Compilation Error
B) Rounds to the nearest integer
C) Truncates the decimal part
D) Stores as is
ANSWER: A
What happens if you try to store a value larger than the maximum limit in a `byte` variable?
A) Compilation error
B) Runtime error
C) Loops back to the minimum value
D) Truncation
ANSWER: A
What happens in the Verification sub-phase of Linking?
A) Checks bytecode integrity
B) Checks access permissions
C) Both A and B
D) None of the above
ANSWER: C
What happens to an object that survives multiple garbage collection cycles in the Young Generation?
A) It is deallocated
B) It is promoted to Old Generation
C) It stays in the Young Generation
D) It triggers a full GC cycle
ANSWER: B
What happens to the code inside comments during compilation?
A) Gets compiled to bytecode
B) Gets removed
C) Gets stored for debugging
D) Gets encrypted
ANSWER: B
What happens to the original Vector if you modify its sublist view?
A) Original Vector remains unaffected
B) Changes reflect in the original Vector
C) A new Vector is created
D) Throws an UnsupportedOperationException
ANSWER: B
What happens to unreachable objects in the JVM?
A) They are garbage collected
B) They are moved to PermGen
C) They are cached for future use
D) None of the above
ANSWER: A
What happens when a class fails the bytecode verification process?
A) The class is loaded but not executed
B) The class is executed with a warning
C) The class is not loaded and an exception is thrown
D) The JVM terminates
ANSWER: C
What happens when a recursive method doesn't have a base case?
A) Compilation Error
B) Stack Overflow Error
C) Syntax Error
D) Logical Error
ANSWER: B
What happens when a Vector reaches its maximum capacity?
A) It throws an exception
B) It increases its capacity by capacityIncrement
C) It remains full and rejects new elements
D) It doubles its capacity
ANSWER: B
What happens when an assertion fails?
A) The program continues execution
B) An AssertionError is thrown
C) Compilation Error
D) None of the above
ANSWER: B
What happens when garbage collection occurs in Young Generation?
A) Objects are moved to Old Generation
B) Objects are freed from memory
C) Both A and B
D) None of the above
ANSWER: C
What happens when you call `next()` method of an Iterator without calling `hasNext()`?
A) Compilation Error
B) Logic Error
C) No operation
D) Proceeds to next element if exists, else throws NoSuchElementException
ANSWER: D
What happens when you call `nextInt()` but input a non-integer value?
A) Compilation Error
B) Returns 0
C) Throws InputMismatchException
D) Returns null
ANSWER: C
What happens when you invoke a method on an object?
A) The method gets copied to the object
B) A new method is created in the object
C) The method is executed in the context of the object
D) None of the above
ANSWER: C
What happens when you pass an integer argument to an overloaded method that has both int and double type parameters?
A) Calls the method with int parameter
B) Calls the method with double parameter
C) Causes a compilation error
D) Causes a runtime error
ANSWER: A
What happens when you try to access a `private` instance variable from a subclass?
A) Compilation Error
B) Runtime Error
C) The variable is accessed successfully
D) None of the above
ANSWER: A
What happens when you try to add an element to a CopyOnWriteArrayList while iterating over it?
A) ConcurrentModificationException
B) The iterator reflects the changes
C) No effect on the iterator
D) UnsupportedOperationException
ANSWER: C
What happens when you try to add an element to a List at a negative index?
A) The element is added at the beginning
B) IndexOutOfBoundsException
C) IllegalArgumentException
D) The element is ignored
ANSWER: B
What happens when you try to explicitly cast incompatible object types?
A) Compilation Error
B) Runtime Exception
C) Logical Error
D) None of the above
ANSWER: B
What happens when you try to override a `private` method in a subclass?
A) Compilation error
B) Runtime error
C) The method gets hidden, not overridden
D) None of the above
ANSWER: C
What happens when you try to remove an element from an empty LinkedList?
A) Compilation Error
B) Runtime Error
C) Returns null
D) Throws NoSuchElementException
ANSWER: D
What happens when you try to set an element at an index that does not exist in the ArrayList?
A) A new element is added at that index
B) IndexOutOfBoundsException is thrown
C) NullPointerException is thrown
D) The operation is ignored
ANSWER: B
What happens when you try to store a larger value than the max limit in a byte variable?
A) Compilation Error
B) Runtime Error
C) Loops back to the minimum value
D) Truncation
ANSWER: A
What impact did the acquisition have on community contributions to Java?
A) Increased
B) Decreased
C) No impact
D) Became more restricted
ANSWER: D
What information does JConsole provide?
A) Heap dump
B) Thread stack traces
C) Real-time monitoring data
D) Bytecode analysis
ANSWER: C
What information is not typically included in an object header?
A) Lock information
B) Object age
C) Array size
D) Padding
ANSWER: D
What interface do you need to implement for custom sorting using Collections.sort()?
A) Sortable
B) Comparable
C) Comparator
D) Orderable
ANSWER: C
What interface should a custom comparator class implement for sorting a Vector?
A) Comparable
B) Comparator
C) Serializable
D) Cloneable
ANSWER: B
What is `JNIEnv` in the context of JNI?
A) A native interface pointer
B) A Java object
C) A native method signature
D) None of the above
ANSWER: A
What is `jshell` used for?
A) Java shell for executing standalone Java code
B) Shell scripting in Java
C) Encrypting Java code
D) Java debugging
ANSWER: A
What is `ResourceBundle` primarily used for?
A) File Handling
B) Internationalization
C) Encryption
D) Memory Management
ANSWER: B
What is 'autoboxing' in Java?
A) Automatic conversion from primitive types to wrapper classes
B) Conversion of lowercase to uppercase
C) Automatic Garbage Collection
D) Dynamic method dispatch
ANSWER: A
What is 'JIT' compilation in Java?
A) Just In Time Compilation
B) Java Inbuilt Transfer
C) Java Instruction Table
D) Just In Transfer
ANSWER: A
What is 'reflection' in Java?
A) Mirror image of code
B) Object duplication
C) Introspecting the properties of a class at runtime
D) Code optimization technique
ANSWER: C
What is a .class file mainly composed of?
A) Source code
B) Native machine code
C) Bytecode
D) None of the above
ANSWER: C
What is a 'Snapshot' dependency in Maven?
A) A stable release
B) A dynamic version that gets updated automatically
C) An outdated version
D) None of the above
ANSWER: B
What is a bounded type in Generics?
A) A type that extends another type
B) A type that implements an interface
C) A type that restricts the types that can be used as arguments
D) A type that can be used in any generic class or method
ANSWER: C
What is a common anti-pattern that increases the impact of GC?
A) Excessive use of immutable objects
B) Pooling of objects
C) Frequent short-lived object creation
D) Singleton pattern
ANSWER: C
What is a common area of research in garbage collection algorithms?
A) Making them AI-driven
B) Reducing their CPU footprint
C) Making them fully automated
D) All of the above
ANSWER: D
What is a common method for identifying memory leaks in large-scale applications?
A) Manual code review
B) System logs
C) Advanced memory profiling tools
D) Runtime exceptions
ANSWER: C
What is a common symptom of a memory leak in a Java application?
A) High CPU usage
B) Constantly increasing memory consumption
C) High disk I/O
D) None of the above
ANSWER: B
What is a constructor in Java?
A) A method that initializes an object
B) A data member of a class
C) A return type of a method
D) An interface in a class
ANSWER: A
What is a control structure in programming?
A) A data storage format
B) A mechanism to control the flow of program execution
C) A way to design user interfaces
D) A mathematical operator
ANSWER: B
What is a copy constructor in Java?
A) A constructor that initializes an object using values from an existing object
B) A constructor that copies the class definition
C) A constructor that duplicates the object reference
D) None of the above
ANSWER: A
What is a default constructor?
A) A constructor with parameters
B) A constructor provided by the user
C) A no-argument constructor provided by the compiler if no other constructors are defined
D) A constructor that is marked with the `default` keyword
ANSWER: C
What is a downside of using the Parallel Collector?
A) High CPU Usage
B) Latency
C) Fragmentation
D) Memory Overhead
ANSWER: B
What is a Full GC?
A) GC that only collects Young Generation
B) GC that collects both Young and Old Generation
C) GC that collects only Old Generation
D) GC that collects metaspace
ANSWER: B
What is a limitation of using SonarQube?
A) Cannot detect logical errors
B) Cannot detect syntax errors
C) Cannot detect vulnerabilities
D) None of the above
ANSWER: A
What is a method reference in Java?
A) A way to pass a method as an argument
B) A shorthand notation for writing lambda expressions
C) A way to return a method from another method
D) A way to store methods in variables
ANSWER: B
What is a nested `if` statement?
A) An `if` statement within another `if` statement
B) Two `if` statements next to each other
C) An `if` statement that contains a loop
D) An `if` statement that includes function calls
ANSWER: A
What is a non-static inner class also known as?
A) Nested class
B) Member inner class
C) Local inner class
D) Anonymous inner class
ANSWER: B
What is a non-static inner class?
A) A nested class that can be instantiated without an object of the outer class
B) A nested class that can only be instantiated within an object of the outer class
C) A nested class that can't be instantiated
D) None of the above
ANSWER: B
What is a parameterized constructor?
A) A constructor that takes no arguments
B) A constructor that takes at least one argument
C) A constructor that is generated automatically by the compiler
D) None of the above
ANSWER: B
What is a recommended best practice to minimize GC impact?
A) Use smaller data structures
B) Object pooling
C) Minimize use of finalizers
D) All of the above
ANSWER: D
What is a static method in Java?
A) A method that belongs to an instance of a class
B) A method that belongs to the class rather than any particular object instance
C) A method that cannot be overridden
D) A method that cannot change the state of an object
ANSWER: B
What is a static nested class?
A) A nested class that can be instantiated without an object of the outer class
B) A nested class that can't be instantiated
C) A nested class that can only be instantiated within the outer class
D) None of the above
ANSWER: A
What is a Vector in Java?
A) A resizable array
B) A fixed-size array
C) A key-value pair
D) A linked list
ANSWER: A
What is a wrapper class?
A) A class that wraps primitive data types
B) A class that wraps object data types
C) A class used for error handling
D) A class that wraps interface types
ANSWER: A
What is an abstract class in Java?
A) A class that cannot be instantiated
B) A class that must be inherited
C) A class that has at least one abstract method
D) All of the above
ANSWER: D
What is an abstract method?
A) A method with no implementation
B) A method that must be private
C) A method that must be static
D) A method that must be final
ANSWER: A
What is an anti-pattern that can result in a memory leak?
A) Singleton pattern
B) Object pooling
C) Using static collections without clean-up
D) Using immutable objects
ANSWER: C
What is an Enum type in Java?
A) A special kind of class
B) A special kind of interface
C) A special kind of array
D) A special kind of method
ANSWER: A
What is an OutOfMemoryError?
A) Lack of stack space
B) Lack of heap space
C) Both A and B
D) None of the above
ANSWER: C
What is autoboxing?
A) Automatic conversion of primitive types to reference types
B) Automatic conversion of reference types to primitive types
C) A feature that boxes code for security
D) None of the above
ANSWER: A
What is code refactoring primarily used for?
A) Fixing bugs
B) Improving code readability and maintainability
C) Adding new features
D) Enhancing performance
ANSWER: B
What is common among all reference data types?
A) They all are mutable
B) They all extend the Object class
C) They all implement Serializable
D) They all are thread-safe
ANSWER: B
What is compile-time polymorphism also known as?
A) Method Overriding
B) Method Overloading
C) Dynamic Method Dispatch
D) None of the above
ANSWER: B
What is constructor overloading?
A) Having multiple constructors with the same name and different parameters
B) Having multiple constructors with different names
C) Having a constructor with multiple return types
D) None of the above
ANSWER: A
What is constructor overloading?
A) Defining multiple constructors with different return types
B) Defining multiple constructors with different numbers or types of parameters
C) Defining the same constructor multiple times in a class
D) None of the above
ANSWER: B
What is deep copy in the context of a copy constructor?
A) Copying only the primitive types
B) Copying the object references only
C) Creating entirely separate copies of objects for any object references
D) Copying the memory location of the object being copied
ANSWER: C
What is dynamic method dispatch?
A) Calling an overridden method through a superclass reference at runtime
B) Loading classes dynamically
C) Overloading methods dynamically
D) None of the above
ANSWER: A
What is explicit type casting in Java?
A) Converting a larger data type to a smaller one
B) Converting a smaller data type to a larger one
C) Converting a primitive type to an object
D) Converting an object to a primitive type
ANSWER: A
What is Full GC?
A) Cleaning only the Young Generation
B) Cleaning only the Old Generation
C) Cleaning both Young and Old Generations
D) Cleaning the entire heap and method area
ANSWER: C
What is implicit type casting in Java?
A) Converting a larger data type to a smaller one
B) Converting a smaller data type to a larger one
C) Converting a primitive type to an object
D) Converting an object to a primitive type
ANSWER: B
What is Javadoc primarily used for?
A) Code Compilation
B) Code Debugging
C) API Documentation
D) Code Versioning
ANSWER: C
What is JVM responsible for?
A) Source Code Compilation
B) Code Execution
C) Both A and B
D) None of the above
ANSWER: B
What is method invocation in Java?
A) Declaring a method
B) Calling a method
C) Overloading a method
D) Overriding a method
ANSWER: B
What is method overloading in Java?
A) Having multiple methods with the same name but different parameters
B) Having multiple methods with the same name and same parameters
C) Changing the behavior of a method in a subclass
D) Having a method call itself
ANSWER: A
What is method overloading?
A) Changing the behavior of a superclass method in a subclass
B) Having multiple methods with the same name but different parameters
C) Calling a superclass method from a subclass
D) None of the above
ANSWER: B
What is method overloading?
A) Methods with the same name but different parameters in the same class
B) Methods with the same name and parameters in different classes
C) Methods with different names but the same parameters in the same class
D) None of the above
ANSWER: A
What is method overriding?
A) Having multiple methods with the same name and different parameters
B) Changing the behavior of a superclass method in a subclass
C) Calling a superclass method from a subclass
D) None of the above
ANSWER: B
What is most likely to be an adverse effect if GC tuning is not well-aligned with real-world application needs?
A) Higher latency
B) Lower throughput
C) More frequent crashes
D) All of the above
ANSWER: D
What is not a best practice for minimizing GC overhead?
A) Use of weak references
B) Avoiding premature optimization
C) Excessive use of finalizers
D) Avoiding object churning
ANSWER: C
What is NOT a common use case for using Reflection?
A) Modifying private fields
B) Creating a new instance of a class
C) Compiling Java code
D) Inspecting annotations
ANSWER: C
What is one implication of loading classes dynamically?
A) Improved performance
B) Enhanced security
C) Reduced security
D) Less memory usage
ANSWER: C
What is PermGen space replaced with in Java 8 and later versions?
A) Eden Space
B) Metaspace
C) Survivor Space
D) None of the above
ANSWER: B
What is Project Valhalla aimed at?
A) Concurrency
B) Native Interoperability
C) JVM performance
D) Value types and specialization
ANSWER: D
What is Project Valhalla focused on?
A) Modularization
B) Value types
C) Concurrency
D) Native code interfacing
ANSWER: B
What is recursion in Java?
A) When a method calls another method
B) When a method calls itself
C) When multiple methods call each other
D) When a method returns void
ANSWER: B
What is Reflection used for in Java?
A) Dynamic class loading
B) Modifying objects at runtime
C) Inspecting objects at runtime
D) All of the above
ANSWER: D
What is run-time polymorphism achieved through?
A) Method Overloading
B) Method Overriding
C) Static Methods
D) Final Methods
ANSWER: B
What is shallow copy in the context of a copy constructor?
A) Creating entirely separate copies of objects for any object references
B) Copying only the primitive types
C) Copying the object references only
D) Copying the memory location of the object being copied
ANSWER: C
What is short-circuiting in Java's logical operators?
A) Both sides of the operator are always evaluated
B) The right side of the operator is not evaluated if the result can be determined from the left side
C) Both sides of the operator are never evaluated
D) Short-circuiting is not supported in Java
ANSWER: B
What is stored in the Method Area of the JVM?
A) Local variables
B) Class definitions and static variables
C) Objects
D) Native Methods
ANSWER: B
What is stored in the Program Counter Register?
A) Memory address of currently executing instruction
B) Current thread state
C) Both A and B
D) None of the above
ANSWER: A
What is stored in the Stack Area?
A) Bytecode
B) Objects
C) Method frames
D) Native methods
ANSWER: C
What is the `.class` file in Java?
A) Source Code
B) Bytecode
C) Executable
D) Java Archive
ANSWER: B
What is the `Field` class used for in Java reflection?
A) To load classes dynamically
B) To inspect and modify fields of a class at runtime
C) To invoke methods dynamically
D) None of the above
ANSWER: B
What is the `instanceof` operator primarily used for?
A) To check the type of object at runtime
B) To create a new instance
C) To compare two objects
D) None of the above
ANSWER: A
What is the `rmic` tool used for?
A) Generate documentation
B) Generate stub and skeleton class files for RMI
C) Remote debugging
D) Package Java classes into a JAR
ANSWER: B
What is the 'pom' in 'pom.xml' short for?
A) Project Object Model
B) Project Output Metadata
C) Processed Object Model
D) None of the above
ANSWER: A
What is the ‘S0’ and ‘S1’ in the context of Java’s memory model?
A) Old Generation segments
B) Survivor spaces in Young Generation
C) Initial and maximum heap size
D) Metaspace segments
ANSWER: B
What is the access level of a default constructor?
A) Public
B) Private
C) Protected
D) Same as the class
ANSWER: D
What is the advantage of bytecode over native machine code?
A) Faster execution
B) Platform independence
C) Lower memory usage
D) Stronger typing
ANSWER: B
What is the advantage of implementing `equals` and `hashCode` in custom objects stored in a Vector?
A) To enable deep copy
B) To enable object serialization
C) To properly use collection methods like `contains` and `remove`
D) To improve performance
ANSWER: C
What is the advantage of making variables private in a class?
A) Increased security
B) Enhanced performance
C) Easier debugging
D) All of the above
ANSWER: A
What is the advantage of using Enumeration over Iterator for iterating through a Vector?
A) Enumeration is faster
B) Enumeration is type-safe
C) Enumeration is fail-fast
D) None of the above
ANSWER: D
What is the base case in a recursive method?
A) The final method in the call stack
B) The condition that stops the recursion
C) The first method call
D) The deepest method call
ANSWER: B
What is the base class for all classes in Java?
A) java.lang.Class
B) java.util.Base
C) java.lang.Object
D) java.util.Object
ANSWER: C
What is the base class for all classes in Java?
A) `Object`
B) `Class`
C) `Super`
D) `Base`
ANSWER: A
What is the basic syntax of an `if` statement in most programming languages?
A) if (condition) then {code_block}
B) if condition: code_block
C) if (condition) {code_block}
D) if condition {code_block}
ANSWER: C
What is the benefit of escape analysis in Java?
A) Reducing the number of objects created on the heap
B) Increasing CPU usage
C) Minimizing network latency
D) Optimizing disk I/O
ANSWER: A
What is the benefit of immutability?
A) Easier to share across multiple threads
B) Higher performance due to no need for synchronization
C) Easier to implement
D) Both A and B
ANSWER: D
What is the benefit of using an immutable list?
A) Improved write performance
B) Thread safety
C) Reduced memory usage
D) None of the above
ANSWER: B
What is the benefit of using control structures in programming?
A) They save memory
B) They make code easier to debug
C) They enable conditional and iterative operations
D) They make the program execute faster
ANSWER: C
What is the best practice for exception handling in methods?
A) Catch specific exceptions first, followed by the general ones
B) Catch general exceptions first, followed by the specific ones
C) Catch only general exceptions
D) Catch only specific exceptions
ANSWER: A
What is the best practice for using varargs in Java?
A) Use them sparingly
B) Use them for all methods
C) Always put them at the beginning of the parameter list
D) Always put them at the end of the parameter list
ANSWER: D
What is the best way to handle exceptions when working with Vectors?
A) Using if-else checks before every operation
B) Using try-catch blocks
C) Both A and B
D) Using Java 8's Optional
ANSWER: C
What is the best way to install IntelliJ IDEA on Ubuntu?
A) apt-get install idea
B) snap install intellij-idea-community
C) yum install idea
D) pacman -S idea
ANSWER: B
What is the biggest disadvantage of enabling detailed GC logs?
A) Increased CPU usage
B) Disk space consumption
C) Both A and B
D) None of the above
ANSWER: C
What is the bytecode instruction to load an integer onto the stack?
A) iload
B) iadd
C) istore
D) None of the above
ANSWER: A
What is the command to execute a Java program with custom heap sizes?
A) java -Xms64m -Xmx128m MyProgram
B) java -setHeap 64m,128m MyProgram
C) java -setMemory 64,128 MyProgram
D) None of the above
ANSWER: A
What is the command to specify custom VM options for a running Java program in the command line?
A) java -VM:option=value
B) java -XX:option=value
C) java -Doption=value
D) None of the above
ANSWER: B
What is the command to view the bytecode of a .class file?
A) java -view
B) javac -view
C) javap
D) None of the above
ANSWER: C
What is the contract between `equals` and `hashCode` methods in Java?
A) Two equal objects must have different hash codes
B) Two equal objects must have the same hash code
C) Two unequal objects must have different hash codes
D) Two unequal objects can have the same hash code
ANSWER: B
What is the correct syntax for a method with variable arguments?
A) `public void method(int... args)`
B) `public void method(int[] args...)`
C) `public void method(...int args)`
D) `public void method(int args...)`
ANSWER: A
What is the correct syntax for adding multiple conditions in an `if` statement?
A) `if (condition1, condition2) {code_block}`
B) `if (condition1 &amp;&amp; condition2) {code_block}`
C) `if condition1 and condition2: code_block`
D) Both B and C are correct
ANSWER: D
What is the correct syntax to document a method parameter using Javadoc?
A) `@param`
B) `@arg`
C) `@parameter`
D) `@argument`
ANSWER: A
What is the correct way to call a parameterized constructor of a superclass from a subclass?
A) `super(parameters)`
B) `this(parameters)`
C) `super().parameters`
D) `this().parameters`
ANSWER: A
What is the correct way to call a parameterized constructor?
A) `new ClassName()`
B) `new ClassName(parameters)`
C) `ClassName(parameters)`
D) `ClassName()`
ANSWER: B
What is the correct way to define a method that takes a variable number of arguments?
A) `public void method(int... args)`
B) `public void method(int[] args...)`
C) `public void method(...int args)`
D) `public void method(int args...)`
ANSWER: A
What is the correct way to define a method with variable arguments (varargs) in Java?
A) `public void method(int... args)`
B) `public void method(...int args)`
C) `public void method(int[] args...)`
D) `public void method(int args...)`
ANSWER: A
What is the data type of `true` and `false` in Java?
A) int
B) char
C) boolean
D) Boolean
ANSWER: C
What is the data type of literals like "Hello, World!" in Java?
A) char
B) String
C) Text
D) StringBuffer
ANSWER: B
What is the data type of the expression `3.14 + 2`?
A) int
B) float
C) double
D) String
ANSWER: C
What is the default access level for class members if no access modifier is specified?
A) private
B) public
C) protected
D) package-private (no modifier)
ANSWER: D
What is the default access level for class members?
A) `public`
B) `protected`
C) `private`
D) `default`
ANSWER: D
What is the default access level of a method if no access modifier is specified?
A) public
B) private
C) protected
D) package-private
ANSWER: D
What is the default access modifier for a method in Java?
A) public
B) private
C) protected
D) package-private
ANSWER: D
What is the default access modifier of a constructor if no access modifier is specified?
A) public
B) private
C) protected
D) package-private
ANSWER: D
What is the default behavior of `Collections.sort()` for sorting Vectors?
A) Ascending order
B) Descending order
C) Random order
D) No change
ANSWER: A
What is the default behavior of JVM when it runs out of memory?
A) Increase heap size
B) Trigger Garbage Collection
C) Throw an OutOfMemoryError
D) Shutdown gracefully
ANSWER: C
What is the default build tool for new Gradle projects?
A) Ant
B) Maven
C) None
D) Gradle Wrapper
ANSWER: D
What is the default capacity increment of a Vector?
A) 0
B) 1
C) 2
D) Undefined
ANSWER: A
What is the default capacity increment of a Vector?
A) 0
B) 1
C) 10
D) Double the current size
ANSWER: A
What is the default capacity of an ArrayList when it is created with a no-argument constructor?
A) 0
B) 10
C) 16
D) 32
ANSWER: B
What is the default class loader for a Java application?
A) Bootstrap Class Loader
B) Extension Class Loader
C) System Class Loader
D) Custom Class Loader
ANSWER: C
What is the default delimiter used by the Scanner class?
A) Comma
B) Whitespace
C) Newline
D) Period
ANSWER: B
What is the default garbage collection algorithm used in Java?
A) G1
B) CMS
C) Parallel
D) Serial
ANSWER: A
What is the default garbage collector in Java 11?
A) Serial GC
B) Parallel GC
C) G1 GC
D) CMS GC
ANSWER: C
What is the default garbage collector in Java 8?
A) G1 GC
B) Parallel GC
C) CMS GC
D) None of the above
ANSWER: B
What is the default growth factor of a Vector?
A) 50%
B) 100%
C) 25%
D) 75%
ANSWER: A
What is the default initial capacity of a Vector?
A) 0
B) 10
C) 16
D) 32
ANSWER: B
What is the default installation directory for Eclipse on Windows?
A) C:\Eclipse
B) C:\Program Files\Eclipse
C) D:\Eclipse
D) C:\Program Files (x86)\Eclipse
ANSWER: B
What is the default installation directory for JDK on Windows?
A) C:\Program Files\Java\JDK
B) C:\Java
C) C:\Program Files (x86)\Java
D) C:\JDK
ANSWER: A
What is the default method used to compare elements during sorting of an ArrayList?
A) compareTo()
B) compare()
C) equals()
D) sort()
ANSWER: A
What is the default retention policy of a custom annotation?
A) `RUNTIME`
B) `SOURCE`
C) `CLASS`
D) `INHERITED`
ANSWER: B
What is the default return value for a method with a return type of `int`?
A) 0
B) 1
C) `null`
D) None of the above
ANSWER: D
What is the default return value of a method with a return type of `boolean`?
A) true
B) false
C) null
D) None of the above
ANSWER: D
What is the default sorting order when using Collections.sort() on a List of integers?
A) Ascending
B) Descending
C) Random
D) Unchanged
ANSWER: A
What is the default thread priority in Java?
A) 1
B) 5
C) 10
D) 0
ANSWER: B
What is the default thread priority in Java?
A) 1
B) 5
C) 10
D) 7
ANSWER: B
What is the default value for an uninitialized object reference?
A) ""
B) 0
C) null
D) undefined
ANSWER: C
What is the default value of a `boolean` data type?
A) false
B) true
C) 0
D) null
ANSWER: A
What is the default value of a `double` data type?
A) 0.0
B) 0.0d
C) 0
D) null
ANSWER: A
What is the default value of a `float` data type?
A) 0
B) 0.0
C) 0.0f
D) null
ANSWER: C
What is the default value of a boolean variable in Java?
A) true
B) false
C) null
D) Undefined
ANSWER: B
What is the default value of a char variable in Java?
A) ' '
B) '\u0000'
C) null
D) '\0'
ANSWER: B
What is the default value of a float variable in Java?
A) 0.0
B) 0
C) 0.0f
D) null
ANSWER: C
What is the default value of a static integer variable?
A) 0
B) 1
C) null
D) Undefined
ANSWER: A
What is the default value of an instance variable of type `boolean`?
A) true
B) false
C) null
D) Undefined
ANSWER: B
What is the default value of an instance variable of type `boolean`?
A) true
B) false
C) null
D) 0
ANSWER: B
What is the default value of an instance variable of type `double`?
A) 0.0
B) 1.0
C) null
D) NaN
ANSWER: A
What is the default value of an instance variable of type `int`?
A) 0
B) 1
C) null
D) undefined
ANSWER: A
What is the default value of an uninitialized `short` variable?
A) 0
B) null
C) Undefined
D) 1
ANSWER: A
What is the default value of an uninitialized int variable in Java?
A) 0
B) null
C) Undefined
D) Throws a compilation error
ANSWER: A
What is the default value of an uninitialized reference data type?
A) 0
B) ""
C) null
D) undefined
ANSWER: C
What is the default value of an uninitialized String variable in Java?
A) ""
B) "null"
C) null
D) Undefined
ANSWER: C
What is the default value of instance variables of type int in a Java class?
A) Null
B) 0
C) Undefined
D) -1
ANSWER: B
What is the default visibility of a Javadoc comment?
A) Public
B) Protected
C) Private
D) Package-private
ANSWER: A
What is the default visibility of instance variables in a Java class?
A) Public
B) Private
C) Protected
D) Package-private
ANSWER: D
What is the difference between a constructor and a method?
A) Constructors have a return type, methods do not
B) Constructors do not have a return type, methods do
C) Constructors and methods cannot coexist in the same class
D) Constructors and methods must have the same name
ANSWER: B
What is the difference between a parameter and an argument in Java?
A) Parameters are used in method declarations; arguments are the actual values passed
B) Parameters and arguments are the same
C) Arguments are used in method declarations; parameters are the actual values passed
D) Parameters are used only in main method; arguments are used in all other methods
ANSWER: A
What is the disadvantage of making a class immutable?
A) Increased memory usage
B) Reduced performance
C) Difficulty in implementation
D) Both A and B
ANSWER: A
What is the disadvantage of not doing heap compaction?
A) Increased pause times
B) Lower throughput
C) Memory fragmentation
D) Increased CPU usage
ANSWER: C
What is the downside of Vector being synchronized?
A) Increased memory usage
B) Decreased performance
C) Inability to store null elements
D) Inability to store duplicate elements
ANSWER: B
What is the drawback of using an immutable list?
A) Not thread-safe
B) Cannot be modified after creation
C) Increased memory usage
D) Poor performance
ANSWER: B
What is the effect of the `continue` statement inside a loop?
A) It terminates the loop immediately
B) It skips the remaining code in the current iteration and continues with the next iteration
C) It causes the loop to start from the beginning
D) None of the above
ANSWER: B
What is the effect of using a labeled `continue` statement?
A) It moves the control to the labeled loop start
B) It moves the control out of the labeled loop
C) It moves the control to the next iteration of the labeled loop
D) None of the above
ANSWER: C
What is the execution order of static and non-static initialization blocks and constructors?
A) Static block, non-static block, constructor
B) Non-static block, static block, constructor
C) Constructor, static block, non-static block
D) Static block, constructor, non-static block
ANSWER: A
What is the Factory design pattern primarily used for?
A) To ensure a class has only one instance
B) To create objects
C) To encapsulate algorithms
D) To facilitate communication between objects
ANSWER: B
What is the file extension for compiled Java bytecode files?
A) .java
B) .javac
C) .class
D) .exe
ANSWER: C
What is the file extension of the compiled Java source code?
A) .java
B) .jar
C) .class
D) .exe
ANSWER: C
What is the final phase in the Java execution architecture process?
A) Garbage Collection
B) Bytecode Verification
C) Shutdown
D) Just-In-Time Compilation
ANSWER: C
What is the first line of a constructor?
A) An invocation of another constructor
B) An invocation of a superclass constructor
C) Initialization of instance variables
D) Either A or B
ANSWER: D
What is the first phase in the lifecycle of class loading?
A) Linking
B) Initialization
C) Loading
D) None of the above
ANSWER: C
What is the first statement in every constructor, implicitly if not explicitly provided?
A) `this()`
B) `super()`
C) `return`
D) `new`
ANSWER: B
What is the first statement in every constructor?
A) A call to `super()` constructor
B) A call to `this()` constructor
C) A return statement
D) An assignment statement
ANSWER: A
What is the first step in installing the JDK on Windows?
A) Set PATH variable
B) Run the installer
C) Download the installer
D) Reboot the system
ANSWER: C
What is the first step to create a new Java project in IntelliJ IDEA?
A) Navigate to File -&gt; Open
B) Navigate to File -&gt; New -&gt; Project
C) Navigate to File -&gt; New -&gt; File
D) Navigate to File -&gt; Import
ANSWER: B
What is the first step to install NetBeans on Windows?
A) Set JAVA_HOME
B) Download the installer
C) Run the installer
D) Update PATH variable
ANSWER: B
What is the focus of the `-XX:+UseLargePages` JVM flag?
A) Increase throughput
B) Optimize heap usage
C) Reduce latency
D) Improve page table lookups
ANSWER: D
What is the function of the `keytool` in JDK?
A) Debugging Java applications
B) Managing cryptographic keys and certificates
C) Object serialization
D) Garbage collection
ANSWER: B
What is the function of the Java Native Interface (JNI) in relation to JVM?
A) Allows calling native methods written in languages like C/C++
B) Optimizes bytecode execution
C) Handles memory allocation for Java objects
D) None of the above
ANSWER: A
What is the Gradle equivalent of 'mvn clean install'?
A) gradle build
B) gradle clean build
C) gradle install
D) gradle clean install
ANSWER: B
What is the growth factor of an ArrayList?
A) 50%
B) 100%
C) 25%
D) 75%
ANSWER: B
What is the heap memory primarily used for?
A) Storing objects
B) Storing method calls
C) Storing local variables
D) None of the above
ANSWER: A
What is the immediate parent of the System Class Loader?
A) Bootstrap Class Loader
B) Extension Class Loader
C) Custom Class Loader
D) None of the above
ANSWER: B
What is the impact of changing the order of parameters on method overloading?
A) Creates an overloaded method
B) Does not create an overloaded method
C) Causes a compilation error
D) Causes a runtime error
ANSWER: A
What is the impact of changing the return type of a method on its signature?
A) Changes the signature
B) Doesn't change the signature
C) Makes the method overloaded
D) Makes the method overridden
ANSWER: B
What is the impact of declaring a constructor with the `synchronized` keyword?
A) A compilation error occurs
B) The constructor will be thread-safe
C) The constructor will not be accessible from other classes
D) None of the above
ANSWER: A
What is the impact of frequent minor GC pauses on application performance?
A) Decreases latency
B) Increases throughput
C) Increases latency
D) No impact
ANSWER: C
What is the impact of making a Singleton class's constructor protected?
A) It allows subclassing
B) It violates the Singleton property
C) Both A and B
D) None of the above
ANSWER: C
What is the impact of using Reflection API on performance?
A) It improves performance
B) It reduces performance
C) It has no impact on performance
D) It depends on usage
ANSWER: B
What is the impact of Vector's method-level synchronization on its scalability?
A) Improves scalability
B) Reduces scalability
C) No impact
D) Depends on the number of threads
ANSWER: B
What is the importance of OOP in Java?
A) It is the core concept behind Java’s design
B) It is optional to use
C) It is deprecated in newer versions
D) None of the above
ANSWER: A
What is the importance of overriding `equals` and `hashCode` methods when storing custom objects in a Vector?
A) For proper functioning of `contains()` and `indexOf()`
B) For thread safety
C) For increasing performance
D) None of the above
ANSWER: A
What is the initial capacity of a Vector?
A) 10
B) 16
C) 0
D) 8
ANSWER: A
What is the initial capacity of an ArrayList created with the default constructor?
A) 10
B) 0
C) 16
D) 8
ANSWER: B
What is the initial value of `i` after this loop completes - ` for(int i=0; i<5; ++i) { } `
A) 4
B) 5
C) 0
D) 1
ANSWER: B
What is the Java Reflection API primarily used for?
A) Memory management
B) Accessing class structures at runtime
C) Multithreading
D) None of the above
ANSWER: B
What is the JNI Environment pointer typically used for?
A) Memory Allocation
B) Invoking Java methods from native code
C) Both A and B
D) None of the above
ANSWER: C
What is the key benefit of using an IDE's integrated version control system over a command line?
A) Enhanced Security
B) Graphical Interface
C) Better Performance
D) None of the above
ANSWER: B
What is the key difference between `while` loop and `do-while` loop?
A) `do-while` loop is faster
B) `while` loop checks the condition before entering the loop
C) `do-while` loop cannot use logical operators in its condition
D) `while` loop cannot have its body executed zero times
ANSWER: B
What is the lambda expression equivalent for `Math::max`?
A) `(a, b) -&gt; Math.max(a, b)`
B) `(a, b) -&gt; { return Math.max(a, b); }`
C) `(a, b) -&gt; a &gt; b ? a : b`
D) All of the above
ANSWER: D
What is the last step of the JVM lifecycle?
A) Loading
B) Linking
C) Execution
D) Termination
ANSWER: D
What is the latest Long-Term Support (LTS) version of Java as of 2022?
A) Java 8
B) Java 11
C) Java 17
D) Java 16
ANSWER: C
What is the least restrictive access modifier that allows a method to be accessed only by classes in the same package?
A) public
B) private
C) protected
D) package-private
ANSWER: D
What is the lifetime of a local variable in Java?
A) The duration of the program
B) The duration of the method execution
C) The duration of the class instance
D) The duration of the package
ANSWER: B
What is the lifetime of an instance variable?
A) The duration of the program
B) The duration of the method execution
C) The duration of the class instance
D) The duration of the package
ANSWER: C
What is the lifetime of the Heap Area?
A) Per method invocation
B) Per thread
C) Per class
D) Per JVM instance
ANSWER: D
What is the main advantage of code reusability?
A) Increased performance
B) Reduced code redundancy
C) Easier debugging
D) All of the above
ANSWER: B
What is the main advantage of JIT over pure interpretation?
A) Lower memory usage
B) Faster execution speed
C) Better debugging facilities
D) None of the above
ANSWER: B
What is the main advantage of the Builder Pattern over the Telescoping Constructor Pattern?
A) More readable code
B) Less memory usage
C) Faster object creation
D) All of the above
ANSWER: A
What is the main advantage of using constructor-based dependency injection?
A) Ensures that the object always has its dependencies before it's used
B) Easier to write unit tests
C) Improves performance
D) Both A and B
ANSWER: D
What is the main advantage of using the G1 Garbage Collector?
A) Lower memory usage
B) Predictable pauses
C) Higher throughput
D) Real-time capabilities
ANSWER: B
What is the main difference between primitive and reference data types?
A) Memory allocation
B) Performance
C) Mutability
D) Syntax
ANSWER: A
What is the main disadvantage of 'Reference Counting' garbage collection?
A) Cannot collect circular references
B) High computational overhead
C) Inability to compact memory
D) None of the above
ANSWER: A
What is the main disadvantage of not handling exceptions within methods?
A) Compilation Error
B) Logical Error
C) Reduced code modularity
D) Runtime Error
ANSWER: D
What is the main disadvantage of the Builder Pattern?
A) Increased complexity
B) Reduced performance
C) More difficult to implement
D) Both A and C
ANSWER: D
What is the main disadvantage of using a larger heap size in JVM?
A) Longer garbage collection pauses
B) Slower JIT compilation
C) Lower multi-threading capabilities
D) None of the above
ANSWER: A
What is the main disadvantage of using inner classes?
A) Reduced maintainability
B) Reduced reusability
C) Increased complexity
D) Both A and C
ANSWER: C
What is the main focus of Project Loom?
A) Language simplicity
B) Concurrency and lightweight threads
C) Native code interfacing
D) Machine learning libraries
ANSWER: B
What is the main purpose of having a parameterized constructor?
A) To provide default values to object attributes
B) To initialize object attributes at the time of object creation
C) To create multiple instances of the same class
D) To override methods from the superclass
ANSWER: B
What is the main purpose of the `jconsole` tool?
A) Compilation
B) Monitoring and management
C) Debugging
D) Execution
ANSWER: B
What is the main reason for using classes in Java?
A) Data integrity
B) Code reusability
C) Code maintainability
D) Encapsulation
ANSWER: B
What is the main reason to prefer composition over inheritance?
A) Easier code reuse
B) Easier to change behavior at runtime
C) Easier to implement
D) None of the above
ANSWER: B
What is the main role of class loaders?
A) Loading classes into heap
B) Loading classes into method area
C) Loading classes into stack
D) None of the above
ANSWER: B
What is the main role of JVM?
A) Write Java Programs
B) Execute compiled Java code
C) Compile Java Programs
D) Manage memory
ANSWER: B
What is the main role of the Java Virtual Machine (JVM) during code execution?
A) Compilation
B) Interpretation of bytecode
C) Syntax checking
D) Debugging
ANSWER: B
What is the main rule to follow when overriding a method?
A) Must change the method's name
B) Must change the method's parameters
C) Must not change the method's return type
D) Must not throw new checked exceptions
ANSWER: C
What is the main use of nested loops?
A) To create infinite loops
B) To iterate over multi-dimensional arrays
C) To replace `while` loops
D) To make the code more efficient
ANSWER: B
What is the main use-case for JConsole?
A) Thread Profiling
B) Real-time Monitoring
C) Code Analysis
D) Debugging
ANSWER: B
What is the major drawback of frequent Full GCs?
A) Increased latency
B) Reduced CPU usage
C) Increased throughput
D) Decreased object allocation
ANSWER: A
What is the major drawback of the Copying GC algorithm?
A) CPU usage
B) Memory overhead
C) Throughput
D) Latency
ANSWER: B
What is the mascot of Java?
A) A snake
B) A tiger
C) A coffee cup
D) A duke
ANSWER: D
What is the maximum negative value for a `short` data type?
A) -32767
B) -32768
C) -65535
D) -65536
ANSWER: B
What is the maximum number of parameters a method can have in Java?
A) 255
B) 256
C) No limit
D) Depends on JVM implementation
ANSWER: A
What is the maximum positive value that can be stored in a `short` data type?
A) 32767
B) 32768
C) 65535
D) 65536
ANSWER: A
What is the maximum priority that a thread can have in Java?
A) 1
B) 5
C) 10
D) 15
ANSWER: C
What is the maximum size of an array in Java?
A) Integer.MAX_VALUE
B) 2^31 - 1
C) There is no limit
D) 2^32 - 1
ANSWER: B
What is the maximum stack depth for a recursive method in Java?
A) 256
B) Depends on JVM implementation
C) 1024
D) Unlimited
ANSWER: B
What is the maximum value that can be stored in a byte variable in Java?
A) 127
B) 128
C) 255
D) 256
ANSWER: A
What is the maximum value that can be stored in an `int` data type?
A) \(2^{31} - 1\)
B) \(2^{31}\)
C) \(2^{32} - 1\)
D) \(2^{32}\)
ANSWER: A
What is the meaning of the `public static void main(String[] args)` declaration?
A) Public method with no return type that is the application's entry point
B) Public class with a static main method
C) Method that must be implemented by all Java programs
D) None of the above
ANSWER: A
What is the memory area where instance variables are stored?
A) Stack
B) Heap
C) Native Method Stack
D) Method Area
ANSWER: B
What is the Metaspace in Java 8 and above?
A) Replacement for PermGen
B) Part of Young Generation
C) Part of Old Generation
D) Area to store native methods
ANSWER: A
What is the minimal requirement for an `if` statement to execute its block of code?
A) The condition must be true
B) The condition must be false
C) The condition must be non-null
D) There is no requirement
ANSWER: A
What is the minimum JDK version required for IntelliJ IDEA 2021.1?
A) JDK 8
B) JDK 11
C) JDK 15
D) JDK 9
ANSWER: B
What is the minimum number of parameters a method can have in Java?
A) 0
B) 1
C) Depends on the method name
D) Depends on the return type
ANSWER: A
What is the minimum number of times the body of a `do-while` loop will be executed?
A) 0
B) 1
C) Depends on the condition
D) 2
ANSWER: B
What is the minimum requirement to run a Java program?
A) JDK
B) JRE
C) JVM
D) Both A and B
ANSWER: B
What is the minimum value of a `char` data type in Java?
A) '\u0000'
B) '\u0001'
C) 0
D) 1
ANSWER: A
What is the minimum value that can be stored in a `byte` data type?
A) -128
B) -127
C) 0
D) 1
ANSWER: A
What is the most CPU-intensive phase of the Mark-and-Sweep algorithm?
A) Mark
B) Sweep
C) Compact
D) None of the above
ANSWER: A
What is the most likely outcome of memory leaks in Java applications?
A) CPU overload
B) OutOfMemoryError
C) StackOverflowError
D) Application crash
ANSWER: B
What is the most restrictive access modifier that allows a method to be accessed by classes in the same package?
A) public
B) private
C) protected
D) package-private
ANSWER: D
What is the name of the Java compiler tool that generates bytecode?
A) javac
B) java
C) jre
D) None of the above
ANSWER: A
What is the Observer design pattern primarily used for?
A) To ensure a class has only one instance
B) To create objects
C) To encapsulate algorithms
D) To facilitate communication between objects
ANSWER: D
What is the order of execution of static blocks and static variables?
A) Static variables first, then static blocks
B) Static blocks first, then static variables
C) Both are executed simultaneously
D) Depends on their order in the code
ANSWER: D
What is the output of `Integer.MAX_VALUE + 1`?
A) Overflow error
B) Integer.MIN_VALUE
C) Integer.MAX_VALUE
D) Compilation Error
ANSWER: B
What is the output of `list.size()` for an empty ArrayList?
A) 0
B) -1
C) 1
D) Null
ANSWER: A
What is the output of `list.size()` for an empty LinkedList?
A) 0
B) -1
C) 1
D) Null
ANSWER: A
What is the output of `new Scanner(System.in).hasNextLine()` when no input is given?
A) true
B) false
C) Compilation Error
D) Blocks indefinitely
ANSWER: D
What is the output of `next()` method for an empty List's Iterator?
A) null
B) Throws NoSuchElementException
C) Empty String
D) -1
ANSWER: B
What is the output of `System.out.println(new int[]{1, 2}.equals(new int[]{1, 2}));`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: B
What is the output of `System.out.println(new Integer(1) instanceof Integer);`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: A
What is the output of `System.out.println(new Integer(5) == new Integer(5));`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: B
What is the output of `System.out.println(new Integer(5).equals(5));`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: A
What is the output of `System.out.println(new String("Java") == new String("Java").intern());`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: B
What is the output of `System.out.println(new String("Java").hashCode() == "Java".hashCode());`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: A
What is the output of the `javap` command?
A) Java source code
B) Native machine code
C) Bytecode disassembly
D) Class metadata
ANSWER: C
What is the output of the expression `(int) 'a'`?
A) a
B) 97
C) Compilation Error
D) Runtime Error
ANSWER: B
What is the output of the expression `5 % 2`?
A) 1
B) 2
C) 2.5
D) 0
ANSWER: A
What is the output of the following `while` loop - ` int i = 0; while(i++ < 3) { System.out.print(i + " "); } `
A) 0 1 2
B) 1 2 3
C) 1 2
D) 1 2 3 4
ANSWER: B
What is the output of the following `while` loop - ` int x = 2; while(x-- > 0) { System.out.print(x + " "); } `
A) 1 0
B) 2 1
C) 2 1 0
D) 0 1
ANSWER: A
What is the output of the following code - ` for(int i : new int[]{1,2,3}) { System.out.print(i + " "); } `
A) 1 2 3
B) 0 1 2
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code - ` int x = 0; do { System.out.print(x + " "); } while(x > 0); `
A) 0
B) 1
C) No Output
D) Compilation Error
ANSWER: A
What is the output of the following code - ` int x = 0; do { System.out.print(x + " "); x++; } while(x < 3); `
A) 0 1 2
B) 0 1 2 3
C) 1 2 3
D) Compilation Error
ANSWER: A
What is the output of the following code - ` public class MyClass { public MyClass() { this(5); System.out.print("Default constructor "); } public MyClass(int x) { System.out.print("Parameterized constructor "); } public static void main(String[] args) { MyClass obj = new MyClass(); } } `
A) Default constructor
B) Parameterized constructor
C) Parameterized constructor Default constructor
D) Default constructor Parameterized constructor
ANSWER: C
What is the output of the following code snippet - ` for(int i=0; i<3; i++) { System.out.print(i + " "); } `
A) 0 1 2
B) 0 1 2 3
C) 1 2 3
D) Compilation Error
ANSWER: A
What is the output of the following code snippet - ` for(int i=1; i<=3; i++) { if(i == 2) continue; System.out.print(i + " "); } `
A) 1 2 3
B) 1 3
C) 1 2
D) 2 3
ANSWER: B
What is the output of the following code snippet - ` for(int i=1; i<=3; i++) { if(i == 2) break; System.out.print(i + " "); } `
A) 1 2 3
B) 1
C) 1 3
D) 1 2
ANSWER: B
What is the output of the following code snippet - ` int x = 0; do { if(x > 1) continue; System.out.print(x + " "); x++; } while(x < 3); `
A) 0 1 2
B) 0 1
C) Compilation Error
D) 0 1 2 3
ANSWER: C
What is the output of the following code snippet - ` int x = 5; do { System.out.print(x + " "); x--; } while(x >= 0); `
A) 5 4 3 2 1 0
B) 5 4 3 2 1
C) 0 1 2 3 4 5
D) 4 3 2 1 0
ANSWER: A
What is the output of the following code snippet - ` int x = 5; do { System.out.print(x + " "); if(x == 3) break; x--; } while(x > 0); `
A) 5 4 3
B) 5 4 3 2 1
C) 5 4
D) 3 2 1 0
ANSWER: A
What is the output of the following code snippet - ` int x = 5; int y = x < 5 ? 1 : x > 5 ? 2 : 3; System.out.print[Yes]; `
A) 1
B) 2
C) 3
D) Compilation Error
ANSWER: C
What is the output of the following code snippet if `x = false` and `y = true` - ` if(x && y) { System.out.print("true"); } else { System.out.print("false"); } `
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the output of the following code snippet if `x = true` and `y = false` - ` if(x || y) { System.out.print("true"); } else { System.out.print("false"); } `
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code snippet using `break` - ` for(int i=1; i<=2; i++) { for(int j=1; j<=2; j++) { if(i == j) break; System.out.print(i + "" + j + " "); } } `
A) 11 12 21 22
B) 12 21
C) 21 22
D) 11 22
ANSWER: B
What is the output of the following code snippet using `break` and `continue` - ` for(int i=1; i<=2; i++) { if(i == 1) continue; for(int j=1; j<=2; j++) { if(j == 2) break; System.out.print(i + "" + j + " "); } } `
A) 11 21
B) 21
C) 11 12 21
D) 12 21
ANSWER: B
What is the output of the following code snippet using `continue` - ` for(int i=1; i<=2; i++) { for(int j=1; j<=2; j++) { if(j == 2) continue; System.out.print(i + "" + j + " "); } } `
A) 11 12 21 22
B) 11 21
C) 11 12 21
D) 12 22
ANSWER: B
What is the output of the following code snippet using a labeled `break` - ` outer: for(int i=1; i<=2; i++) { for(int j=1; j<=2; j++) { if(j == 2) break outer; System.out.print(i + "" + j + " "); } } `
A) 11 12 21 22
B) 11
C) 11 21
D) 11 12 21
ANSWER: B
What is the output of the following code snippet using a labeled `continue` - ` outer: for(int i=1; i<=2; i++) { for(int j=1; j<=2; j++) { if(j == 2) continue outer; System.out.print(i + "" + j + " "); } } `
A) 11 12 21 22
B) 11 21
C) 11 12 21
D) 12 22
ANSWER: B
What is the output of the following code snippet using the enhanced `for` loop with an array of Strings - ` String[] arr = {"a", "b", "c"}; for(String s: arr) { System.out.print(s + " "); } `
A) a b c
B) 0 1 2
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code snippet using the enhanced `for` loop with a Set - ` Set<Integer> set = new HashSet<>(Arrays.asList(3, 1, 2)); for(int i: set) { System.out.print(i + " "); } `
A) 1 2 3
B) 3 1 2
C) The output can be in any order
D) Compilation Error
ANSWER: C
What is the output of the following code snippet: `System.out.println((int) 'A');`?
A) A
B) 65
C) Compilation error
D) Runtime error
ANSWER: B
What is the output of the following code snippet? `public static void main(String[] args) { display(); } public static void display() { System.out.println("Hello, world!"); }`
A) Hello, world!
B) Compilation Error
C) Runtime Error
D) None of the above
ANSWER: A
What is the output of the following code snippet? `public static void display() { return; } public static void main(String[] args) { display(); System.out.println("Done"); }`
A) Done
B) Compilation Error
C) Runtime Error
D) None of the above
ANSWER: A
What is the output of the following code using the enhanced `for` loop - ` int[] arr = {1, 2, 3}; for(int i: arr) { System.out.print(i + " "); } `
A) 1 2 3
B) 0 1 2
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class Animal { void sound() { System.out.println("Animal sound"); } } class Dog extends Animal { void sound() { System.out.println("Woof"); } } public class Test { public static void main(String[] args) { Animal obj = new Dog(); obj.sound(); } }`
A) Animal sound
B) Woof
C) Compilation Error
D) None of the above
ANSWER: B
What is the output of the following code? `class Animal { void sound() { System.out.println("Animal sound"); } } class Dog extends Animal { void sound() { System.out.println("Woof"); } } public class Test { public static void main(String[] args) { Animal obj = new Animal(); obj.sound(); } }`
A) Animal sound
B) Woof
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { { System.out.print("Block "); } MyClass() { System.out.print("Constructor "); } } public static void main(String[] args) { MyClass obj = new MyClass(); }`
A) Block Constructor
B) Constructor Block
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { int x = 10; } public class Main { public static void main(String[] args) { MyClass obj1 = new MyClass(); MyClass obj2 = obj1; obj2.x = 20; System.out.println(obj1.x); } }`
A) 10
B) 20
C) Compilation Error
D) None of the above
ANSWER: B
What is the output of the following code? `class MyClass { int x = 10; void show() { int x = 20; System.out.println(this.x); } } public class Main { public static void main(String[] args) { MyClass obj = new MyClass(); obj.show(); } }`
A) 10
B) 20
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { int x = 10; void show() { int x = 20; System.out.print(this.x); } } public static void main(String[] args) { MyClass obj = new MyClass(); obj.show(); }`
A) 10
B) 20
C) Compilation Error
D) Runtime Error
ANSWER: A
What is the output of the following code? `class MyClass { int x; MyClass(int y) { x = y; } } public class Main { public static void main(String[] args) { MyClass obj = new MyClass(10); System.out.println(obj.x); } }`
A) 10
B) Compilation Error
C) 0
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { int x; MyClass(int x) { this.x = x; } } public static void main(String[] args) { MyClass obj = new MyClass(10); System.out.print(obj.x); }`
A) 0
B) 10
C) Compilation Error
D) None of the above
ANSWER: B
What is the output of the following code? `class MyClass { MyClass() { this(5); System.out.print("Default "); } MyClass(int x) { System.out.print(x + " "); } public static void main(String[] args) { new MyClass(); } }`
A) 5 Default
B) Default 5
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { MyClass() { this("Java"); System.out.print("Default "); } MyClass(String s) { System.out.print(s + " "); } public static void main(String[] args) { new MyClass(); } }`
A) Java Default
B) Default Java
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { MyClass() { System.out.print("Default"); } MyClass(int x) { System.out.print("Parameterized"); } } public static void main(String[] args) { MyClass obj = new MyClass(); }`
A) Default
B) Parameterized
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class MyClass { MyClass() throws Exception { throw new Exception(); } } public static void main(String[] args) { try { MyClass obj = new MyClass(); } catch (Exception e) { System.out.print("Caught"); } }`
A) Caught
B) Compilation Error
C) An exception is thrown but not caught
D) None of the above
ANSWER: A
What is the output of the following code? `class Outer { class Inner { void show() { System.out.print("Inner"); } } } public static void main(String[] args) { Outer.Inner obj = new Outer().new Inner(); obj.show(); }`
A) Inner
B) Outer
C) Compilation Error
D) Runtime Error
ANSWER: A
What is the output of the following code? `class Outer { static class Inner { void show() { System.out.print("Static Inner"); } } } public static void main(String[] args) { Outer.Inner obj = new Outer.Inner(); obj.show(); }`
A) Static Inner
B) Inner
C) Compilation Error
D) Runtime Error
ANSWER: A
What is the output of the following code? `class Parent { Parent() { System.out.print("Parent "); } } class Child extends Parent { Child() { super(); System.out.print("Child "); } public static void main(String[] args) { new Child(); } }`
A) Parent Child
B) Child Parent
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class Parent { Parent() { System.out.print("Parent "); } } class Child extends Parent { Child(int x) { System.out.print("Child " + x); } public static void main(String[] args) { new Child(5); } }`
A) Parent Child 5
B) Child 5 Parent
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class Parent { Parent(int x) { System.out.print(x + " "); } } class Child extends Parent { Child() { super(5); System.out.print("Child "); } public static void main(String[] args) { new Child(); } }`
A) 5 Child
B) Child 5
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `class Test { private int x = 10; public void display() { int x = 20; System.out.println(x); } } public static void main(String[] args) { new Test().display(); }`
A) 10
B) 20
C) Compilation Error
D) None of the above
ANSWER: B
What is the output of the following code? `class Test { public int x = 10; public void display() { int x = 20; System.out.println(this.x); } } public static void main(String[] args) { new Test().display(); }`
A) 10
B) 20
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `public class MyClass { public static void main(String[] args) { MyClass obj = new MyClass(); System.out.println(obj instanceof Object); } }`
A) True
B) False
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `public class Test { private int x = 10; public int getX() { return x; } public static void main(String[] args) { Test obj = new Test(); System.out.println(obj.getX()); } }`
A) 10
B) Compilation Error
C) 0
D) None of the above
ANSWER: A
What is the output of the following code? `public class Test { private int x = 10; public void show() { int x = 20; System.out.println(this.x); } public static void main(String[] args) { Test obj = new Test(); obj.show(); } }`
A) 10
B) 20
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `public static void modify(StringBuffer sb) { sb.append(" World"); } public static void main(String[] args) { StringBuffer sb = new StringBuffer("Hello"); modify(sb); System.out.println(sb); }`
A) Hello
B) Hello World
C) Compilation Error
D) Runtime Error
ANSWER: B
What is the output of the following code? `public static void change(int x) { x = 20; } public static void main(String[] args) { int x = 10; change(x); System.out.println(x); }`
A) 10
B) 20
C) Compilation Error
D) Runtime Error
ANSWER: A
What is the output of the following code? `public static void main(String[] args) { System.out.println(display()); } public static int display() { return 10; }`
A) 10
B) Compilation Error
C) Runtime Error
D) None of the above
ANSWER: A
What is the output of the following code? `public static void main(String[] args) { display(); } public static void display() { return; System.out.println("Hello"); }`
A) Hello
B) Compilation Error
C) Runtime Error
D) None of the above
ANSWER: B
What is the output of the following code? `public static void main(String[] args) { display(); } public static void display() { System.out.println("Hello"); return; }`
A) Hello
B) Compilation Error
C) Runtime Error
D) None of the above
ANSWER: A
What is the output of the following code? `public static void main(String[] args) { display(10); } public static void display(int... a) { System.out.println(a.length); }`
A) 10
B) 1
C) Compilation Error
D) None of the above
ANSWER: B
What is the output of the following code? `public static void main(String[] args) { display(10, "Hello"); } public static void display(int a, String b) { System.out.println(a + b); } public static void display(String a, int b) { System.out.println(a + b); }`
A) 10Hello
B) Hello10
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of the following code? `public static void modify(int[] arr) { arr[0] = 5; } public static void main(String[] args) { int[] arr = {1, 2, 3}; modify(arr); System.out.println(arr[0]); }`
A) 1
B) 5
C) Compilation Error
D) Runtime Error
ANSWER: B
What is the output of the following code? `static { System.out.print("Static Block"); } public static void main(String[] args) { System.out.print("Main Method"); }`
A) Main Method
B) Static Block
C) Static BlockMain Method
D) Main MethodStatic Block
ANSWER: C
What is the output of the following Java program? public class HelloWorld { public static void main(String[] args) { System.out.print("Hello, World!"); } }
A) HelloWorld
B) Hello, World!
C) No output
D) Syntax Error
ANSWER: B
What is the output of the following recursive method call? `public static int fact(int n) { if (n == 1) return 1; return n * fact(n - 1); } fact(5);`
A) 120
B) 5
C) Compilation Error
D) Stack Overflow Error
ANSWER: A
What is the output of this code - ` for(int i=0; i<3; i++, System.out.print(i + " ")) { } `
A) 0 1 2
B) 1 2 3
C) Compilation Error
D) 0 1 2 3
ANSWER: C
What is the output of this code - ` for(int x : new int[]{1, 2, 3}){ System.out.print(x*x + " "); } `
A) 1 4 9
B) 1 2 3
C) 1 2 3 4 9
D) Compilation Error
ANSWER: A
What is the output of this code - ` int x = 0; while(x < 0) { System.out.print(x + " "); } `
A) 0
B) 0 0 0 0 ...
C) No Output
D) Compilation Error
ANSWER: C
What is the output of this code - ` int x = 0; while(x < 3) { System.out.print(x + " "); x++; } `
A) 0 1 2
B) 0 1 2 3
C) 1 2 3
D) Compilation Error
ANSWER: A
What is the output of this code snippet - ` int[][] arr = {{1,2},{3,4}}; for(int i=0; i<2; i++) { for(int j=0; j<2; j++) { System.out.print(arr[i][j] + " "); } } `
A) 1 2 3 4
B) 1 3 2 4
C) 4 3 2 1
D) Compilation Error
ANSWER: A
What is the output of this code snippet using pattern matching in `switch` (Java 16+) - ` Object obj = "Hello"; switch (obj) { case String s: System.out.print(s.length()); break; default: System.out.print("Unknown"); } `
A) 5
B) Unknown
C) Compilation Error
D) None of the above
ANSWER: A
What is the output of this code snippet using the enhanced `for` loop with ArrayList - ` ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3)); for(int i: list) { System.out.print(i + " "); } `
A) 1 2 3
B) 0 1 2
C) Compilation Error
D) None of the above
ANSWER: A
What is the parent of the System Class Loader?
A) Bootstrap Class Loader
B) Extension Class Loader
C) It has no parent
D) None of the above
ANSWER: B
What is the primary advantage of polymorphism?
A) Code reusability
B) Data hiding
C) Code maintainability
D) Encapsulation
ANSWER: C
What is the primary advantage of polymorphism?
A) Data integrity
B) Code flexibility
C) Code maintainability
D) Code reusability
ANSWER: D
What is the primary advantage of setting JAVA_HOME?
A) Easier debugging
B) Simplifies the compilation process
C) Helps in IDE configuration
D) Sets the default JDK for the system
ANSWER: D
What is the primary advantage of thread-local allocations?
A) Reduce heap fragmentation
B) Minimize GC pause times
C) Avoid synchronization overhead
D) Increase CPU utilization
ANSWER: C
What is the primary advantage of using a LinkedList for stack operations?
A) Constant time for add and remove operations
B) Elements are sorted
C) Faster random access
D) Elements are unique
ANSWER: A
What is the primary advantage of using advanced memory profiling tools like YourKit?
A) Code completion
B) Real-time CPU profiling
C) Identifying memory leaks at scale
D) Syntax highlighting
ANSWER: C
What is the primary advantage of using generics?
A) Code simplicity
B) Type safety
C) Code reusability
D) Data encapsulation
ANSWER: B
What is the primary advantage of using method references?
A) Increased performance
B) Reduced code verbosity
C) Both A and B
D) None of the above
ANSWER: B
What is the primary advantage of Vector being thread-safe?
A) Improved performance
B) Suitability for use in multi-threaded environments
C) More efficient memory usage
D) None of the above
ANSWER: B
What is the primary benefit of composition over inheritance?
A) Code reusability
B) Flexibility
C) Encapsulation
D) Polymorphism
ANSWER: B
What is the primary benefit of Java's exception-handling mechanism?
A) Code optimization
B) Debugging
C) Runtime type checking
D) Robustness
ANSWER: D
What is the primary benefit of using a build tool like Maven or Gradle?
A) Code debugging
B) Dependency management
C) Code compilation
D) None of the above
ANSWER: B
What is the primary benefit of using design patterns?
A) Code simplicity
B) Code reusability
C) Problem-solving
D) All of the above
ANSWER: D
What is the primary benefit of using Java API and standard libraries?
A) Reduce memory usage
B) Reduce code complexity and development time
C) Improve application security
D) None of the above
ANSWER: B
What is the primary difference between a class and an object?
A) A class is a blueprint, and an object is an instance
B) A class is an instance, and an object is a blueprint
C) There is no difference
D) None of the above
ANSWER: A
What is the primary difference between an ArrayList and a LinkedList?
A) ArrayList uses an array, LinkedList uses a doubly-linked list
B) ArrayList is not ordered, LinkedList is ordered
C) ArrayList can contain null elements, LinkedList cannot
D) ArrayList is synchronized, LinkedList is not
ANSWER: A
What is the primary difference between an interface and an abstract class?
A) An interface can have constructors
B) An abstract class can have implemented methods
C) An interface can have instance variables
D) An abstract class can have multiple inheritance
ANSWER: B
What is the primary difference between static and non-static initialization blocks?
A) Static blocks execute when the class is loaded; non-static blocks execute when an object is created
B) Static blocks initialize only static variables; non-static blocks initialize only instance variables
C) Both are executed only once
D) Both are executed each time an object is created
ANSWER: A
What is the primary difference between Vector and ArrayList in terms of synchronization?
A) Vector is thread-safe, ArrayList is not
B) ArrayList is thread-safe, Vector is not
C) Both are thread-safe
D) Neither is thread-safe
ANSWER: A
What is the primary disadvantage of CMS Collector?
A) CPU Overhead
B) Memory Overhead
C) Fragmentation
D) Latency
ANSWER: C
What is the primary disadvantage of excessive use of native methods through JNI?
A) Reduced portability
B) Slower execution speed
C) Memory leaks
D) Both A and C
ANSWER: D
What is the primary disadvantage of inheritance?
A) It makes code less maintainable
B) It increases code coupling
C) It reduces code reusability
D) None of the above
ANSWER: B
What is the primary disadvantage of JIT compilation?
A) Increased heap memory
B) Startup latency
C) Less secure bytecode
D) Platform dependency
ANSWER: B
What is the primary disadvantage of not using encapsulation?
A) Reduced security
B) Reduced performance
C) Increased complexity
D) Both A and C
ANSWER: A
What is the primary disadvantage of setter-based dependency injection?
A) The object can be in an inconsistent state temporarily
B) Increased complexity
C) Both A and B
D) None of the above
ANSWER: A
What is the primary disadvantage of the Mark-and-Sweep algorithm?
A) Fragmentation
B) Low Throughput
C) High Latency
D) Memory Overhead
ANSWER: A
What is the primary disadvantage of the Singleton pattern?
A) Global state
B) Code complexity
C) Lack of polymorphism
D) Inflexibility
ANSWER: A
What is the primary disadvantage of the Telescoping Constructor Pattern?
A) Code unreadability
B) Code complexity
C) Reduced performance
D) All of the above
ANSWER: A
What is the primary disadvantage of using a LinkedList?
A) Slow random access
B) Slow insertions and deletions
C) Fixed size
D) It is not synchronized
ANSWER: A
What is the primary disadvantage of using an ArrayList?
A) Slow search operations
B) Slow insertions and deletions
C) Fixed size
D) It is not synchronized
ANSWER: B
What is the primary disadvantage of using CopyOnWriteArrayList?
A) Slow random access
B) Memory overhead during writes
C) Not thread-safe
D) Slow reads
ANSWER: B
What is the primary disadvantage of using explicit type casting?
A) Loss of data
B) Increased code complexity
C) Type safety
D) None of the above
ANSWER: A
What is the primary disadvantage of using reflection?
A) Type safety
B) Performance
C) Code complexity
D) All of the above
ANSWER: D
What is the primary disadvantage of using varargs?
A) Reduced performance
B) Risk of ambiguity
C) Both A and B
D) None of the above
ANSWER: B
What is the primary focus of Generational GC?
A) Latency
B) Throughput
C) Memory Efficiency
D) CPU Utilization
ANSWER: B
What is the primary focus of the Generational Garbage Collection strategy?
A) Minimize heap size
B) Minimize pauses
C) Maximize throughput
D) Maximize pause times
ANSWER: C
What is the primary focus of the latest research in GC algorithms?
A) Throughput optimization
B) Latency minimization
C) Flexibility in tuning
D) All of the above
ANSWER: D
What is the primary focus of the Shenandoah garbage collector?
A) Throughput
B) Low-latency
C) Memory efficiency
D) None of the above
ANSWER: B
What is the primary focus when optimizing GC for a real-time system?
A) Minimizing pause times
B) Maximizing throughput
C) Reducing heap size
D) Reducing CPU load
ANSWER: A
What is the primary function of the `javac` command?
A) Execution of Java programs
B) Compilation of Java source code
C) Java documentation
D) Debugging Java code
ANSWER: B
What is the primary goal of the Shenandoah garbage collector?
A) Increase throughput
B) Reduce latency
C) Reduce CPU utilization
D) Increase heap size
ANSWER: B
What is the primary language for Eclipse IDE plugins?
A) Python
B) C++
C) Java
D) Go
ANSWER: C
What is the primary objective of bytecode verification?
A) Performance improvement
B) Security
C) Reducing memory footprint
D) None of the above
ANSWER: B
What is the primary purpose of `static` variables?
A) To store class-level data
B) To store instance-level data
C) To store method-level data
D) To store package-level data
ANSWER: A
What is the primary purpose of a `static` method?
A) To be overridden
B) To operate on class variables
C) To operate on instance variables
D) To be overloaded
ANSWER: B
What is the primary purpose of a `try-catch` block within a method?
A) To throw exceptions
B) To catch and handle exceptions
C) To declare exceptions
D) To propagate exceptions
ANSWER: B
What is the primary purpose of a .gitignore file in an IDE with version control?
A) To specify which files should be committed
B) To specify which files should be ignored when committing
C) To specify which branches should be active
D) None of the above
ANSWER: B
What is the primary purpose of a constructor in Java?
A) To initialize an object
B) To create an object
C) To define methods
D) To declare variables
ANSWER: A
What is the primary purpose of a default constructor?
A) To provide default values to object data members
B) To facilitate overloading
C) To create an empty object
D) All of the above
ANSWER: D
What is the primary purpose of abstract classes?
A) To provide a common interface
B) To provide a base for subclasses
C) To provide default implementations
D) To encapsulate data
ANSWER: B
What is the primary purpose of an interface in Java?
A) Code reusability
B) Data encapsulation
C) Polymorphism
D) Define contracts for classes
ANSWER: D
What is the primary purpose of an interface?
A) Data hiding
B) Code reusability
C) Providing a contract for classes to follow
D) Polymorphism
ANSWER: C
What is the primary purpose of analyzing GC duration?
A) To optimize disk I/O
B) To optimize CPU usage
C) To minimize GC pause times
D) To maximize throughput
ANSWER: C
What is the primary purpose of annotations?
A) Code reusability
B) Data validation
C) Metadata about the code for the compiler or VM
D) Code readability
ANSWER: C
What is the primary purpose of bytecode verification in JVM?
A) Performance tuning
B) Security
C) Memory management
D) Error detection
ANSWER: B
What is the primary purpose of custom annotations?
A) Metadata
B) Code reusability
C) Data encapsulation
D) Type safety
ANSWER: A
What is the primary purpose of dependency injection?
A) Decoupling components
B) Improving performance
C) Reducing memory usage
D) None of the above
ANSWER: A
What is the primary purpose of encapsulation in OOP?
A) Code reusability
B) Data hiding
C) Polymorphism
D) Code maintainability
ANSWER: B
What is the primary purpose of encapsulation?
A) Data hiding
B) Code reuse
C) Polymorphism
D) Abstraction
ANSWER: A
What is the primary purpose of Enum types?
A) Code reusability
B) Type safety
C) Data encapsulation
D) Data abstraction
ANSWER: B
What is the primary purpose of Generics in Java?
A) Type safety
B) Code reusability
C) Data encapsulation
D) Polymorphism
ANSWER: A
What is the primary purpose of getters and setters?
A) Data hiding
B) Data validation
C) Data manipulation
D) All of the above
ANSWER: D
What is the primary purpose of inheritance?
A) Code reuse
B) Data hiding
C) Encapsulation
D) Polymorphism
ANSWER: A
What is the primary purpose of instance methods?
A) To operate on instance variables
B) To provide utility functions
C) To implement algorithms
D) To define class behavior
ANSWER: A
What is the primary purpose of instance variables?
A) To store temporary data
B) To store object state
C) To store class state
D) To store method state
ANSWER: B
What is the primary purpose of Java's Reflection API?
A) Dynamic code loading and manipulation
B) Code Obfuscation
C) File Manipulation
D) Networking
ANSWER: A
What is the primary purpose of JRE?
A) Java Development
B) Java Execution
C) Java Compilation
D) Java Documentation
ANSWER: B
What is the primary purpose of methods in Java?
A) Code reuse
B) Data encapsulation
C) Object creation
D) Polymorphism
ANSWER: A
What is the primary purpose of Object-Oriented Programming (OOP)?
A) Code reusability
B) Data hiding
C) Polymorphism
D) Encapsulation
ANSWER: A
What is the primary purpose of static variables?
A) To hold values that are common to all instances of a class
B) To hold values that are unique to each instance of a class
C) To hold temporary values within methods
D) None of the above
ANSWER: A
What is the primary purpose of the `instanceof` operator?
A) Type conversion
B) Type comparison
C) Object creation
D) Object destruction
ANSWER: B
What is the primary purpose of the `javah` command?
A) Create header files from Java classes
B) Generate heap dumps
C) Code obfuscation
D) Generate native method stubs
ANSWER: A
What is the primary purpose of the `jlink` tool?
A) Linking Java libraries
B) Creating a custom JRE
C) Compiling Java source code
D) Creating a custom JDK
ANSWER: B
What is the primary purpose of the `new` keyword in Java?
A) To create a new variable
B) To allocate memory for a new object and call the constructor
C) To call a static method
D) To define a new class
ANSWER: B
What is the primary purpose of thread synchronization?
A) To speed up program execution
B) To ensure that threads complete in a specific order
C) To prevent race conditions
D) To make sure only one thread is executing
ANSWER: C
What is the primary reason developers need JDK installed?
A) To run Java programs
B) To develop Java programs
C) To document Java programs
D) To debug Java programs
ANSWER: B
What is the primary reason for handling exceptions in constructors?
A) To ensure object integrity
B) To prevent resource leaks
C) To enforce security
D) All of the above
ANSWER: A
What is the primary reason for marking a method as static?
A) Optimization
B) Encapsulation
C) Abstraction
D) None of the above
ANSWER: A
What is the primary reason for optimizing a loop?
A) To make the code shorter
B) To reduce CPU usage
C) To make the code more readable
D) To make the loop run infinitely
ANSWER: B
What is the primary reason for the division of Java heap into Young and Old generations?
A) Performance optimization
B) Security
C) Debugging
D) Concurrency
ANSWER: A
What is the primary reason for using getters and setters?
A) Code readability
B) Code reusability
C) Data validation
D) Code maintainability
ANSWER: C
What is the primary reason for using legacy methods in Vector?
A) Performance
B) Code readability
C) Backward compatibility
D) Thread safety
ANSWER: C
What is the primary reason for using method overloading?
A) Code reusability
B) Code maintainability
C) Flexibility
D) Data hiding
ANSWER: C
What is the primary reason to avoid logic that throws exceptions in constructors?
A) To ensure object integrity
B) To make debugging easier
C) To avoid incomplete object creation
D) Both A and C
ANSWER: D
What is the primary reason to follow constructor best practices?
A) Code readability
B) Code reusability
C) Code maintainability
D) All of the above
ANSWER: D
What is the primary reason to make a method `private`?
A) To allow subclassing
B) To disallow subclassing
C) To hide the method implementation
D) To expose the method implementation
ANSWER: C
What is the primary reason to use custom annotations?
A) Code readability
B) Code reusability
C) Data validation
D) Both A and C
ANSWER: D
What is the primary reason to use Object-Oriented Programming?
A) To create complex programs easily
B) To create small programs quickly
C) To make debugging easier
D) To reduce code redundancy
ANSWER: D
What is the primary reason to use the 'final' keyword in Java?
A) Polymorphism
B) Garbage Collection
C) Immutability
D) Dynamic Binding
ANSWER: C
What is the primary responsibility of the Extension Class Loader?
A) To load user classes
B) To load core Java classes
C) To load extension libraries
D) To load native methods
ANSWER: C
What is the primary role of `javah` utility in JNI?
A) To compile Java code
B) To generate C/C++ header files
C) To execute Java code
D) To deploy Java applications
ANSWER: B
What is the primary role of the `System` class in the Java standard library?
A) Garbage Collection
B) I/O Operations
C) System-level operations like reading environment variables
D) Multithreading
ANSWER: C
What is the primary role of the Java Native Interface (JNI)?
A) Error handling
B) Interfacing with native libraries
C) Memory management
D) Networking
ANSWER: B
What is the primary role of the Java Virtual Machine (JVM)?
A) Compilation of source code
B) Execution of bytecode
C) Dynamic code analysis
D) None of the above
ANSWER: B
What is the primary role of the JVM in the JRE?
A) Compilation
B) Execution
C) Debugging
D) Documentation
ANSWER: B
What is the primary usage of the 'this' keyword?
A) To eliminate the ambiguity between instance variables and parameters
B) To explicitly invoke a constructor
C) To invoke a static method
D) All of the above
ANSWER: A
What is the primary use of a `final` variable?
A) To create constants
B) To prevent inheritance
C) To prevent method overriding
D) To indicate deprecation
ANSWER: A
What is the primary use of a Singleton design pattern?
A) To ensure a class has multiple instances
B) To ensure a class has only one instance
C) To share instances across multiple classes
D) None of the above
ANSWER: B
What is the primary use of Java Native Interface (JNI)?
A) To interface with HTML
B) To call native methods written in languages like C or C++
C) To improve garbage collection
D) To enhance multithreading capabilities
ANSWER: B
What is the primary use-case for `jlink`?
A) To create minimal JREs tailored to specific applications
B) To link Java and native libraries
C) To compile multiple modules into a single JAR
D) None of the above
ANSWER: A
What is the proper way to begin a Javadoc comment?
A) `/**`
B) `\\*`
C) `/*`
D) `//*`
ANSWER: A
What is the purpose of `elements()` method in a Vector?
A) To return an Enumeration of the elements
B) To return an Iterator of the elements
C) To return a List of the elements
D) To sort the elements
ANSWER: A
What is the purpose of `System.console()` in Java?
A) Reading input
B) Writing output
C) Both reading input and writing output
D) None of the above
ANSWER: C
What is the purpose of a `final` method?
A) To prevent overriding
B) To prevent overloading
C) To make the method abstract
D) None of the above
ANSWER: A
What is the purpose of a build.gradle file in a Gradle project?
A) To define project dependencies
B) To configure the build process
C) To store environment variables
D) Both A and B
ANSWER: D
What is the purpose of a default constructor?
A) To provide default values to object attributes
B) To create an instance of a class
C) To override methods
D) To implement interfaces
ANSWER: A
What is the purpose of a labeled `break` statement in Java?
A) To exit only the innermost loop
B) To exit all nested loops
C) To exit a specific loop specified by the label
D) To restart a specific loop specified by the label
ANSWER: C
What is the purpose of a non-static initialization block?
A) To initialize static variables
B) To initialize instance variables
C) To perform complex calculations
D) Both B and C
ANSWER: D
What is the purpose of a parameterized constructor?
A) To initialize objects
B) To create multiple instances of a class
C) To initialize object data members at the time of object creation
D) To define default values for data members
ANSWER: C
What is the purpose of an anonymous inner class?
A) Code reusability
B) Encapsulation
C) Instantiating interfaces or extending classes inline
D) All of the above
ANSWER: C
What is the purpose of an initialization block in Java?
A) To initialize static variables
B) To initialize instance variables
C) To initialize local variables
D) To initialize both static and instance variables
ANSWER: D
What is the purpose of Class.forName() in Java?
A) To load a class dynamically
B) To check the integrity of bytecode
C) To initialize a class
D) To terminate the JVM
ANSWER: A
What is the purpose of constructor overloading?
A) To provide multiple ways to initialize an object
B) To override the superclass constructor
C) To enhance code readability
D) To improve code performance
ANSWER: A
What is the purpose of creating custom annotations?
A) To add metadata to the code
B) To create immutable classes
C) To make methods synchronized
D) All of the above
ANSWER: A
What is the purpose of instance methods?
A) To perform actions on static variables
B) To perform actions on instance variables
C) To perform actions unrelated to an object
D) None of the above
ANSWER: B
What is the purpose of making a constructor private?
A) To disallow object creation from outside the class
B) To allow subclassing
C) To enforce singleton pattern
D) Both A and C
ANSWER: D
What is the purpose of making a constructor protected?
A) To restrict object creation to the same package or subclasses
B) To allow object creation from any class
C) To disallow object creation
D) None of the above
ANSWER: A
What is the purpose of method overloading?
A) Code reuse
B) Polymorphism
C) Encapsulation
D) Data hiding
ANSWER: B
What is the purpose of setting the JAVA_HOME variable?
A) To specify the location of Java documentation
B) To specify the location of the Java Development Kit
C) To specify Java compiler settings
D) To specify the Java heap size
ANSWER: B
What is the purpose of static code analyzers like SonarQube?
A) To dynamically analyze the performance of the application
B) To find vulnerabilities and bugs in the code
C) To check for compilation errors
D) None of the above
ANSWER: B
What is the purpose of the `-verbose:gc` flag?
A) Enables thread dumps
B) Enables garbage collection logging
C) Sets maximum heap size
D) Enables class loading tracing
ANSWER: B
What is the purpose of the `-XX:MaxGCPauseMillis` option?
A) To set the maximum size of the heap
B) To set the maximum GC pause time
C) To set the maximum number of threads for GC
D) None of the above
ANSWER: B
What is the purpose of the `-XX:SurvivorRatio` flag?
A) Control the ratio of Eden space to Survivor space
B) Control the ratio of Old space to Young space
C) Control the heap size
D) Control the stack size
ANSWER: A
What is the purpose of the `@Deprecated` annotation?
A) To indicate that the method is outdated
B) To indicate that the method is experimental
C) To indicate that the method is optional
D) To indicate that the method is abstract
ANSWER: A
What is the purpose of the `@FunctionalInterface` annotation?
A) To indicate that the interface is abstract
B) To indicate that the interface is functional and should have exactly one abstract method
C) To indicate that the interface can have multiple methods
D) To indicate that the interface is deprecated
ANSWER: B
What is the purpose of the `@SafeVarargs` annotation?
A) To suppress warnings for all varargs
B) To suppress warnings for non-reifiable varargs
C) To indicate that the method is safe for varargs
D) To indicate that the method uses unsafe varargs
ANSWER: B
What is the purpose of the `BufferedReader` class in Java?
A) Write text to a character-output stream
B) Read text from a character-input stream
C) Read bytes from an input stream
D) None of the above
ANSWER: B
What is the purpose of the `CopyOnWriteArrayList`?
A) Improve write performance
B) Allow safe iteration in a multi-threaded environment
C) Reduce memory usage
D) None of the above
ANSWER: B
What is the purpose of the `elements()` method in the Vector class?
A) To return an Iterator
B) To return an Enumeration of the elements
C) To return a ListIterator
D) To return an array of elements
ANSWER: B
What is the purpose of the `instanceof` operator?
A) To check data type
B) To check if an object is an instance of a particular class
C) To check if a variable is initialized
D) To check if a variable is null
ANSWER: B
What is the purpose of the `javac` tool?
A) To compile Java source code into bytecode
B) To execute compiled Java bytecode
C) To package compiled classes into a JAR file
D) To decompile class files into source code
ANSWER: A
What is the purpose of the `jdeps` command?
A) To find class dependencies
B) To execute Java bytecode
C) To debug Java programs
D) To compile Java source code
ANSWER: A
What is the purpose of the `readResolve` method in the context of Singleton?
A) To return the singleton instance during deserialization
B) To create a new instance during deserialization
C) To break the singleton property
D) None of the above
ANSWER: A
What is the purpose of the `return` keyword in a method?
A) To specify the return type
B) To exit the method
C) To return a value from the method
D) B and C
ANSWER: D
What is the purpose of the `System.gc()` method?
A) It forces garbage collection
B) It suggests garbage collection
C) It disables garbage collection
D) None of the above
ANSWER: B
What is the purpose of the `throws` clause in a method signature?
A) To catch exceptions
B) To throw exceptions back to the caller
C) To specify the exceptions that a method can throw
D) To handle exceptions within the method
ANSWER: C
What is the purpose of the 'finalize' method in Java?
A) To deallocate memory manually
B) To perform cleanup actions before garbage collection
C) To allocate memory for an object
D) None of the above
ANSWER: B
What is the purpose of the 'PermGen' space in older versions of JVM?
A) To store the class metadata
B) To store the objects
C) To store the return addresses for methods
D) None of the above
ANSWER: A
What is the purpose of the 'Verification' phase in class loading?
A) To allocate memory for class variables
B) To check the bytecode for illegal code
C) To resolve symbolic references in the class
D) None of the above
ANSWER: B
What is the purpose of the enhanced for-loop?
A) Simplify syntax for iterating through Collections
B) Improve performance of iterations
C) Enable parallel execution of iterations
D) None of the above
ANSWER: A
What is the purpose of the JVM option `-XX:NewRatio`?
A) To set the size of the Eden space
B) To set the ratio of old to young generation sizes
C) To set the size of the stack
D) To set the size of the permanent generation
ANSWER: B
What is the purpose of using assertions in a program?
A) To optimize the code
B) To enable logging
C) To check assumptions and enforce invariants
D) To handle exceptions
ANSWER: C
What is the result of `(double) 5 / 2`?
A) 2
B) 2.5
C) 3
D) Compilation error
ANSWER: B
What is the result of `(int) 5.6` in Java?
A) 5
B) 6
C) Compilation Error
D) None of the above
ANSWER: A
What is the result of `10 / 3` when both numbers are int?
A) 3
B) 3.33
C) Compilation Error
D) 4
ANSWER: A
What is the result of `10.0 / 3`?
A) 3
B) 3.33
C) 3.3333333333333335
D) 4
ANSWER: C
What is the result of `3 + "Hello" + 4`?
A) 7Hello
B) Hello7
C) Compilation Error
D) 3Hello4
ANSWER: D
What is the result of `3 + 4 + "Hello"`?
A) 7Hello
B) Hello7
C) Compilation Error
D) 34Hello
ANSWER: A
What is the result of `Class.forName("java.lang.String")` in Java reflection?
A) Loads the String class
B) Creates a new String object
C) Throws an exception
D) None of the above
ANSWER: A
What is the result of `Integer.MAX_VALUE + 1`?
A) Integer.MIN_VALUE
B) Integer.MAX_VALUE
C) Compilation error
D) Runtime error
ANSWER: A
What is the result of `System.out.println(new String("Java").equals("Java"));`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: A
What is the result of compiling and running the following code? `class MyClass { MyClass() { this(5); } MyClass(int x) { this(); } public static void main(String[] args) { new MyClass(); } }`
A) Compilation Error
B) StackOverflowError
C) Runs successfully without any output
D) None of the above
ANSWER: B
What is the result of executing a Java program with a syntax error?
A) Logical error
B) Compilation error
C) Runtime error
D) No error
ANSWER: B
What is the result of making a constructor public?
A) The class can be instantiated from any class
B) The class can be subclassed
C) Both A and B
D) None of the above
ANSWER: A
What is the result of the `javac` command?
A) A compiled Java program
B) A .jar file
C) A .class file containing bytecode
D) None of the above
ANSWER: C
What is the result of the boolean expression ` !(true || false) && (false && true) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the result of the boolean expression ` (5 > 3 && 4 < 2) || (3 < 4 && 2 > 1) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the result of the boolean expression ` 5 > 3 && 4 < 2 `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the result of the expression ` !(true && false) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the result of the expression `10 % 3`?
A) 3
B) 1
C) 0
D) 10
ANSWER: B
What is the result of the following expression: `(double) 10 / 3`?
A) 3
B) 3.33
C) 3.3333333333333335
D) Compilation error
ANSWER: C
What is the result of the operation `10 / 3` if both operands are of type `int`?
A) 3.33
B) 3
C) 4
D) Compilation error
ANSWER: B
What is the retention policy of the `@Override` annotation?
A) Source
B) Class
C) Runtime
D) None of the above
ANSWER: A
What is the return type of `Scanner.hasNext()`?
A) int
B) boolean
C) void
D) String
ANSWER: B
What is the return type of `Scanner.next()`?
A) String
B) char
C) Object
D) byte[]
ANSWER: A
What is the return type of `Scanner.nextInt()`?
A) short
B) long
C) int
D) float
ANSWER: C
What is the return type of `subList` method?
A) ArrayList
B) List
C) SubList
D) Collection
ANSWER: B
What is the return type of `toArray()` method when used on a Vector?
A) Object[]
B) E[]
C) Vector[]
D) List[]
ANSWER: A
What is the return type of a constructor?
A) void
B) The class type
C) Object
D) None of the above
ANSWER: D
What is the return type of a constructor?
A) void
B) The class type
C) int
D) No return type
ANSWER: D
What is the return type of a constructor?
A) void
B) The class type
C) No return type
D) Any type
ANSWER: C
What is the return type of a lambda expression in Java?
A) Object
B) Any functional interface
C) void
D) Lambda
ANSWER: B
What is the return type of a method that does not return a value?
A) `null`
B) `void`
C) `int`
D) `Object`
ANSWER: B
What is the return type of a method that doesn't return any value?
A) `null`
B) `void`
C) `int`
D) `Object`
ANSWER: B
What is the return type of the `clone()` method in Java?
A) Object
B) void
C) The type of the object being cloned
D) None of the above
ANSWER: A
What is the return type of the `hashCode()` method in the Object class?
A) int
B) long
C) double
D) Object
ANSWER: A
What is the return type of the `length()` method when applied to a String?
A) byte
B) int
C) short
D) long
ANSWER: B
What is the return type of the `list.get(int index)` method?
A) int
B) Object
C) Element type (E)
D) Boolean
ANSWER: C
What is the return type of the `subList(int fromIndex, int toIndex)` method?
A) Vector
B) List
C) ArrayList
D) LinkedList
ANSWER: B
What is the return type when you collect a Stream back to a Vector?
A) Object
B) Vector
C) List
D) Collection
ANSWER: C
What is the risk of having a constructor with a large number of parameters?
A) Decreased readability
B) Increased likelihood of errors
C) Both A and B
D) None of the above
ANSWER: C
What is the risk of not having a base case in a recursive method?
A) Compilation Error
B) Stack Overflow Error
C) Syntax Error
D) No Risk
ANSWER: B
What is the risk of removing synchronization from a Vector in a multi-threaded environment?
A) Risk of data corruption
B) Risk of deadlock
C) No risk
D) Risk of faster execution
ANSWER: A
What is the role of `JVM` in `JDK`?
A) Code compilation
B) Garbage collection
C) Bytecode execution
D) API documentation
ANSWER: C
What is the role of a constructor in object-oriented programming?
A) To create an object
B) To initialize an object
C) To finalize an object
D) To destroy an object
ANSWER: B
What is the role of a Socket in Java?
A) Encryption
B) Two-way communication link between two programs
C) File Handling
D) Both A and B
ANSWER: B
What is the role of an `else` clause in an `if` statement?
A) Executes when the `if` condition is true
B) Executes when the `if` condition is false
C) Executes regardless of the `if` condition
D) Executes only if an error occurs in the `if` block
ANSWER: B
What is the role of control structures in a program's flow?
A) Data storage
B) Error handling
C) Input/output operations
D) Directing the sequence of execution
ANSWER: D
What is the role of the `-XX:ParallelGCThreads` flag?
A) Specifies the number of threads used in parallel phases
B) Specifies the number of threads used in concurrent phases
C) Specifies the total number of GC threads
D) Specifies the maximum heap size
ANSWER: A
What is the role of the `java` command-line tool?
A) Compilation
B) Execution
C) Both A and B
D) None of the above
ANSWER: B
What is the role of the `main` method in a Java program?
A) Provides metadata
B) Defines constants
C) Serves as the entry point for execution
D) Performs initial setup
ANSWER: C
What is the role of the Native Method Stack?
A) Execute native methods
B) Load classes
C) Store Objects
D) Store local variables
ANSWER: A
What is the role of the PATH variable in a system?
A) To specify directory for temporary files
B) To specify locations where executable files are stored
C) To set default permissions for new files
D) To define the hostname for the system
ANSWER: B
What is the role of thread-local allocations in a Java application?
A) Improve disk I/O
B) Optimize network latency
C) Minimize synchronization overhead
D) Maximize heap utilization
ANSWER: C
What is the scope of a local variable declared inside a method in Java?
A) Inside the method only
B) Inside the class only
C) Inside the package only
D) Global scope
ANSWER: A
What is the scope of a parameter variable in a method?
A) Inside the method only
B) Inside the class only
C) Inside the package only
D) Global scope
ANSWER: A
What is the scope of a parameter variable in a method?
A) Inside the method only
B) Inside the class only
C) Inside the package only
D) Global scope
ANSWER: A
What is the scope of a static variable?
A) Throughout the class
B) Throughout the package
C) Throughout the program
D) Throughout the method
ANSWER: C
What is the scope of an instance variable in Java?
A) Inside the method only
B) Inside the class only
C) Inside the package only
D) Global scope
ANSWER: B
What is the scope of instance variables?
A) Within the class
B) Within the package
C) Within the method
D) None of the above
ANSWER: A
What is the signature of a default constructor?
A) It has the same name as the class and no parameters
B) It has the same name as the class and one parameter
C) It has the name 'default' and no parameters
D) It has the name 'constructor' and no parameters
ANSWER: A
What is the signature of the `main` method in a JNI C/C++ program?
A) `public static void main(String[] args)`
B) `JNIEXPORT void JNICALL Java_ClassName_MethodName(JNIEnv *, jobject)`
C) `int main()`
D) None of the above
ANSWER: B
What is the significance of a Vector being synchronized?
A) It can safely be used in multi-threaded environments
B) It has better performance than ArrayList
C) It can hold null elements
D) It allows duplicates
ANSWER: A
What is the significance of the 'public static void main(String[] args)' method in Java?
A) It serves as the entry point for multithreaded applications
B) It must be present for a Java class to compile
C) It serves as the entry point for Java applications
D) It initializes all global variables
ANSWER: C
What is the significance of the number 42 in the history of Java?
A) It was the 42nd project at Sun Microsystems
B) It's the ASCII value of the asterisk used as a wildcard in imports
C) It was the age of James Gosling when he started working on Java
D) None of the above
ANSWER: B
What is the Singleton design pattern primarily used for?
A) To ensure a class has only one instance
B) To create objects
C) To encapsulate algorithms
D) To facilitate communication between objects
ANSWER: A
What is the size of `int` data type in Java?
A) 2 bytes
B) 4 bytes
C) 6 bytes
D) 8 bytes
ANSWER: B
What is the size of a `byte` data type in Java?
A) 1 bit
B) 8 bits
C) 16 bits
D) 32 bits
ANSWER: B
What is the size of a `char` data type in Java?
A) 1 byte
B) 2 bytes
C) 4 bytes
D) 8 bytes
ANSWER: B
What is the size of a char data type in Java?
A) 1 byte
B) 2 bytes
C) 4 bytes
D) 8 bytes
ANSWER: B
What is the size of a double data type in Java?
A) 4 bytes
B) 8 bytes
C) 16 bytes
D) 2 bytes
ANSWER: B
What is the size of the `long` data type in Java?
A) 4 bytes
B) 8 bytes
C) 2 bytes
D) 16 bytes
ANSWER: B
What is the standard way to install JDK on macOS?
A) Homebrew
B) Installer package
C) apt-get
D) tarball
ANSWER: B
What is the superclass of all arrays in Java?
A) Collection
B) Object
C) Array
D) List
ANSWER: B
What is the superclass of all classes in Java?
A) Object
B) Class
C) Super
D) None of the above
ANSWER: A
What is the superclass of all exception classes?
A) Object
B) Throwable
C) Error
D) Exception
ANSWER: B
What is the Telescoping Constructor Pattern?
A) A pattern where each constructor calls a more specific constructor in the hierarchy
B) A pattern where a constructor has a large number of parameters, some of which have default values
C) A pattern that allows object creation without specifying the type
D) None of the above
ANSWER: B
What is the time complexity of `addAll` method for an ArrayList?
A) O(1)
B) O[No]
C) O(n log n)
D) O(n^2)
ANSWER: B
What is the time complexity of `Collections.sort()` for a Vector?
A) O(1)
B) O(n log n)
C) O[No]
D) O(n^2)
ANSWER: B
What is the time complexity of `get(int index)` in a Vector?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: A
What is the time complexity of adding an element at the end of a LinkedList?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: A
What is the time complexity of Collections.sort() for an ArrayList?
A) O[No]
B) O(n log n)
C) O(n^2)
D) O(log n)
ANSWER: B
What is the time complexity of sorting a List using `stream().sorted()`?
A) O[No]
B) O(n log n)
C) O(n^2)
D) O(log n)
ANSWER: B
What is the time complexity of the `addElement(E obj)` method in a Vector?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: A
What is the time complexity of the `contains(Object o)` method in a LinkedList?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: B
What is the time complexity of the `get()` method in an ArrayList?
A) O(1)
B) O[No]
C) O(n^2)
D) O(log n)
ANSWER: A
What is the time complexity of the `get(int index)` method in a LinkedList?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: B
What is the time complexity of the `get(int index)` method in a Vector?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: A
What is the time complexity of the `indexOf` method in an ArrayList?
A) O(1)
B) O(log n)
C) O[No]
D) O(n^2)
ANSWER: C
What is the time complexity of the `removeElementAt(int index)` method in a Vector?
A) O(1)
B) O[No]
C) O(log n)
D) O(n^2)
ANSWER: B
What is the type of a lambda expression in Java?
A) Object
B) Any functional interface
C) void
D) Lambda
ANSWER: B
What is the typical behavior of the 'Linking' phase in the class loading process?
A) Verifying bytecode
B) Assigning memory for class variables
C) Resolving symbolic references
D) Both A and C
ANSWER: D
What is the typical range of thread priority in Java?
A) 1 to 10
B) 0 to 9
C) 1 to 5
D) 1 to 100
ANSWER: A
What is the use of the `.editorconfig` file in an IDE?
A) To store the layout and preferences of the IDE
B) To define coding styles and formatting
C) To list installed plugins
D) None of the above
ANSWER: B
What is the value of `Character.MIN_VALUE`?
A) 0
B) 1
C) 65
D) '\u0000'
ANSWER: D
What is the value of `y` after the following code snippet - ` int x = 5; int y = (x > 5) ? (x - 1) : (x + 1); `
A) 5
B) 4
C) 6
D) 0
ANSWER: C
What is the value of the boolean expression ` !(5 > 3) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the value of the boolean expression ` !(false || true) && (true && !false) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the value of the boolean expression ` (false || true) && !(true && false) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the boolean expression ` (true && false) || !(false && true) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the expression ` !(true || false) `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the value of the expression ` !false && !false `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the expression ` 5 > 3 || 4 < 2 `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the expression ` false && !false `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the value of the expression ` false && false || true `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the expression ` false || !true `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: B
What is the value of the expression ` true && !false `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the expression ` true || !true `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the value of the expression ` true || false `?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What is the visibility of the default constructor?
A) public
B) private
C) protected
D) The same as the class itself
ANSWER: D
What is the Z Garbage Collector (ZGC) optimized for?
A) Low latency
B) High throughput
C) Memory efficiency
D) None of the above
ANSWER: A
What is Tiered Compilation in JVM?
A) A single level of optimization for bytecode
B) Multiple levels of optimization for different parts of bytecode
C) Compilation done in parallel with interpretation
D) None of the above
ANSWER: B
What is unboxing?
A) Automatic conversion of reference types to primitive types
B) Automatic conversion of primitive types to reference types
C) Unpacking an array into individual elements
D) None of the above
ANSWER: A
What is usually the primary aim of garbage collection tuning?
A) Increase CPU usage
B) Decrease memory usage
C) Balance latency and throughput
D) Reduce disk I/O
ANSWER: C
What JVM argument enables class verification?
A) -Xverify
B) -Xnoagent
C) -Xmx
D) -Xss
ANSWER: A
What JVM flag sets the thread stack size?
A) -Xss
B) -Xms
C) -Xmx
D) None of the above
ANSWER: A
What kind of applications can be adversely affected by inappropriate GC tuning?
A) Real-time systems
B) High-throughput systems
C) Microservices
D) All of the above
ANSWER: D
What kind of applications can benefit from using the Parallel Garbage Collector?
A) Low-latency applications
B) Multi-threaded server applications
C) Real-time systems
D) Desktop applications
ANSWER: B
What kind of bytecode does the Just-In-Time Compiler (JIT) typically focus on?
A) Frequently executed
B) Rarely executed
C) Never executed
D) None of the above
ANSWER: A
What kind of inner classes can be static?
A) Member inner classes
B) Local inner classes
C) Anonymous inner classes
D) None of the above
ANSWER: A
What kind of issues can static code analyzers like SonarQube not identify?
A) Syntax errors
B) Logical errors
C) Security vulnerabilities
D) None of the above
ANSWER: B
What kind of language is Java?
A) Interpreted
B) Compiled
C) Both A and B
D) None of the above
ANSWER: C
What kind of reference prevents an object from being collected?
A) Soft Reference
B) Weak Reference
C) Strong Reference
D) Phantom Reference
ANSWER: C
What kind of software is JDK?
A) Proprietary software
B) Freeware
C) Open-source software
D) Shareware
ANSWER: C
What kind of synchronization does Vector use?
A) Method-level synchronization
B) Object-level synchronization
C) Block-level synchronization
D) Volatile variables
ANSWER: A
What latest GC algorithm aims to improve performance by leveraging machine learning techniques?
A) G1
B) ZGC
C) Epsilon
D) None of the above
ANSWER: D
What led to the pivoting of Project Oak towards Internet programming?
A) The rise of the World Wide Web
B) Failure in the interactive TV market
C) Internal restructuring at Sun Microsystems
D) A and B
ANSWER: D
What major feature was introduced in Java 5 (or 1.5)?
A) Lambda Expressions
B) Generics
C) Enumerations
D) Modules
ANSWER: B
What method does the Iterator interface provide to remove the last element returned by the iterator?
A) remove()
B) delete()
C) erase()
D) discard()
ANSWER: A
What method will you use for multi-level sorting in a Vector?
A) `Collections.sort()`
B) `Vector.sort()`
C) `Collections.multiSort()`
D) `Vector.multiSort()`
ANSWER: A
What metric can `jstat` NOT monitor?
A) Heap Memory
B) Method Area
C) CPU Usage
D) Class Loading
ANSWER: C
What new feature was introduced in JDK 17?
A) Sealed classes
B) Record classes
C) Pattern matching
D) Vector API
ANSWER: A
What paradigm does Java principally follow?
A) Procedural
B) Object-oriented
C) Functional
D) Logical
ANSWER: B
What part of JVM holds local variables and partial results?
A) Method Area
B) Heap Area
C) Stack Area
D) Native Method Stack
ANSWER: C
What part of the heap is emptied during a Minor GC event?
A) Old Generation
B) Eden Space
C) Young Generation
D) Metaspace
ANSWER: C
What part of the Java heap is responsible for holding metadata such as classes and methods?
A) Young Generation
B) Old Generation
C) PermGen
D) Eden Space
ANSWER: C
What role does a Security Manager play in the Java Security Architecture?
A) Encrypts Java Bytecode
B) Governs access to system resources
C) Manages HTTPS certificates
D) None of the above
ANSWER: B
What role does the `JRE` play in the `JDK`?
A) Provides runtime environment
B) Serves as the compiler
C) Manages garbage collection only
D) Serves as the debugger
ANSWER: A
What security risks are associated with using the Java Reflection API?
A) Breaking of encapsulation
B) Breaking Singleton pattern
C) Both A and B
D) None of the above
ANSWER: C
What should you do to ensure that you don't get IndexOutOfBoundsException while setting an element at a specific index in Vector?
A) Check if the index is less than the size of the Vector
B) Use try-catch to handle the exception
C) Use the `contains()` method
D) A and B
ANSWER: D
What should you modify to permanently set PATH variable for JDK on Linux?
A) .bashrc
B) /etc/environment
C) .bash_profile
D) /etc/profile
ANSWER: B
What step occurs between Bytecode Verification and Execution?
A) Source Code Creation
B) Compilation
C) Class Loading
D) Just-In-Time Compilation
ANSWER: D
What triggers a StackOverflowError?
A) Full heap space
B) Uncontrolled recursion
C) Garbage collection cycles
D) None of the above
ANSWER: B
What triggers the JVM shutdown phase?
A) When `System.exit()` is called
B) When the `main()` method completes
C) Both A and B
D) None of the above
ANSWER: C
What type of bytecode optimization does the JIT compiler perform?
A) Constant folding
B) Dead code elimination
C) Inline expansion
D) All of the above
ANSWER: D
What type of data does an `if` statement condition evaluate to?
A) Integer
B) Boolean
C) String
D) Float
ANSWER: B
What type of file contains Java bytecode?
A) .java
B) .class
C) .jar
D) .javac
ANSWER: B
What type of inheritance does Java support?
A) Multiple
B) Single
C) Multilevel
D) All of the above
ANSWER: C
What utility compiles Java source code into bytecode?
A) java
B) javac
C) jar
D) javap
ANSWER: B
What was a significant change Oracle made to Java release cycles?
A) Introduced LTS versions
B) Shortened the release cycle
C) Stopped releasing public updates
D) All of the above
ANSWER: D
What was Java initially called before being renamed?
A) C++
B) JScript
C) Oak
D) Pine
ANSWER: C
What was one major lawsuit that occurred post-acquisition related to Java?
A) Oracle vs. IBM
B) Oracle vs. Google
C) Oracle vs. Microsoft
D) Oracle vs. Amazon
ANSWER: B
What was one of the key assets that Oracle acquired from Sun Microsystems?
A) MySQL
B) Java
C) Solaris
D) All of the above
ANSWER: D
What was the approximate value of Oracle's acquisition of Sun Microsystems?
A) $4.5 billion
B) $5.6 billion
C) $7.4 billion
D) $9.3 billion
ANSWER: C
What was the fate of the JavaOne conference after the acquisition?
A) Continued by Oracle
B) Discontinued
C) Became Oracle OpenWorld
D) Became independent
ANSWER: A
What was the first Long Term Support (LTS) version of Java?
A) 8
B) 9
C) 10
D) 11
ANSWER: A
What was the first public implementation of Oak called?
A) Oak 1.0
B) WebRunner
C) Java 1.0
D) GreenTalk
ANSWER: C
What was the first web browser to support Java applets?
A) Internet Explorer
B) Netscape Navigator
C) Google Chrome
D) Safari
ANSWER: B
What was the impact of the acquisition on Java EE?
A) Became a paid service
B) Transferred to the Eclipse Foundation
C) Discontinued
D) Rebranded as Oracle EE
ANSWER: B
What was the initial device target for the Oak language?
A) Personal Computers
B) Mobile Phones
C) Handheld devices for home appliances
D) Servers
ANSWER: C
What was the initial name of the Java project at Sun Microsystems?
A) J++
B) Oak
C) J#
D) Maple
ANSWER: B
What was the initial target audience for Java?
A) Web developers
B) Systems engineers
C) Embedded systems developers
D) Academic researchers
ANSWER: C
What was the key feature of Java that differentiated it from C++?
A) Pointers
B) Garbage Collection
C) Multiple Inheritance
D) Operator Overloading
ANSWER: B
What was the mascot of Project Oak?
A) Duke
B) An Oak Tree
C) A green robot
D) A coffee cup
ANSWER: A
What was the original bytecode interpreter for Oak called?
A) Duke
B) Star7
C) OakVM
D) GreenTalk
ANSWER: B
What was the original language that inspired Project Oak?
A) C++
B) C#
C) Python
D) Ruby
ANSWER: A
What was the original name for Java?
A) J++
B) Oak
C) C#
D) JScript
ANSWER: B
What was the original slogan for Java?
A) Code Less, Do More
B) Just Press Play
C) Write Once, Run Anywhere
D) Power to the Programmers
ANSWER: C
What was the original slogan used for Project Oak?
A) Write Once, Run Anywhere
B) Code Freely
C) Oak: The Future of Programming
D) Oak: The Universal Language
ANSWER: D
What was the primary focus of Project Oak when it was initially started?
A) Web Development
B) Operating Systems
C) Interactive Television
D) Database Management
ANSWER: C
What was the primary motivation for the development of Java?
A) Web development
B) Operating systems
C) Embedded systems
D) Scientific computation
ANSWER: C
What was the primary reason Project Oak didn't immediately succeed in its original focus area?
A) Lack of funding
B) The technology for interactive TV was not yet mature
C) Inadequate team size
D) Competition from other languages
ANSWER: B
What was the project name for local-variable type inference (`var`) in Java?
A) Project Valhalla
B) Project Panama
C) Project Loom
D) Project Amber
ANSWER: D
What was the role of Mike Sheridan in Project Oak?
A) Core developer
B) Project manager
C) Marketing lead
D) None of the above
ANSWER: B
What was the significance of the "Star7" device in relation to Project Oak?
A) It was the first device to run Oak
B) It was a competitor to Oak
C) It was the code name for Oak's compiler
D) None of the above
ANSWER: A
What will `indexOf(Object o)` return if the object is not found in the Vector?
A) -1
B) 0
C) null
D) Throw an exception
ANSWER: A
What will `lastIndexOf(Object o)` return if the object is not found in the Vector?
A) -1
B) 0
C) null
D) Throw an exception
ANSWER: A
What will `list.indexOf(element)` return if the element is not found?
A) 0
B) -1
C) null
D) Throws NoSuchElementException
ANSWER: B
What will `list.subList(0, list.size())` return?
A) A new list with all elements
B) A view of the original list
C) An empty list
D) UnsupportedOperationException
ANSWER: B
What will `subList(2, 2)` return?
A) A sublist containing the element at index 2
B) An empty list
C) Throws an IndexOutOfBoundsException
D) A sublist from index 2 to the end of the Vector
ANSWER: B
What will be printed by the code - ` for(int i = 0; i < 3; i--){ System.out.print(i + " "); } `
A) 0 1 2
B) 0 -1 -2 -3 ...
C) The code won't compile
D) The code will run infinitely
ANSWER: D
What will be printed by the following `while` loop - ` int x = 1; while(x-- > 0) { System.out.print(x + " "); } `
A) 1
B) 0
C) 1 0
D) No output
ANSWER: B
What will be the output of `System.out.println("Java" == "Java");`?
A) true
B) false
C) Compilation error
D) NullPointerException
ANSWER: A
What will be the output of the following code - ` enum Day { MON, TUE, WED }; Day day = Day.MON; switch(day) { case MON: System.out.print("Monday"); break; default: System.out.print("Other"); } `
A) Monday
B) Other
C) Compilation Error
D) None of the above
ANSWER: A
What will be the output of the following code - ` enum Day { MON, TUE, WED }; Day day = Day.WED; switch(day) { case MON: System.out.print("Monday"); break; default: System.out.print("Other"); } `
A) Monday
B) Other
C) Compilation Error
D) None of the above
ANSWER: B
What will be the output of the following code - ` int x = 2; int y = x != 2 ? 5 : 3; System.out.print[Yes]; `
A) 5
B) 3
C) 2
D) Compilation Error
ANSWER: B
What will be the output of the following code - ` public class MyClass { public MyClass() { System.out.print("Default constructor "); } public static void main(String[] args) { MyClass obj1 = new MyClass(); MyClass obj2 = new MyClass(); } } `
A) Default constructor
B) Default constructor Default constructor
C) Compilation Error
D) No output
ANSWER: B
What will be the output of the following code snippet - ` enum Color { RED, GREEN, BLUE }; Color c = Color.GREEN; switch(c) { case RED: System.out.print("Red"); break; case GREEN: System.out.print("Green"); break; case BLUE: System.out.print("Blue"); break; } `
A) Red
B) Green
C) Blue
D) Compilation Error
ANSWER: B
What will be the output of the following code snippet - ` int x = 2; int y = x == 2 ? 5 : 3; System.out.print[Yes]; `
A) 5
B) 3
C) 2
D) Compilation Error
ANSWER: A
What will be the output of the following code snippet - ` int[][] arr = {{1,2,3},{4,5,6},{7,8,9}}; for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { System.out.print(arr[i][j] + " "); } } `
A) 1 2 3 4 5 6 7 8 9
B) 9 8 7 6 5 4 3 2 1
C) 1 4 7 2 5 8 3 6 9
D) Compilation Error
ANSWER: A
What will be the output of the following nested loop - ` for(int i=1; i<=2; i++) { for(int j=1; j<=2; j++) { System.out.print(i + "" + j + " "); } } `
A) 11 12 21 22
B) 11 21 12 22
C) 12 21 11 22
D) 21 22 11 12
ANSWER: A
What will be the output of the following nested loop - ` for(int i=1; i<=2; i++) { for(int j=1; j<=3; j++) { System.out.print(i*j + " "); } } `
A) 1 2 3 2 4 6
B) 1 4 9 16
C) 2 4 6 8
D) 1 2 3 4 5 6
ANSWER: A
What will be the output of the following nested loop - ` for(int i=1; i<=3; i++) { for(int j=1; j<=i; j++) { System.out.print("*"); } System.out.println(); } `
A) ***
B) **
C) *
D) * \n** \n***
ANSWER: D
What will be the output of this code snippet using pattern matching in `switch` (Java 16+) - ` Object obj = 5; switch (obj) { case Integer i && i > 2: System.out.print("Greater than two"); break; default: System.out.print("Less or equal to two"); } `
A) Greater than two
B) Less or equal to two
C) Compilation Error
D) None of the above
ANSWER: A
What will be the output of this code snippet? `if (false) { print("A"); } else if (true) { print("B"); } else { print("C"); }`
A) A
B) B
C) C
D) A and B
ANSWER: B
What will be the output of this real-world scenario code snippet if `x = 5` and `y = 10` - ` if(x < y) { System.out.print("x is smaller"); } else { System.out.print("y is smaller"); } `
A) x is smaller
B) y is smaller
C) Compilation Error
D) None of the above
ANSWER: A
What will be the result of `new Integer(5) instanceof Number`?
A) true
B) false
C) Compilation Error
D) None of the above
ANSWER: A
What will happen if a class has no constructor defined?
A) Compilation Error
B) A default constructor is automatically provided
C) Objects cannot be created for that class
D) None of the above
ANSWER: B
What will happen if a class has only parameterized constructors?
A) A default constructor will still be provided by the compiler
B) The class cannot be instantiated without passing parameters
C) Compilation Error
D) None of the above
ANSWER: B
What will happen if a constructor calls `this()` and `super()` in the same constructor but `this()` is not the first call?
A) Compilation Error
B) The `super()` call will be ignored
C) The `this()` call will be ignored
D) The program will execute but may produce unexpected results
ANSWER: A
What will happen if a constructor calls itself, either directly or indirectly?
A) Compilation Error
B) StackOverflowError
C) The program will run indefinitely
D) None of the above
ANSWER: B
What will happen if a constructor throws an exception?
A) The object will still be created
B) The object will not be created
C) The constructor will be called again
D) None of the above
ANSWER: B
What will happen if a Singleton class has a public constructor?
A) The Singleton property will be violated
B) A compilation error will occur
C) A runtime error will occur
D) None of the above
ANSWER: A
What will happen if the `super()` call is not the first statement in a constructor?
A) Compilation Error
B) It will be automatically moved to the first line
C) The program will execute but may produce unexpected results
D) None of the above
ANSWER: A
What will happen if the constructor of a class is declared as private?
A) The class cannot be instantiated
B) The class cannot be subclassed
C) Both A and B
D) None of the above
ANSWER: C
What will happen if two constructors have the same parameter list but different access modifiers?
A) Compilation Error
B) The most recently defined constructor will be used
C) The least restrictive access modifier will be used
D) None of the above
ANSWER: A
What will happen if two objects are equal but have different hash codes?
A) Compilation Error
B) Logical Error
C) Runtime Exception
D) None of the above
ANSWER: B
What will happen if you call `firstElement()` on an empty Vector?
A) Return null
B) Return the last element
C) Throw a NoSuchElementException
D) Throw an IndexOutOfBoundsException
ANSWER: C
What will happen if you call `lastElement()` on an empty Vector?
A) Return null
B) Return the first element
C) Throw a NoSuchElementException
D) Throw an IndexOutOfBoundsException
ANSWER: C
What will happen if you call `retainAll()` with a collection that has no common elements with the list?
A) No operation
B) UnsupportedOperationException
C) The list will become empty
D) IllegalArgumentException
ANSWER: C
What will happen if you call `set(int index, E element)` on an index that doesn't exist?
A) Adds the element at the end of the Vector
B) Throws an IndexOutOfBoundsException
C) Adds the element at the specified index, filling in any gaps with nulls
D) Throws an IllegalArgumentException
ANSWER: B
What will happen if you define a constructor as private?
A) Compilation Error
B) The class cannot be instantiated
C) The class can only be subclassed
D) None of the above
ANSWER: B
What will happen if you define a constructor as static?
A) Compilation error
B) Runtime error
C) The constructor will be called only once
D) None of the above
ANSWER: A
What will happen if you don't override `hashCode()` when you override `equals()`?
A) Compilation error
B) The program will crash
C) Incorrect behavior in hash-based collections
D) Performance degradation
ANSWER: C
What will happen if you modify a sublist created from an ArrayList?
A) The original list will also be modified
B) A new list will be created
C) UnsupportedOperationException
D) The sublist will be disconnected from the original list
ANSWER: A
What will happen if you modify an object inside a method?
A) The changes will reflect only inside the method
B) The changes will reflect in the calling method
C) A copy of the object will be modified
D) None of the above
ANSWER: B
What will happen if you modify the original list after creating a sublist?
A) The sublist will be updated
B) The sublist will throw a ConcurrentModificationException upon next access
C) UnsupportedOperationException
D) The sublist will remain unchanged
ANSWER: B
What will happen if you set `-Xms` greater than `-Xmx`?
A) JVM will adjust `-Xmx` automatically
B) JVM will throw an error
C) JVM will ignore `-Xms`
D) None of the above
ANSWER: B
What will happen if you throw an exception in an initialization block?
A) The constructor will catch it
B) The object will not be created
C) A compilation error will occur
D) None of the above
ANSWER: B
What will happen if you try to access an element at a negative index?
A) Return the first element
B) Throw an IndexOutOfBoundsException
C) Return null
D) Return the last element
ANSWER: B
What will happen if you try to access an element at an index greater than the size of the Vector?
A) Return null
B) Throw ArrayIndexOutOfBoundsException
C) Throw NoSuchElementException
D) Return the last element
ANSWER: B
What will happen if you try to compile a class with a constructor that has a return type?
A) Compilation Error
B) The constructor will be treated as a regular method
C) The program will execute normally
D) The constructor will return a default value
ANSWER: A
What will happen if you try to remove an element using Enumeration?
A) Removes the current element
B) Throws UnsupportedOperationException
C) Throws NoSuchElementException
D) None of the above
ANSWER: B
What will happen when the following `for` loop is executed - ` for(int i = 0; ; i++) { if(i > 10) break; } `
A) The loop will run infinitely
B) The loop will break when i becomes 11
C) Compilation Error
D) None of the above
ANSWER: B
What will happen when the following `while` loop is executed - ` while(false) { System.out.print("Inside Loop"); } `
A) "Inside Loop" will be printed once
B) "Inside Loop" will be printed infinitely
C) No output
D) Compilation Error
ANSWER: C
What will the following `do-while` loop print - ` int x = 3; do { System.out.print(x + " "); x--; } while(x > 0); `
A) 3 2 1
B) 0 1 2 3
C) 3 2 1 0
D) 3 2
ANSWER: A
What will the following `for` loop print - ` for(int i=0; i<5; i+=2) { System.out.print(i + " "); } `
A) 0 1 2 3 4
B) 0 2 4
C) 1 3 5
D) 0 1 2
ANSWER: B
What will the following `for` loop print - ` for(int i=5; i>0; i--) { System.out.print(i + " "); } `
A) 5 4 3 2 1
B) 1 2 3 4 5
C) 0 1 2 3 4
D) 5 4 3 2
ANSWER: A
What will the following code output - ` public class MyClass { public MyClass() { System.out.print("Constructor called"); } public static void main(String[] args) { MyClass obj = new MyClass(); } } `
A) Constructor called
B) Compilation Error
C) No output
D) None of the above
ANSWER: A
What will the following code output? `class MyClass { int x; MyClass(int x) { this.x = x; } public static void main(String[] args) { MyClass obj = new MyClass(5); System.out.print(obj.x); } }`
A) 5
B) Compilation Error
C) 0
D) Null
ANSWER: A
What will the following code output? `class MyClass { MyClass(int x, int y) { System.out.print("Two parameters"); } MyClass(int x) { this(); System.out.print("One parameter"); } MyClass() { System.out.print("No parameters"); } public static void main(String[] args) { MyClass obj = new MyClass(5); } }`
A) No parametersOne parameter
B) One parameter
C) Two parameters
D) Compilation Error
ANSWER: D
What will the following code output? `class MyClass { MyClass(int x, int y) { this(x * y); } MyClass(int x) { System.out.print(x); } public static void main(String[] args) { MyClass obj = new MyClass(5, 2); } }`
A) 10
B) Compilation Error
C) 5
D) 2
ANSWER: A
What will the following code output? `class MyClass { MyClass(int x, int y) { this(x + y); } MyClass(int x) { System.out.print(x); } public static void main(String[] args) { MyClass obj1 = new MyClass(5, 2); MyClass obj2 = new MyClass(3); } }`
A) 10 3
B) 7 3
C) 10
D) 7
ANSWER: A
What will the following code output? `class MyClass { MyClass(int x) { System.out.print(x); } } public static void main(String[] args) { MyClass obj = new MyClass(); }`
A) 0
B) Compilation Error
C) Null
D) None of the above
ANSWER: B
What will the following code output? `class MyClass { static { System.out.print("Static "); } { System.out.print("Block "); } MyClass() { System.out.print("Constructor "); } public static void main(String[] args) { new MyClass(); } }`
A) Static Block Constructor
B) Block Static Constructor
C) Constructor Block Static
D) Compilation Error
ANSWER: A
What will the following code output? `if (true) { print("Yes"); } else { print("No"); }`
A) Yes
B) No
C) Both Yes and No
D) Error
ANSWER: A
What will the following code snippet output - ` int x = 5; int y = x > 2 ? 1 : -1; System.out.print[Yes]; `
A) 1
B) -1
C) 5
D) Compilation Error
ANSWER: A
What will the following code snippet output - ` String result = (10 > 20) ? "Yes" : "No"; System.out.print(result); `
A) Yes
B) No
C) 10
D) 20
ANSWER: B
What will the following code snippet output? `class MyClass { MyClass(int x, int y) { System.out.print(x + y); } MyClass(int x) { this(x, x); } public static void main(String[] args) { MyClass obj = new MyClass(5); } }`
A) 5
B) 10
C) Compilation Error
D) None of the above
ANSWER: B
What would a continuously increasing Old Generation heap size indicate?
A) A potential memory leak
B) An efficient application
C) Optimal garbage collection
D) None of the above
ANSWER: A
What would be the output of the following code: `if (0) { print("True"); } else { print("False"); }`?
A) True
B) False
C) Error
D) None of the above
ANSWER: B
What would you use the PATH variable for in Java development?
A) To specify the location of JDK binaries
B) To define the default directory for projects
C) To set the maximum heap size for the JVM
D) To configure build automation tools
ANSWER: A
What would you use to monitor memory and garbage collection statistics of a remote JVM?
A) JConsole
B) JStat
C) JVisualVM
D) All of the above
ANSWER: D
What year did Sun Microsystems open-source Java?
A) 2004
B) 2006
C) 2008
D) 2010
ANSWER: B
What's a newer trend in garbage collection research?
A) Machine learning-based GC algorithms
B) GPU-accelerated GC
C) Distributed GC algorithms for microservices
D) All of the above
ANSWER: D
What's the key advantage of understanding low-level details like object headers and layout?
A) Improving security
B) Minimizing memory footprint
C) Improving network latency
D) All of the above
ANSWER: B
What's the primary purpose of `wait()` and `notify()` methods?
A) Thread synchronization
B) Thread scheduling
C) Thread pooling
D) Thread priority
ANSWER: A
When are non-static initialization blocks executed?
A) When an object is created
B) When a method is called
C) When a static method is called
D) None of the above
ANSWER: A
When did Oracle start releasing Java versions under a time-driven release model?
A) Java 9
B) Java 10
C) Java 11
D) Java 12
ANSWER: B
When does a class get initialized in Java?
A) When it is loaded
B) When it is linked
C) When an instance is created for the first time
D) None of the above
ANSWER: C
When does an object become eligible for garbage collection?
A) When it has no references
B) When it has circular references
C) When `System.gc()` is called
D) Both A and B
ANSWER: D
When does JIT compilation occur?
A) At compile-time
B) At load-time
C) At run-time
D) At build-time
ANSWER: C
When does the static block get executed?
A) When an object is created
B) When the class is loaded into memory
C) When a static method is called
D) When an instance method is called
ANSWER: B
When does the Termination phase of the JVM lifecycle occur?
A) When a program completes normally
B) When System.exit() is called
C) Both A and B
D) None of the above
ANSWER: C
When is a class marked as "fully loaded"?
A) After Loading
B) After Linking
C) After Initialization
D) After Execution
ANSWER: C
When is a default constructor NOT automatically provided by the compiler?
A) When a parameterized constructor is defined in the class
B) When the class is final
C) When the class is abstract
D) When the class implements an interface
ANSWER: A
When is a default constructor provided by the compiler?
A) Always
B) When no constructors are defined in the class
C) When the class is abstract
D) When the class extends another class
ANSWER: B
When is an object considered unreachable in Java?
A) When the object has no references pointing to it
B) When the object's finalize() method is invoked
C) When the object is explicitly set to null
D) When the object is moved to Old Generation
ANSWER: A
When is Class.forName() generally used?
A) When the class is already loaded
B) When the class is not yet loaded
C) To load native methods
D) To invoke static blocks
ANSWER: D
When is the default constructor called?
A) When an object is created using the `new` keyword
B) When an object is created without using the `new` keyword
C) When an object is created either with or without using the `new` keyword
D) When a method is called on an object
ANSWER: A
When is the initialization block called in the object lifecycle?
A) Before the constructor
B) After the constructor
C) Simultaneously with the constructor
D) It depends on the code
ANSWER: A
When should you prefer setter-based dependency injection over constructor-based?
A) When you have cyclic dependencies
B) When you have a large number of dependencies
C) When you need optional dependencies
D) All of the above
ANSWER: D
When should you prefer using ArrayList over Vector?
A) When you need thread safety
B) When performance is a critical factor
C) When you need to frequently insert or delete elements
D) When you need a resizable array
ANSWER: B
When should you prefer using LinkedList over Vector?
A) When you need constant-time insertions and deletions
B) When you need thread safety
C) When you need fast random access
D) When you need a fixed-size list
ANSWER: A
When should you use a Factory method design pattern?
A) When a class can’t anticipate the class of objects it must create
B) When a class wants its subclasses to specify the objects it creates
C) Either A or B
D) Neither A nor B
ANSWER: C
When should you use a LinkedList over an ArrayList?
A) When you need fast random access
B) When you have a fixed-size list
C) When you have frequent insertions and deletions
D) When you need to store elements in sorted order
ANSWER: C
When should you use a static method?
A) When the method needs to access instance variables
B) When the method does not modify the state of an object
C) When the method needs to be overridden
D) When the method is a constructor
ANSWER: B
When should you use an abstract class over an interface?
A) When you need to provide common functionality
B) When you need to define a contract
C) When you need multiple inheritance
D) When you need to hide data
ANSWER: A
When should you use the `CopyOnWriteArrayList`?
A) When reads are frequent and writes are rare
B) When writes are frequent and reads are rare
C) When both reads and writes are frequent
D) Never
ANSWER: A
When should you use Vector over other List implementations?
A) When you need thread safety and don’t care much about performance
B) When you need the fastest possible data structure
C) When you need to store elements in sorted order
D) When you need a non-resizable array
ANSWER: A
When storing custom objects in a List, why is it important to override the `equals` method?
A) To enable sorting
B) To remove duplicates
C) To ensure accurate element comparison
D) To improve performance
ANSWER: C
When storing custom objects in a List, why might you want to override the `hashCode` method?
A) To enable faster searches
B) To ensure unique storage
C) To work well with hash-based collections
D) To improve sorting
ANSWER: C
When was Java 8 released?
A) 2012
B) 2013
C) 2014
D) 2015
ANSWER: C
When was the first stable release of Java, known as Java 1.0, released?
A) 1994
B) 1995
C) 1996
D) 1997
ANSWER: C
When would you create a custom exception for List operations?
A) To handle null values
B) To handle business-specific validations
C) To catch IndexOutOfBoundsException
D) Never
ANSWER: B
Where are method return values stored?
A) Method Area
B) Heap Area
C) Stack Area
D) Native Method Stack
ANSWER: C
Where are native methods executed in the JVM?
A) Native Method Stack
B) Execution Engine
C) Both A and B
D) None of the above
ANSWER: C
Where can you officially download JDK?
A) Oracle's website
B) GitHub
C) Java.net
D) SourceForge
ANSWER: A
Where does the output of a Java program executed in IntelliJ IDEA appear by default?
A) Command Prompt
B) Output Window
C) Terminal
D) Run Window
ANSWER: D
Where is bytecode initially loaded into?
A) Heap Area
B) Method Area
C) Stack Area
D) Native Method Stack
ANSWER: B
Which access modifier allows a class member to be accessed from any class?
A) private
B) protected
C) public
D) package-private (no modifier)
ANSWER: C
Which access modifier allows a class member to be accessed within the same package only?
A) private
B) protected
C) public
D) package-private (no modifier)
ANSWER: D
Which access modifier allows a method to be accessed from any package?
A) public
B) private
C) protected
D) package-private
ANSWER: A
Which access modifier can provide the most restricted access to a class member?
A) `public`
B) `protected`
C) `private`
D) `default`
ANSWER: C
Which access modifier should be used for variables that must be accessed only within the same class?
A) private
B) protected
C) public
D) package-private (no modifier)
ANSWER: A
Which algorithm segregates memory into Young and Old generations?
A) Mark and Sweep
B) Generational Garbage Collection
C) Reference Counting
D) Tracing Collector
ANSWER: B
Which annotation is typically used to mark a method as deprecated?
A) @Deprecated
B) @Outdated
C) @Remove
D) @Old
ANSWER: A
Which annotation is used to mark a method as a JUnit test case?
A) `@Test`
B) `@Autowired`
C) `@Entity`
D) `@Service`
ANSWER: A
Which API is commonly used for dynamic class reloading?
A) Reflection API
B) JMX API
C) JNDI API
D) RMI API
ANSWER: A
Which area contains one runtime stack for each thread?
A) Heap Area
B) Method Area
C) Stack Area
D) Native Method Stack
ANSWER: C
Which area in JVM memory stores object instances?
A) Stack
B) Method Area
C) Java Heap
D) Native Method Stack
ANSWER: C
Which area is cleaned by the Garbage Collector?
A) Heap Area
B) Method Area
C) Stack Area
D) Native Method Stack
ANSWER: A
Which area of memory is not automatically managed by the JVM?
A) Heap
B) Stack
C) Native Method Area
D) None of the above
ANSWER: C
Which area of memory is primarily managed by the Garbage Collector?
A) Stack Memory
B) Heap Memory
C) Native Memory
D) Method Area
ANSWER: B
Which class allows you to read characters from a string?
A) StringWriter
B) StringReader
C) Scanner
D) None of the above
ANSWER: B
Which class allows you to read characters from an input stream?
A) FileReader
B) InputStreamReader
C) BufferedReader
D) All of the above
ANSWER: D
Which class in Java is commonly used for taking input from the user?
A) Scanner
B) Reader
C) InputStream
D) System
ANSWER: A
Which class in the Reflection API allows you to manipulate fields?
A) Class
B) Field
C) Method
D) Object
ANSWER: B
Which class is a legacy class and implements List and Stack?
A) ArrayList
B) LinkedList
C) Vector
D) Stack
ANSWER: C
Which Class Loader can be directly manipulated by a Java developer?
A) Bootstrap Class Loader
B) Extension Class Loader
C) System Class Loader
D) Custom Class Loader
ANSWER: D
Which class loader delegates the class loading request to its parent before attempting to load the class itself?
A) Bootstrap Class Loader
B) Extension Class Loader
C) System Class Loader
D) All of the above
ANSWER: D
Which class loader is a child of the Extension class loader?
A) Bootstrap Class Loader
B) System Class Loader
C) They are peers, not parent-child
D) None of the above
ANSWER: B
Which class loader is responsible for loading the core Java libraries?
A) Bootstrap Class Loader
B) Extension Class Loader
C) System Class Loader
D) None of the above
ANSWER: A
Which class loader is responsible for loading the Java standard library?
A) Bootstrap Class Loader
B) Extension Class Loader
C) System Class Loader
D) Custom Class Loader
ANSWER: A
Which class loader loads application-specific classes?
A) Bootstrap Class Loader
B) Extension Class Loader
C) System Class Loader
D) Custom Class Loader
ANSWER: C
Which class loading mechanism is used to load classes from JAR files outside the Java standard library?
A) Bootstrap
B) Extension
C) System
D) None of the above
ANSWER: C
Which class provides methods to check permission for various operations?
A) ClassLoader
B) SecurityManager
C) Permission
D) None of the above
ANSWER: B
Which class provides methods to explicitly control thread execution?
A) Runnable
B) Thread
C) Executor
D) Object
ANSWER: B
Which class provides methods to read primitive types?
A) Reader
B) InputStream
C) DataInputStream
D) Scanner
ANSWER: D
Which class should you use for reading large amounts of text efficiently?
A) Scanner
B) InputStreamReader
C) BufferedReader
D) StringReader
ANSWER: C
Which ClassLoader is the parent of all other ClassLoaders?
A) Bootstrap ClassLoader
B) Extension ClassLoader
C) System ClassLoader
D) None of the above
ANSWER: A
Which collection class in java.util is synchronized by default?
A) ArrayList
B) Vector
C) LinkedList
D) None of the above
ANSWER: B
Which collection type does not allow duplicate elements?
A) List
B) Set
C) Map
D) Queue
ANSWER: B
Which collector uses multiple threads for both Young and Old Generation garbage collection?
A) Serial Collector
B) Parallel Collector
C) CMS
D) None of the above
ANSWER: B
Which command allows you to debug a Java program remotely?
A) java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
B) java -remote:debug,server=y,suspend=n,address=5005
C) java -debug server=y,suspend=n,address=5005
D) None of the above
ANSWER: A
Which command gives detailed information about the methods generated by the JIT compiler?
A) jstat
B) javap -c
C) -XX:+PrintOptoAssembly
D) -XX:+UnlockDiagnosticVMOptions
ANSWER: C
Which command is not available in JRE?
A) java
B) javac
C) jar
D) keytool
ANSWER: B
Which command is used to compile a module for `jlink`?
A) javac --module-source-path
B) jlink --add-modules
C) java --module
D) None of the above
ANSWER: A
Which command is used to execute a Java program?
A) javac
B) java
C) jar
D) jshell
ANSWER: B
Which command is used to update Java alternatives on Linux?
A) java --update
B) sudo update-java
C) sudo update-alternatives --config java
D) sudo java -update
ANSWER: C
Which command line utility is not directly involved in the compile and execution cycle of a Java program?
A) javac
B) java
C) jar
D) jshell
ANSWER: D
Which command-line tool can monitor garbage collection statistics?
A) jstat
B) javap
C) jinfo
D) jstack
ANSWER: A
Which command-line tool is used for loading classes for remote debugging?
A) jlink
B) jhsdb
C) jdb
D) jrunscript
ANSWER: C
Which company currently maintains Java?
A) Microsoft
B) Google
C) Oracle
D) IBM
ANSWER: C
Which company initiated Project Oak?
A) IBM
B) Microsoft
C) Sun Microsystems
D) Google
ANSWER: C
Which company originally developed Java?
A) Microsoft
B) Sun Microsystems
C) IBM
D) Google
ANSWER: B
Which company originally developed Java?
A) Microsoft
B) Sun Microsystems
C) IBM
D) Oracle
ANSWER: B
Which company primarily develops the HotSpot JVM?
A) Oracle
B) IBM
C) Microsoft
D) Google
ANSWER: A
Which component handles garbage collection?
A) Class Loader
B) Method Area
C) Heap Area
D) Execution Engine
ANSWER: C
Which component of the JVM is responsible for loading classes?
A) Bytecode Verifier
B) Just-In-Time Compiler
C) Class Loader
D) Execution Engine
ANSWER: C
Which concept allows Java to run on multiple types of devices without modification?
A) Bytecode
B) Garbage Collection
C) Native OS Support
D) Just-In-Time Compilation
ANSWER: A
Which concept in Java is used for method hiding?
A) Overloading
B) Overriding
C) Shadowing
D) None of the above
ANSWER: C
Which data structure does the JVM use to store local variables?
A) Stack
B) Array
C) Heap
D) Queue
ANSWER: A
Which data structure is used to store method data in HotSpot?
A) Queue
B) Stack
C) Method Area
D) None of the above
ANSWER: C
Which data type can be used to store Unicode characters?
A) char
B) String
C) byte
D) int
ANSWER: A
Which data type is suitable for storing large decimal numbers with high precision?
A) float
B) double
C) BigDecimal
D) Either B or C
ANSWER: C
Which data type is suitable for storing large text?
A) char
B) String
C) StringBuffer
D) Either B or C
ANSWER: D
Which data type should be used to store a simple 'yes' or 'no' value?
A) char
B) byte
C) boolean
D) int
ANSWER: C
Which design pattern is best suited for event handling systems?
A) Singleton
B) Factory
C) Observer
D) None of the above
ANSWER: C
Which design pattern promotes immutability?
A) Singleton Pattern
B) Builder Pattern
C) Factory Pattern
D) Telescoping Constructor Pattern
ANSWER: B
Which environment variable should you set to use JDK's binaries?
A) PATH
B) JAVA_PATH
C) JDK_PATH
D) CLASSPATH
ANSWER: A
Which file extension is generally associated with JDK installers for Windows?
A) .tar.gz
B) .exe
C) .dmg
D) .msi
ANSWER: B
Which file is generated when you compile a file named `Example.java`?
A) Example.class
B) Example.java.class
C) ExampleBytecode.class
D) None of the above
ANSWER: A
Which flag can be used to limit the heap usage of a Java application?
A) -XX:+HeapDumpOnOutOfMemoryError
B) -XX:+UseGCOverheadLimit
C) -XX:MaxHeapFreeRatio
D) -XX:+AlwaysPreTouch
ANSWER: C
Which flag can be used to tune the number of parallel GC threads?
A) `-XX:ParallelGCThreads`
B) `-XX:ConcGCThreads`
C) `-XX:+UseParallelGC`
D) `-XX:+UseConcMarkSweepGC`
ANSWER: A
Which flag enables JMX monitoring of a running Java application?
A) -XX:+UnlockCommercialFeatures
B) -Dcom.sun.management.jmxremote
C) -XX:+UseLargePages
D) -XX:+PrintCompilation
ANSWER: B
Which flag enables the use of large page memory?
A) -XX:+UseLargePages
B) -XX:LargePageSizeInBytes
C) -XX:+UseHugePages
D) -XlargePages
ANSWER: A
Which flag helps you to control the amount of heap to reserve on startup?
A) -XX:InitialHeapSize
B) -Xms
C) -XX:ReservedCodeCacheSize
D) -XX:MaxHeapSize
ANSWER: B
Which flag is used to set the initial heap size of JVM?
A) -Xmin
B) -Xms
C) -Xmx
D) -Xss
ANSWER: B
Which flag is used to specify the minimum percentage of heap free after GC to avoid expansion?
A) -XX:MinHeapFreeRatio
B) -XX:MaxHeapFreeRatio
C) -XX:InitialHeapSize
D) -XX:NewRatio
ANSWER: A
Which flag sets the maximum heap size?
A) -Xmin
B) -Xms
C) -Xmx
D) -Xss
ANSWER: C
Which flag would you use to enable GC details in the application log?
A) -XX:+PrintGCDetails
B) -XX:+UseG1GC
C) -XX:ParallelGCThreads
D) -XX:-UseSerialGC
ANSWER: A
Which flag would you use to log GC pauses?
A) `-XX:+PrintGCPauseTimes`
B) `-XX:+PrintGCDetails`
C) `-XX:+PrintGC`
D) `-XX:LogGCPauses`
ANSWER: B
Which function is used in JNI to call a static Java method?
A) CallStaticVoidMethod
B) CallStaticObjectMethod
C) Either A or B
D) None of the above
ANSWER: C
Which garbage collection algorithm aims to meet soft real-time constraints?
A) CMS
B) Parallel
C) G1
D) Serial
ANSWER: C
Which garbage collection algorithm divides the heap into Young and Old generations?
A) Mark-and-Sweep
B) Copying
C) Generational GC
D) Reference Counting
ANSWER: C
Which Garbage Collection algorithm is designed for real-time systems?
A) G1 GC
B) Shenandoah
C) CMS
D) ZGC
ANSWER: D
Which garbage collection algorithm is not focused on dividing the heap?
A) Generational GC
B) Mark-and-Sweep
C) Copying
D) All of the above divide the heap
ANSWER: B
Which garbage collection algorithm uses a pause-less mechanism?
A) G1
B) CMS
C) Parallel
D) ZGC
ANSWER: D
Which garbage collector aims to minimize application pauses?
A) Serial Collector
B) Parallel Collector
C) CMS
D) None of the above
ANSWER: C
Which Garbage Collector aims to provide low-latency performance?
A) G1 Garbage Collector
B) Z Garbage Collector (ZGC)
C) Shenandoah
D) All of the above
ANSWER: D
Which garbage collector is best suited for applications that can afford application pauses and require high throughput?
A) Serial Collector
B) Parallel Collector
C) CMS
D) G1
ANSWER: B
Which garbage collector is best suited for single-threaded applications?
A) Serial Collector
B) Parallel Collector
C) CMS
D) G1
ANSWER: A
Which garbage collector is designed for multi-threaded applications and maximizes throughput?
A) Serial Collector
B) Parallel Collector
C) CMS
D) None of the above
ANSWER: B
Which garbage collector is designed for multi-threaded, high-memory applications?
A) G1 GC
B) CMS GC
C) Serial GC
D) Parallel GC
ANSWER: D
Which garbage collector is designed to minimize application pauses?
A) Parallel
B) Serial
C) CMS
D) G1
ANSWER: D
Which garbage collector is generally not recommended for latency-sensitive applications?
A) Serial Collector
B) Parallel Collector
C) CMS
D) G1
ANSWER: B
Which Garbage Collector is tailored for large heap sizes?
A) G1
B) ZGC
C) Shenandoah
D) Serial
ANSWER: B
Which garbage collector performs concurrent marking and compaction?
A) G1
B) ZGC
C) CMS
D) Shenandoah
ANSWER: D
Which Garbage Collector uses a parallel version of the Young Generation collector?
A) G1
B) CMS
C) Parallel GC
D) Serial GC
ANSWER: C
Which Garbage Collector was introduced in Java 9? (Easy)
A) G1 GC
B) Z GC
C) Shenandoah
D) None of the above
ANSWER: B
Which GC algorithm aims to divide the heap into a large number of small regions?
A) Serial GC
B) Parallel GC
C) CMS
D) G1 GC
ANSWER: D
Which GC algorithm does not do compaction?
A) CMS
B) Serial GC
C) Parallel GC
D) G1 GC
ANSWER: A
Which GC algorithm is also known as "stop-the-world" GC?
A) Copying
B) Mark-and-Sweep
C) Generational GC
D) Incremental GC
ANSWER: B
Which GC algorithm is considered to be the most memory-efficient?
A) Mark-and-Sweep
B) Copying
C) Generational GC
D) Compact
ANSWER: C
Which GC algorithm would you typically use for a real-time system with stringent latency requirements?
A) Mark-and-Sweep
B) Generational
C) Incremental
D) None of the above
ANSWER: D
Which GC log entry indicates the time taken for each garbage collection event?
A) Timestamp
B) Event type
C) Pause time
D) Thread count
ANSWER: C
Which GC log entry indicates the time taken for garbage collection?
A) Pause
B) Times
C) Duration
D) Elapsed
ANSWER: A
Which IDE is known for its robust set of plugins and community support?
A) IntelliJ IDEA
B) Eclipse
C) NetBeans
D) JDeveloper
ANSWER: A
Which IDE provides built-in support for Maven and Gradle?
A) IntelliJ IDEA
B) Eclipse
C) NetBeans
D) All of the above
ANSWER: D
Which IntelliJ IDEA plugin allows for database management within the IDE?
A) GitLens
B) DataGrip
C) Maven Helper
D) None of the above
ANSWER: B
Which interface does the LinkedList class implement in Java?
A) List
B) Queue
C) Set
D) Both List and Queue
ANSWER: D
Which interface provides a `lock()` method for better-controlled synchronization?
A) Lock
B) ReentrantLock
C) Synchronizer
D) Executor
ANSWER: B
Which is a built-in annotation in Java?
A) @Entity
B) @Override
C) @Custom
D) @Service
ANSWER: B
Which is NOT a common symptom of a memory leak?
A) Increased error rate
B) Application slowdown
C) Improved latency
D) OutOfMemoryError
ANSWER: C
Which is not a typical element in an object layout in JVM?
A) Object header
B) Instance variables
C) Stack pointer
D) Padding
ANSWER: C
Which Java API class provides methods for inter-thread communication?
A) Object
B) Thread
C) Both A and B
D) None of the above
ANSWER: A
Which Java class is used to create a server socket?
A) ServerSocket
B) SocketServer
C) NetServer
D) None of the above
ANSWER: A
Which Java component is responsible for the Garbage Collection process?
A) Just-In-Time Compiler
B) Class Loader
C) Execution Engine
D) Java API
ANSWER: C
Which Java keyword is used to create an assertion?
A) assert
B) assertion
C) assertTrue
D) check
ANSWER: A
Which Java keyword is used to define a native method?
A) external
B) native
C) interface
D) abstract
ANSWER: B
Which Java Memory Model feature mainly applies to multithreading?
A) Heap Memory
B) Stack Memory
C) Volatile Fields
D) Method Area
ANSWER: C
Which Java package commonly contains classes for internationalization?
A) java.international
B) java.i18n
C) java.util
D) java.locale
ANSWER: C
Which Java package primarily handles networking?
A) java.net
B) java.network
C) java.socket
D) java.http
ANSWER: A
Which Java version introduced modules and the `jlink` tool?
A) 8
B) 9
C) 10
D) 11
ANSWER: B
Which Java version introduced the `assert` keyword?
A) 1.3
B) 1.4
C) 1.5
D) 1.6
ANSWER: B
Which JDK command is used for generating API documentation?
A) jmap
B) javah
C) javadoc
D) jstat
ANSWER: C
Which JDK release introduced switch expressions as a standard feature?
A) 12
B) 13
C) 14
D) 15
ANSWER: C
Which JDK version brought in the concept of modules?
A) JDK 8
B) JDK 9
C) JDK 10
D) JDK 11
ANSWER: B
Which JDK version first provided support for lambda expressions?
A) JDK 6
B) JDK 7
C) JDK 8
D) JDK 9
ANSWER: C
Which JVM flag can help in specifying the size of the stack?
A) `-Xms`
B) `-Xmx`
C) `-Xss`
D) `-XX:MaxHeapSize`
ANSWER: C
Which JVM flag disables the JIT compiler?
A) -Djava.compiler=NONE
B) -XX:-UseJIT
C) -Djava.interpreter
D) -Xint
ANSWER: D
Which JVM flag is used to control the initial heap size?
A) -Xms
B) -Xmx
C) -Xss
D) None of the above
ANSWER: A
Which JVM flag is used to set the maximum heap size?
A) -Xms
B) -Xmx
C) -XX:+HeapDumpOnOutOfMemoryError
D) -XX:NewSize
ANSWER: B
Which JVM flag would you use to set initial heap size?
A) `-Xmx`
B) `-Xms`
C) `-Xss`
D) `-XX:NewRatio`
ANSWER: B
Which JVM option allows you to enable or disable explicit garbage collection?
A) -XX:+DisableExplicitGC
B) -XX:+ExplicitGCInvokesConcurrent
C) -XX:-UseGCOverheadLimit
D) -XX:+AlwaysPreTouch
ANSWER: A
Which JVM option can be used to enable Just-In-Time compilation?
A) -XX:+UseJIT
B) -XX:+EnableJIT
C) -XX:-TieredCompilation
D) -XX:+UseCodeCacheFlushing
ANSWER: C
Which JVM option can lead to OutOfMemoryError if set too low?
A) -Xss
B) -Xmx
C) -Xms
D) Both B and C
ANSWER: D
Which JVM option prints all the JVM flags and their values?
A) -XX:+PrintFlags
B) -XX:+PrintFlagsFinal
C) -XX:+PrintGCDetails
D) -XX:+PrintHeapAtGC
ANSWER: B
Which JVM tool is used for application profiling and monitoring?
A) JConsole
B) JProfiler
C) JVisualVM
D) JStat
ANSWER: C
Which keyword in Java is used for importing predefined Java classes?
A) import
B) package
C) include
D) define
ANSWER: A
Which keyword is used to inherit a class in Java?
A) super
B) this
C) extends
D) inherit
ANSWER: C
Which keyword is used to make a method thread-safe in Java?
A) static
B) synchronized
C) volatile
D) final
ANSWER: B
Which List implementation is a good choice for a stack data structure?
A) ArrayList
B) LinkedList
C) Vector
D) Any of the above
ANSWER: D
Which List implementation is suitable for multi-threaded environments where writes are rare but reads are frequent?
A) ArrayList
B) LinkedList
C) CopyOnWriteArrayList
D) Vector
ANSWER: C
Which List implementation is thread-safe?
A) ArrayList
B) LinkedList
C) Vector
D) None of the above
ANSWER: C
Which List implementation is typically faster for add and remove operations at the beginning or in the middle of the list?
A) ArrayList
B) LinkedList
C) Vector
D) None of the above
ANSWER: B
Which List implementation provides constant-time performance for get and add operations?
A) ArrayList
B) LinkedList
C) Vector
D) All of the above
ANSWER: A
Which List implementation should you use for a small number of elements?
A) ArrayList
B) LinkedList
C) Vector
D) Any of the above
ANSWER: D
Which logical operator is used to perform logical AND operation?
A) &amp;&amp;
B) ||
C) !
D) ==
ANSWER: A
Which loop is more suitable for reading data until the end of file (EOF) is reached?
A) for loop
B) while loop
C) do-while loop
D) Either for or while loop
ANSWER: B
Which loop is not recommended for iterating through an array in Java?
A) for loop
B) enhanced for loop
C) while loop
D) None of the above
ANSWER: D
Which memory area contains the object references?
A) Stack Memory
B) Heap Memory
C) Native Method Stack
D) Method Area
ANSWER: A
Which method can be used for bulk addition of elements to a Vector?
A) `addAll()`
B) `bulkAdd()`
C) `pushAll()`
D) `addElements()`
ANSWER: A
Which method can be used to add an element at a specific index in a Vector?
A) add(int index, E element)
B) insert(int index, E element)
C) place(int index, E element)
D) set(int index, E element)
ANSWER: A
Which method can be used to get all declared fields of a class in Reflection?
A) getFields()
B) getDeclaredFields()
C) getAllFields()
D) getPublicFields()
ANSWER: B
Which method can be used to replace all occurrences of a specified element in a list?
A) replace(element, replacement)
B) setAll(element, replacement)
C) replaceAll(element, replacement)
D) substitute(element, replacement)
ANSWER: C
Which method can be used to set the size of a Vector?
A) setSize()
B) setLength()
C) setCapacity()
D) resize()
ANSWER: A
Which method is called to load a class into memory?
A) load()
B) findClass()
C) loadClass()
D) getClass()
ANSWER: C
Which method is generally used to load a class dynamically in Java?
A) Class.forName()
B) ClassLoader.loadClass()
C) Either A or B
D) None of the above
ANSWER: C
Which method is used to add an element at the end of a Vector?
A) add(E e)
B) append(E e)
C) push(E e)
D) insert(E e)
ANSWER: A
Which method is used to define a new instance of a class during dynamic class loading?
A) newInstance()
B) newClass()
C) newObject()
D) createInstance()
ANSWER: A
Which method is used to get an element from an ArrayList by index?
A) `list.get(index);`
B) `list.fetch(index);`
C) `list.pull(index);`
D) `list.grab(index);`
ANSWER: A
Which method is used to invoke a method using Reflection?
A) invokeMethod()
B) invoke()
C) callMethod()
D) execute()
ANSWER: B
Which method is used to retrieve an element from a specific index in a Vector?
A) get(int index)
B) elementAt(int index)
C) retrieve(int index)
D) fetch(int index)
ANSWER: A
Which method must be implemented when a class implements `Runnable`?
A) init()
B) start()
C) run()
D) execute()
ANSWER: C
Which method must be overridden when implementing `Runnable` for thread creation?
A) init()
B) start()
C) execute()
D) run()
ANSWER: D
Which method of the Scanner class is used to read an entire line of text?
A) next()
B) nextLine()
C) readLine()
D) read()
ANSWER: B
Which method removes all elements from a list?
A) deleteAll()
B) clear()
C) removeAll()
D) empty()
ANSWER: B
Which method removes the object at the top of a Stack and returns the object as the value?
A) pop()
B) pull()
C) remove()
D) delete()
ANSWER: A
Which method retrieves, but does not remove, the last element from a LinkedList?
A) list.peekLast()
B) list.getLast()
C) list.retrieveLast()
D) Both A and B
ANSWER: D
Which method should you override for custom sorting of objects in a List?
A) sort()
B) compareTo()
C) compare()
D) order()
ANSWER: B
Which method will be called if you don't use the `super` keyword in a subclass method?
A) The superclass method
B) The subclass method
C) Both superclass and subclass methods
D) None of the above
ANSWER: B
Which method will remove all elements contained in a specified collection from a List?
A) deleteAll(collection)
B) clear(collection)
C) removeAll(collection)
D) subtractAll(collection)
ANSWER: C
Which method will you use to close a Scanner object?
A) close()
B) end()
C) finish()
D) terminate()
ANSWER: A
Which method would you use to sort a List in ascending order?
A) List.sort()
B) Collections.sort()
C) Arrays.sort()
D) None of the above
ANSWER: B
Which metric indicates the efficiency of garbage collection?
A) CPU usage
B) Time spent in GC vs time spent in application code
C) Disk I/O
D) Number of threads
ANSWER: B
Which monitoring tool can provide detailed heap statistics?
A) JVisualVM
B) JConsole
C) jstat
D) All of the above
ANSWER: D
Which monitoring tool is integrated into the JDK?
A) JVisualVM
B) JConsole
C) jstat
D) All of the above
ANSWER: D
Which monitoring tool is mainly command-line based?
A) JVisualVM
B) JConsole
C) jstat
D) None of the above
ANSWER: C
Which monitoring tool is shipped with the JDK?
A) JProfiler
B) New Relic
C) JVisualVM
D) AppDynamics
ANSWER: C
Which of the following access modifiers can be used with a constructor?
A) public
B) private
C) protected
D) All of the above
ANSWER: D
Which of the following access modifiers cannot be applied to local variables?
A) public
B) private
C) protected
D) All of the above
ANSWER: D
Which of the following access modifiers cannot be applied to local variables?
A) private
B) protected
C) public
D) All of the above
ANSWER: D
Which of the following access modifiers provides the least accessibility?
A) public
B) private
C) protected
D) package-private
ANSWER: B
Which of the following accurately describes the main role of garbage collection in Java?
A) Memory allocation
B) Thread management
C) Memory deallocation
D) None of the above
ANSWER: C
Which of the following algorithms is NOT used by JVM's Garbage Collector?
A) Mark and Compact
B) Mark and Sweep
C) Quick Sort
D) Generational Garbage Collection
ANSWER: C
Which of the following are true about constructor overloading?
A) Constructors must have different parameter lists
B) Constructors can have the same parameter lists but different access modifiers
C) Constructors can have different return types
D) None of the above
ANSWER: A
Which of the following ArrayList methods does not modify the list?
A) add()
B) remove()
C) get()
D) set()
ANSWER: C
Which of the following best describes Bytecode?
A) Human-readable code
B) Native machine code
C) Intermediate code understood by JVM
D) None of the above
ANSWER: C
Which of the following best describes encapsulation?
A) Hiding implementation details
B) Code reusability
C) Code inheritance
D) Code polymorphism
ANSWER: A
Which of the following best describes the Execution Engine in JVM?
A) It interprets the bytecode
B) It compiles the bytecode
C) It performs both A and B
D) It manages memory
ANSWER: C
Which of the following can a constructor NOT have?
A) Access modifiers
B) Return types
C) Parameters
D) Exception specification
ANSWER: B
Which of the following can access a protected member of a class?
A) Classes within the same package
B) Subclasses
C) Both A and B
D) None of the above
ANSWER: C
Which of the following can be a limitation of remote development?
A) Network latency
B) Limited debugging capabilities
C) Limited access to server resources
D) All of the above
ANSWER: D
Which of the following can be replaced by a lambda expression?
A) Anonymous classes
B) Static methods
C) Instance methods
D) Abstract classes
ANSWER: A
Which of the following can be stored in a `char` data type?
A) 'A'
B) "A"
C) 65
D) Both A and C
ANSWER: D
Which of the following can be used as a shorthand for an `if-else` statement?
A) switch
B) for
C) ?
D) while
ANSWER: C
Which of the following can be used to convert a Vector to a List?
A) new ArrayList(vector)
B) List.fromVector(vector)
C) List.asList(vector)
D) Collections.asList(vector)
ANSWER: A
Which of the following can be used to iterate through a List in Java?
A) Traditional for-loop
B) Enhanced for-loop
C) Iterator
D) All of the above
ANSWER: D
Which of the following can be used to skip the current iteration in a `for` loop?
A) skip
B) continue
C) break
D) return
ANSWER: B
Which of the following can improve the performance of a loop?
A) Minimizing the work inside the loop
B) Reducing function calls within the loop
C) Both A and B
D) None of the above
ANSWER: C
Which of the following cannot be overridden?
A) Public methods
B) Private methods
C) Protected methods
D) None of the above
ANSWER: B
Which of the following class loaders is the parent of all other class loaders?
A) Extension Class Loader
B) Bootstrap Class Loader
C) System Class Loader
D) Custom Class Loader
ANSWER: B
Which of the following classes does not override the `equals()` method?
A) String
B) Integer
C) StringBuffer
D) Double
ANSWER: C
Which of the following classes is final?
A) Object
B) String
C) StringBuilder
D) StringBuffer
ANSWER: B
Which of the following classes is not used for taking user input?
A) Scanner
B) BufferedReader
C) BufferedWriter
D) Console
ANSWER: C
Which of the following classes should you use to read command-line arguments in a Spring Boot application?
A) CommandLineRunner
B) SpringApplication
C) ApplicationArguments
D) None of the above
ANSWER: A
Which of the following collection classes is thread-safe?
A) ArrayList
B) LinkedList
C) Vector
D) None of the above
ANSWER: C
Which of the following commands is used to disassemble bytecode?
A) javap
B) jar
C) jmap
D) jstack
ANSWER: A
Which of the following components of JVM is responsible for loading classes?
A) Class Loader
B) Method Area
C) Heap Area
D) Execution Engine
ANSWER: A
Which of the following core libraries contain commonly used functionalities like data structures, basic algorithms, and I/O?
A) java.util
B) java.lang
C) java.io
D) All of the above
ANSWER: D
Which of the following correctly represents a parameterized constructor in Java?
A) public MyClass() {}
B) public MyClass(int x, int y) {}
C) public void MyClass(int x, int y) {}
D) MyClass(int x, int y) {}
ANSWER: B
Which of the following could be a sign of a memory leak?
A) Reduced heap size over time
B) High CPU usage
C) OutOfMemoryError
D) Low disk usage
ANSWER: C
Which of the following data types can store the largest value?
A) int
B) long
C) float
D) double
ANSWER: B
Which of the following data types can throw a NullPointerException?
A) int
B) char
C) String
D) boolean
ANSWER: C
Which of the following data types is not a primitive data type in Java?
A) byte
B) short
C) long
D) BigDecimal
ANSWER: D
Which of the following design patterns is NOT used for object creation?
A) Singleton Pattern
B) Builder Pattern
C) Observer Pattern
D) Telescoping Constructor Pattern
ANSWER: C
Which of the following does Java use for memory management?
A) Manual Deallocation
B) Automatic Garbage Collection
C) Stack Allocation
D) Dynamic Allocation
ANSWER: B
Which of the following features does Java not support?
A) Multiple Inheritance
B) Polymorphism
C) Encapsulation
D) Abstraction
ANSWER: A
Which of the following files represents compiled Java bytecode?
A) .java
B) .javac
C) .class
D) .jar
ANSWER: C
Which of the following flags forces the JVM to use a single thread for garbage collection?
A) -XX:+UseSerialGC
B) -XX:+UseParallelGC
C) -XX:+UseConcMarkSweepGC
D) None of the above
ANSWER: A
Which of the following flags will throw an exception if you run out of memory?
A) -XX:+HeapDumpOnOutOfMemoryError
B) -XX:+PrintHeapAtGC
C) -XX:+CrashOnOutOfMemoryError
D) -XX:-UseParallelGC
ANSWER: C
Which of the following garbage collection algorithms compact the free heap space?
A) Mark and Sweep
B) Copying
C) Mark and Compact
D) None of the above
ANSWER: C
Which of the following Garbage Collection algorithms compacts the free memory?
A) Mark and Sweep
B) Copying Collector
C) Generational Garbage Collection
D) Mark-Compact
ANSWER: D
Which of the following GC algorithms can compact the Old Generation?
A) CMS
B) G1
C) ZGC
D) Shenandoah
ANSWER: B
Which of the following GC algorithms defragments the heap during garbage collection?
A) G1 GC
B) CMS
C) Serial GC
D) ZGC
ANSWER: C
Which of the following helps in making a class immutable?
A) Making all data members public
B) Making the constructor public
C) Making all data members final
D) Making all methods static
ANSWER: C
Which of the following helps in reducing constructor complexity?
A) Keeping a single constructor with all the parameters
B) Using default arguments for constructor parameters
C) Separating object construction from its representation
D) None of the above
ANSWER: C
Which of the following IDEs has a marketplace for plugins?
A) Eclipse
B) IntelliJ IDEA
C) NetBeans
D) All of the above
ANSWER: D
Which of the following IDEs is open-source?
A) NetBeans
B) IntelliJ IDEA Ultimate
C) JDeveloper
D) None of the above
ANSWER: A
Which of the following IDEs supports Java as well as other languages like C, C++, and PHP?
A) IntelliJ IDEA
B) NetBeans
C) Eclipse
D) All of the above
ANSWER: D
Which of the following IDEs supports native Git integration?
A) Eclipse
B) IntelliJ IDEA
C) NetBeans
D) All of the above
ANSWER: D
Which of the following instance variable declarations is incorrect?
A) `public int x;`
B) `private static int y;`
C) `protected final int z;`
D) `transient static int w;`
ANSWER: D
Which of the following interfaces allow both forward and backward traversal of a Vector?
A) Enumeration
B) Iterator
C) ListIterator
D) Iterable
ANSWER: C
Which of the following is a built-in Java annotation?
A) `@Autowired`
B) `@Entity`
C) `@Override`
D) `@Service`
ANSWER: C
Which of the following is a common pitfall when handling exceptions in constructors?
A) Resource leaks
B) Incomplete object initialization
C) Both A and B
D) None of the above
ANSWER: C
Which of the following is a constructor for initializing a Vector?
A) new Vector()
B) new Vector(int size)
C) new Vector(int initialCapacity, int capacityIncrement)
D) All of the above
ANSWER: D
Which of the following is a correct `do-while` loop syntax in Java?
A) do { /* code */ } while(condition);
B) do while(condition) { /* code */ };
C) do { /* code */ } while condition;
D) while(condition) do { /* code */ };
ANSWER: A
Which of the following is a correct method declaration?
A) `public int addNumbers(int a; int b)`
B) `public int addNumbers(int a, int b);`
C) `public int addNumbers(int a, int b) {}`
D) `public addNumbers(int a, int b)`
ANSWER: C
Which of the following is a correct way to add an element to an ArrayList?
A) `list.add(index, element);`
B) `list.put(index, element);`
C) `list.set(index, element);`
D) `list.addElement(element);`
ANSWER: A
Which of the following is a feature of Oracle's HotSpot JVM?
A) Adaptive optimization
B) Real-time garbage collection
C) Built-in JNI support
D) All of the above
ANSWER: A
Which of the following is a form of compile-time polymorphism?
A) Inheritance
B) Encapsulation
C) Method Overloading
D) Method Overriding
ANSWER: C
Which of the following is a Java Security Manager function?
A) Memory management
B) Bytecode verification
C) Access control
D) None of the above
ANSWER: C
Which of the following is a legacy method in Vector class?
A) `addElement()`
B) `add()`
C) `get()`
D) `size()`
ANSWER: A
Which of the following is a mutable class in Java?
A) Integer
B) String
C) StringBuilder
D) Boolean
ANSWER: C
Which of the following is a popular Java IDE developed by JetBrains?
A) Eclipse
B) NetBeans
C) IntelliJ IDEA
D) Visual Studio
ANSWER: C
Which of the following is a reason to not rely on garbage collection?
A) CPU overhead
B) Memory overhead
C) Unpredictability of GC cycles
D) All of the above
ANSWER: D
Which of the following is a reference data type in Java?
A) byte
B) short
C) String
D) long
ANSWER: C
Which of the following is a reference data type?
A) int
B) String
C) double
D) char
ANSWER: B
Which of the following is a reference data type?
A) int[]
B) char
C) boolean
D) float
ANSWER: A
Which of the following is a reference type?
A) enum
B) byte
C) short
D) int
ANSWER: A
Which of the following is a shortcut to run a Java program in IntelliJ IDEA?
A) Alt + F10
B) Alt + F9
C) Shift + F10
D) Shift + F9
ANSWER: C
Which of the following is a unique feature of Java compared to C++?
A) Functions
B) Platform independence
C) Libraries
D) Syntax
ANSWER: B
Which of the following is a valid `enum` declaration?
A) enum { RED, GREEN, BLUE };
B) enum Color { RED, GREEN, BLUE }
C) enum Color { RED; GREEN; BLUE; }
D) enum Color = { RED, GREEN, BLUE };
ANSWER: B
Which of the following is a valid constructor declaration?
A) public MyClass() throws Exception {}
B) private MyClass() {}
C) protected MyClass(int x) {}
D) All of the above
ANSWER: D
Which of the following is a valid declaration for a `boolean` variable?
A) boolean b = 0;
B) boolean b = "true";
C) boolean b = true;
D) boolean b = "false";
ANSWER: C
Which of the following is a valid lambda expression in Java?
A) `(a, b) -&gt; a + b`
B) `(int a, int b) -&gt; { return a + b; }`
C) `(a, b) -&gt; { a + b }`
D) Both A and B
ANSWER: D
Which of the following is a valid method reference in Java?
A) `System.out::println`
B) `System.out.println::`
C) `::System.out.println`
D) `println::System.out`
ANSWER: A
Which of the following is a valid static method declaration?
A) `public static void myMethod() {}`
B) `public final static myMethod() {}`
C) `public void static myMethod() {}`
D) `static public void myMethod(void) {}`
ANSWER: A
Which of the following is a valid way to iterate over a Vector?
A) Using a for-each loop
B) Using an iterator
C) Using enumeration
D) All of the above
ANSWER: D
Which of the following is an access modifier in Java?
A) `static`
B) `public`
C) `void`
D) `new`
ANSWER: B
Which of the following is an advantage of Singleton design pattern?
A) Increased memory usage
B) Global point of access to the object
C) Easier debugging
D) Both A and B
ANSWER: B
Which of the following is an immutable class in Java?
A) StringBuilder
B) StringBuffer
C) String
D) ArrayList
ANSWER: C
Which of the following is an infinite `for` loop?
A) ` for(;;) { } `
B) ` for(int i = 0; i &lt; 10; i++) { } `
C) ` for(int i = 0; i &gt; -10; i--) { } `
D) ` for(int i = 0; i != 0; i++) { } `
ANSWER: A
Which of the following is an invalid way to declare a float variable in Java?
A) float f = 3.14;
B) float f = 3.14F;
C) float f = (float) 3.14;
D) float f = 3.14f;
ANSWER: A
Which of the following is correct about constructor invocation in Java?
A) The `new` keyword only allocates memory for the object but doesn't call the constructor
B) The `new` keyword both allocates memory for the object and calls the constructor
C) The `new` keyword only calls the constructor but doesn't allocate memory for the object
D) None of the above
ANSWER: B
Which of the following is NOT a benefit of constructor best practices?
A) Easier debugging
B) Reduced code duplication
C) Easier multithreading
D) Easier to change constructor implementation later
ANSWER: C
Which of the following is not a category of data types in Java?
A) Primitive
B) Reference
C) Object
D) User-defined
ANSWER: D
Which of the following is NOT a component of JVM?
A) Interpreter
B) Garbage Collector
C) Class Loader
D) Compiler
ANSWER: D
Which of the following is NOT a constructor best practice?
A) Keeping constructors simple
B) Using a minimal number of parameters
C) Making constructors do all the object's work
D) Avoiding logic that throws exceptions
ANSWER: C
Which of the following is not a control structure?
A) `if`
B) `for`
C) `while`
D) `print`
ANSWER: D
Which of the following is NOT a garbage collection root?
A) Local variables
B) Static fields
C) Finalizer objects
D) JVM threads
ANSWER: D
Which of the following is NOT a loop optimization technique?
A) Loop unrolling
B) Loop fusion
C) Loop inversion
D) Loop deletion
ANSWER: D
Which of the following is not a part of JDK?
A) JavaFX
B) Javadoc
C) javac
D) JRE
ANSWER: A
Which of the following is NOT a part of JVM's memory management?
A) Heap
B) Stack
C) Pool
D) Cache
ANSWER: D
Which of the following is not a performance consideration when choosing a List implementation?
A) Memory usage
B) Thread safety
C) Sorting order
D) Insertion and deletion time
ANSWER: C
Which of the following is not a pillar of OOP?
A) Inheritance
B) Encapsulation
C) Polymorphism
D) Compilation
ANSWER: D
Which of the following is not a popular IDE plugin?
A) GitLens
B) Maven Helper
C) Docker
D) All of the above are popular
ANSWER: D
Which of the following is not a primitive data type in Java?
A) int
B) char
C) String
D) boolean
ANSWER: C
Which of the following is not a primitive data type in Java?
A) byte
B) short
C) String
D) long
ANSWER: C
Which of the following is not a primitive data type?
A) int
B) char
C) boolean
D) Array
ANSWER: D
Which of the following is not a reason to choose Java over C++ for a particular project?
A) Automatic Garbage Collection
B) Operator Overloading
C) Native Thread Support
D) Platform Independence
ANSWER: B
Which of the following is NOT a remote development solution?
A) SSH
B) RDP
C) FTP
D) None of the above
ANSWER: C
Which of the following is NOT a responsibility of the JVM?
A) Memory management
B) Thread synchronization
C) Source code compilation
D) None of the above
ANSWER: C
Which of the following is not a state in the Java thread life cycle?
A) Running
B) Terminated
C) Paused
D) New
ANSWER: C
Which of the following is not a sub-phase of the Linking phase in JVM?
A) Verification
B) Preparation
C) Resolution
D) Initialization
ANSWER: D
Which of the following is NOT a task of the JIT compiler?
A) Dead code elimination
B) Constant folding
C) Bytecode verification
D) None of the above
ANSWER: C
Which of the following is NOT a type of thread in Java?
A) User Thread
B) Daemon Thread
C) Native Thread
D) Core Thread
ANSWER: D
Which of the following is NOT a valid constructor declaration?
A) `public MyClass() {}`
B) `private MyClass(int x) {}`
C) `MyClass(void) {}`
D) `protected MyClass(String name) {}`
ANSWER: C
Which of the following is not a valid method of the Iterator interface?
A) next()
B) remove()
C) hasNext()
D) add()
ANSWER: D
Which of the following is not a valid way of creating an object in Java?
A) Using `new` keyword
B) Using reflection
C) Using `class` keyword
D) Using cloning
ANSWER: C
Which of the following is NOT a way to break the Singleton pattern?
A) Reflection
B) Serialization
C) Inheritance
D) Multiple Class Loaders
ANSWER: C
Which of the following is not a wrapper class in Java?
A) Integer
B) Float
C) Double
D) Character
ANSWER: D
Which of the following is part of JRE?
A) javac
B) javadoc
C) JVM
D) jshell
ANSWER: C
Which of the following is the correct order of constructor invocation in Java?
A) Subclass constructor, superclass constructor
B) Superclass constructor, subclass constructor
C) Both are invoked simultaneously
D) The order is undefined
ANSWER: B
Which of the following is the correct syntax to declare a class in Java?
A) `class MyClass {}`
B) `MyClass class {}`
C) `new MyClass()`
D) `MyClass: {}`
ANSWER: A
Which of the following is the correct way to call a parameterized constructor from a default constructor in the same class?
A) `this(10);`
B) `super(10);`
C) `constructor(10);`
D) `MyClass(10);`
ANSWER: A
Which of the following is the correct way to check whether two boolean variables `x` and `y` are both `true`?
A) if(x = y = true)
B) if(x &amp;&amp; y)
C) if(x = true &amp;&amp; y = true)
D) if(x == true &amp;&amp; y == true)
ANSWER: D
Which of the following is the correct way to define a custom annotation?
A) `@interface MyAnnotation {}`
B) `interface @MyAnnotation {}`
C) `@MyAnnotation interface {}`
D) `interface {} @MyAnnotation`
ANSWER: A
Which of the following is the correct way to implement a method that returns the square of an integer?
A) `int square(int x) { return x * x; }`
B) `square(int x) { return x * x; }`
C) `int square(x) { return x * x; }`
D) `square = x * x;`
ANSWER: A
Which of the following is true about bytecode?
A) It is platform-dependent
B) It is faster than native machine code
C) It can be executed by any JVM
D) None of the above
ANSWER: C
Which of the following is true about bytecode?
A) It is machine-independent
B) It is machine-dependent
C) It is platform-specific
D) It is not executable
ANSWER: A
Which of the following is true about constructors?
A) They can be inherited
B) They can be overridden
C) They can be overloaded
D) Both A and B
ANSWER: C
Which of the following is true about default constructors in Java?
A) They accept no arguments
B) They are provided by the compiler if no constructor is defined
C) They can be overloaded
D) Both A and B
ANSWER: D
Which of the following is true about nested loops?
A) Inner loops complete all iterations for each iteration of an outer loop
B) Outer loops complete all iterations for each iteration of an inner loop
C) Both loops run in parallel
D) None of the above
ANSWER: A
Which of the following is true about the `equals()` method in the Object class?
A) Compares object references
B) Compares object content
C) Compares hashcodes
D) Compares class types
ANSWER: A
Which of the following is true about the `read()` method of `InputStream` class?
A) Reads a line of text
B) Reads a single character
C) Reads a whole file
D) Reads a word
ANSWER: B
Which of the following is true about the `super` keyword?
A) It refers to the immediate parent class instance
B) It refers to the immediate child class instance
C) It refers to the current class instance
D) None of the above
ANSWER: A
Which of the following is true about the use of access modifiers in constructors?
A) They are used to restrict object creation
B) They have no effect on object creation
C) They enforce encapsulation
D) Both A and C
ANSWER: D
Which of the following is true for an immutable class?
A) It cannot be subclassed
B) It cannot be instantiated
C) Its state cannot be changed once it's created
D) Its methods can be overridden
ANSWER: C
Which of the following is true regarding the JIT compiler?
A) It compiles bytecode just once, at the beginning
B) It compiles bytecode multiple times, on-the-fly
C) It does not compile; it only interprets
D) None of the above
ANSWER: B
Which of the following is used to specify a condition that should be true during the execution of a program?
A) Precondition
B) Assertion
C) Postcondition
D) All of the above
ANSWER: B
Which of the following Java code snippets reads an environment variable named "HOME"?
A) String home = System.getenv("HOME");
B) String home = System.getProperty("HOME");
C) String home = System.getEnv("HOME");
D) None of the above
ANSWER: A
Which of the following JNI function allows you to call a non-static Java method from native code?
A) CallStaticVoidMethod
B) CallVoidMethod
C) CallIntMethod
D) CallObjectMethod
ANSWER: B
Which of the following JVM flags can be used to enable JIT compilation explicitly?
A) -enablejit
B) -Xusejit
C) -XX:+UseJIT
D) None of the above
ANSWER: D
Which of the following JVM flags enables the Garbage Collector log?
A) -XX:+PrintGC
B) -XX:+HeapDump
C) -XX:+TraceClassLoading
D) -XX:+PrintFlagsFinal
ANSWER: A
Which of the following JVM flags sets the maximum heap size?
A) -Xmx
B) -Xms
C) -Xss
D) None of the above
ANSWER: A
Which of the following JVM languages also compiles down to bytecode?
A) Scala
B) Python
C) C++
D) None of the above
ANSWER: A
Which of the following JVM options sets the initial heap size?
A) -Xms
B) -Xmx
C) -XX:PermSize
D) -XX:MaxPermSize
ANSWER: A
Which of the following List implementations uses an array internally?
A) LinkedList
B) Vector
C) CopyOnWriteArrayList
D) Both B and C
ANSWER: D
Which of the following literals is of type `float`?
A) 3.14
B) 3.14f
C) 3.14d
D) 3.14F
ANSWER: B
Which of the following loop optimization techniques aims at reducing the overhead of the loop control code?
A) Loop unrolling
B) Loop fusion
C) Loop inversion
D) Loop splitting
ANSWER: A
Which of the following methods are correctly overloaded?
A) `public void display(int a)` and `public void display(int b)`
B) `public void display(int a)` and `public void display(double a)`
C) `public void display(int a)` and `public int display(int a)`
D) `public void display(int a)` and `public void Display(int a)`
ANSWER: B
Which of the following methods can throw an IndexOutOfBoundsException?
A) get(int index)
B) set(int index, E element)
C) remove(int index)
D) All of the above
ANSWER: D
Which of the following methods cannot be overridden?
A) `public` methods
B) `private` methods
C) `protected` methods
D) `final` methods
ANSWER: D
Which of the following methods does not belong to the `Scanner` class?
A) nextByte()
B) nextFloat()
C) readChar()
D) nextBoolean()
ANSWER: C
Which of the following methods is not a legacy method in Vector?
A) `addElement()`
B) `elementAt()`
C) `removeElement()`
D) `get()`
ANSWER: D
Which of the following methods is not defined in the List interface?
A) add(E e)
B) remove(int index)
C) get(int index)
D) peek()
ANSWER: D
Which of the following methods is not defined in Vector but is defined in List?
A) add()
B) get()
C) capacity()
D) remove()
ANSWER: C
Which of the following metrics would you analyze to determine the efficiency of your garbage collection strategy?
A) CPU utilization
B) Heap occupancy over time
C) Disk usage
D) Network latency
ANSWER: B
Which of the following monitoring tools has a graphical interface?
A) JVisualVM
B) JConsole
C) jstat
D) Both A and B
ANSWER: D
Which of the following operating systems did NOT have JVM support initially?
A) Windows
B) Solaris
C) MacOS
D) Linux
ANSWER: D
Which of the following plugins can help manage dependencies in IntelliJ IDEA?
A) Maven Helper
B) GitLens
C) SonarLint
D) None of the above
ANSWER: A
Which of the following Reflection API methods allows you to access private constructors?
A) `getDeclaredConstructors()`
B) `getConstructors()`
C) `getMethods()`
D) `getFields()`
ANSWER: A
Which of the following Scanner methods can potentially block the execution?
A) next()
B) nextLine()
C) nextInt()
D) All of the above
ANSWER: D
Which of the following steps is not part of the JVM lifecycle?
A) Loading
B) Linking
C) Decompiling
D) Execution
ANSWER: C
Which of the following tools can help in analyzing memory leaks?
A) JConsole
B) YourKit
C) jstat
D) Both A and B
ANSWER: D
Which of the following tools can provide heap dump analysis?
A) YourKit
B) MAT (Memory Analyzer Tool)
C) JVisualVM
D) All of the above
ANSWER: D
Which of the following tools can provide thread dump analysis?
A) JVisualVM
B) JConsole
C) jstat
D) Both A and B
ANSWER: A
Which of the following tools can you use to decompile Java bytecode?
A) jd-gui
B) javac
C) java
D) None of the above
ANSWER: A
Which of the following tools is included in JDK but not in JRE?
A) java
B) javac
C) jar
D) keytool
ANSWER: B
Which of the following tools is not primarily meant for Java cross-compilation?
A) javac
B) crossjavac
C) jlink
D) None of the above
ANSWER: C
Which of the following was NOT a primary goal for Project Oak?
A) Security
B) Robustness
C) Portability
D) High Performance
ANSWER: D
Which of the following was NOT an intended feature of Project Oak?
A) Garbage Collection
B) Multiple Inheritance
C) Network Mobility
D) Security
ANSWER: B
Which of the following would be considered a GC best practice?
A) Use of larger heap sizes always
B) Aiming for zero garbage collection
C) Tuning based on specific application needs
D) Always using the latest GC algorithms
ANSWER: C
Which of the following wrapper classes creates immutable objects?
A) Integer
B) StringBuffer
C) StringBuilder
D) AtomicInteger
ANSWER: A
Which of these can store a null value?
A) int
B) double
C) String
D) boolean
ANSWER: C
Which of these commands can generate Java documentation in HTML?
A) javac
B) java
C) javadoc
D) jar
ANSWER: C
Which of these components is responsible for executing bytecode?
A) Class Loader
B) Method Area
C) Heap Area
D) Execution Engine
ANSWER: D
Which of these contains the bytecode of the methods being executed?
A) Class Loader
B) Method Area
C) Heap Area
D) Stack Area
ANSWER: B
Which of these is a best practice for method design?
A) Making methods do multiple things
B) Making methods as short as possible
C) Hardcoding values within methods
D) Using unclear names for methods
ANSWER: B
Which of these is a correct set of overloaded methods?
A) `void display(int a)` and `void display(int a, double b)`
B) `void display(int a)` and `int display(int a)`
C) `void display(int a)` and `void display(int a, int a)`
D) `void display(int a)` and `void display(int b)`
ANSWER: A
Which of these is a value type?
A) Array
B) Class
C) Primitive type
D) Interface
ANSWER: C
Which of these is a wrapper class for the primitive data type `int`?
A) Int
B) INT
C) Integer
D) Int32
ANSWER: C
Which of these is not a component of JDK?
A) JRE
B) JVM
C) JavaDoc
D) JavaFX
ANSWER: D
Which of these is not a part of the JVM class loading process?
A) Loading
B) Execution
C) Linking
D) Initialization
ANSWER: B
Which of these is NOT a principle in the design of Java?
A) Object-oriented
B) Architecture neutrality
C) Complexity
D) Robust and secure
ANSWER: C
Which of these is not a tuning flag for Garbage Collection?
A) -XX:+UseConcMarkSweepGC
B) -XX:+UnlockExperimentalVMOptions
C) -XX:MaxGCPauseMillis
D) -XX:+UseStringDeduplication
ANSWER: B
Which of these is not a valid way to declare a `double` variable?
A) double d = 3.14;
B) double d = 3.14d;
C) double d = 3.14D;
D) double d = 3.14f;
ANSWER: D
Which of these is NOT part of the JVM architecture?
A) Program Counter Register
B) Garbage Collection Area
C) Heap Area
D) Native Method Stack
ANSWER: B
Which of these JNI types corresponds to a Java long?
A) jlong
B) jdouble
C) jint
D) jfloat
ANSWER: A
Which of these languages directly influenced the creation of Java?
A) FORTRAN
B) C++
C) Ruby
D) Pascal
ANSWER: B
Which of these reference types is thread-safe?
A) StringBuilder
B) StringBuffer
C) ArrayList
D) HashSet
ANSWER: B
Which of these statements about the original design of Java is true?
A) It was designed for high performance
B) It was designed to support multiple inheritance
C) It was designed to be simple and easy to use
D) It was designed to be dependent on a specific hardware
ANSWER: C
Which of these tools can be used for advanced memory profiling?
A) YourKit
B) MAT (Memory Analyzer Tool)
C) JConsole
D) Both A and B
ANSWER: D
Which of these was a direct competitor to Project Oak in its initial focus area?
A) C++
B) Python
C) BETA
D) None of the above
ANSWER: D
Which of these was the primary focus during the initial development of Java?
A) Cloud Computing
B) Internet Programming
C) Data Analysis
D) Interactive Television
ANSWER: D
Which of these will be executed first when overloading methods? `void display(int a, double b)` and `void display(double a, int b)`
A) Depends on the order of declaration
B) The one with int as the first parameter
C) The one with double as the first parameter
D) None of the above
ANSWER: D
Which one is NOT a part of the Java execution process?
A) Source Code Creation
B) Syntax Checking
C) Bytecode Verification
D) Execution
ANSWER: B
Which one of these was NOT one of the main goals in the creation of Java?
A) Portability
B) Performance
C) Robustness
D) Security
ANSWER: B
Which option helps to tune the size of the survivor spaces in the heap?
A) -XX:SurvivorRatio
B) -XX:NewSize
C) -XX:NewRatio
D) -XX:MaxNewSize
ANSWER: A
Which option is used to set the size of the stack?
A) -Xmx
B) -Xms
C) -Xss
D) -XX:ThreadStackSize
ANSWER: C
Which option is used to set the size of the Young Generation?
A) -XX:NewSize
B) -XX:OldSize
C) -XX:PermSize
D) -XX:SurvivorRatio
ANSWER: A
Which option will enable GC logging?
A) -XX:+PrintGCDetails
B) -XX:+PrintGCStats
C) -verbose:gc
D) All of the above
ANSWER: A
Which package contains the `Random` class in Java?
A) java.lang
B) java.util
C) java.math
D) java.io
ANSWER: B
Which package manager can be used to install JDK on macOS?
A) apt
B) brew
C) yum
D) pacman
ANSWER: B
Which package was introduced in Java 1.1 to support complex UI development?
A) javax.swing
B) java.awt
C) java.ui
D) java.fx
ANSWER: B
Which part of the Java Execution Architecture Process is optional?
A) Class Loading
B) Just-In-Time Compilation
C) Bytecode Verification
D) None of the above
ANSWER: B
Which part of the JVM executes the bytecode?
A) JIT compiler
B) Execution Engine
C) Class Loader
D) None of the above
ANSWER: B
Which part of the JVM is responsible for loading .class files?
A) JIT Compiler
B) Class Loader
C) Execution Engine
D) None of the above
ANSWER: B
Which part of the JVM is thread-safe?
A) Heap Area
B) Method Area
C) Stack Area
D) All of the above
ANSWER: C
Which part of the method declaration specifies what the method will return?
A) Method name
B) Parameter list
C) Return type
D) Access modifier
ANSWER: C
Which part of the object header is optional and may be used by JVM optimizations?
A) Lock information
B) Class metadata
C) Object age
D) Forwarding pointer
ANSWER: D
Which pattern is most suitable for handling a large number of constructor parameters effectively?
A) Singleton Pattern
B) Factory Pattern
C) Builder Pattern
D) Telescoping Constructor Pattern
ANSWER: C
Which permission must be granted to run a Java program with a Security Manager?
A) RuntimePermission
B) executePermission
C) AllPermission
D) None of the above
ANSWER: C
Which phase comes after class loading in the JVM lifecycle?
A) Initialization
B) Linking
C) Execution
D) Termination
ANSWER: B
Which phase comes immediately after class loading in the Java execution process?
A) Bytecode Verification
B) Just-In-Time Compilation
C) Execution
D) Garbage Collection
ANSWER: A
Which phase of class loading is responsible for memory allocation for a class's static variables?
A) Linking
B) Initialization
C) Loading
D) None of the above
ANSWER: B
Which protocol is NOT directly supported by Java's native networking API?
A) HTTP
B) FTP
C) SNMP
D) TCP/IP
ANSWER: C
Which real-world applications have been known to benefit significantly from GC tuning?
A) Real-time systems
B) Data analytics applications
C) Large-scale web services
D) All of the above
ANSWER: D
Which release first introduced pattern matching as a preview feature?
A) 16
B) 17
C) 18
D) 19
ANSWER: A
Which Scanner method would you use to read a double value?
A) nextDouble()
B) nextFloat()
C) readDouble()
D) getDouble()
ANSWER: A
Which space contains object arrays and instances of user-defined classes?
A) Eden Space
B) Survivor Space
C) Old Generation
D) Metaspace
ANSWER: C
Which statement about the `volatile` keyword is true?
A) It guarantees atomicity
B) It ensures visibility across threads
C) It locks the variable
D) It schedules the thread
ANSWER: B
Which step involves allocating memory for class variables?
A) Loading
B) Verification
C) Preparation
D) Initialization
ANSWER: C
Which tool can be used to analyze detailed GC logs?
A) JVisualVM
B) MAT (Memory Analyzer Tool)
C) GCViewer
D) YourKit
ANSWER: C
Which tool can help in identifying the root cause of a memory leak?
A) jstack
B) heap dump analyzer
C) javac
D) jstat
ANSWER: B
Which tool converts bytecode into source code?
A) Decompiler
B) Compiler
C) Linker
D) None of the above
ANSWER: A
Which tool in JDK is used for bytecode disassembly?
A) javap
B) jstat
C) jinfo
D) jdb
ANSWER: A
Which tool is commonly used for heap dump analysis to identify memory leaks?
A) JVisualVM
B) JConsole
C) jstat
D) javap
ANSWER: A
Which tool is primarily used for continuous inspection of code quality?
A) JUnit
B) SonarQube
C) Git
D) Jenkins
ANSWER: B
Which tool is used to sign Java code?
A) jar
B) jarsigner
C) keytool
D) jdk
ANSWER: B
Which tool would you use to perform CPU and memory profiling?
A) JVisualVM
B) JConsole
C) jstat
D) jinfo
ANSWER: A
Which type of garbage collector is the default in most modern JVMs?
A) Parallel GC
B) G1 GC
C) CMS GC
D) None of the above
ANSWER: B
Which version of Java introduced records as a preview feature?
A) 14
B) 15
C) 16
D) 17
ANSWER: B
Which version of Java introduced the `ForkJoinPool` framework?
A) Java 5
B) Java 6
C) Java 7
D) Java 8
ANSWER: C
Which version of Java introduced the `jshell`?
A) Java 8
B) Java 9
C) Java 7
D) Java 10
ANSWER: B
Which version of Java introduced the `try-with-resources` statement?
A) 5
B) 6
C) 7
D) 8
ANSWER: C
Which version of Java introduced the concept of "Write Once, Run Anywhere"?
A) Java 1.0
B) Java 1.2
C) Java 2
D) Java 5
ANSWER: A
Which version of Java removed the `Applet` API?
A) 9
B) 10
C) 11
D) 12
ANSWER: C
Which version of JDK introduced the 'var' keyword?
A) JDK 8
B) JDK 9
C) JDK 10
D) JDK 11
ANSWER: C
Who acquired Sun Microsystems in 2010?
A) IBM
B) Oracle
C) Google
D) Microsoft
ANSWER: B
Who is credited with the creation of the Java programming language?
A) Bill Gates
B) Dennis Ritchie
C) James Gosling
D) Guido van Rossum
ANSWER: C
Who opposed Oracle's acquisition of Sun Microsystems?
A) IBM
B) Google
C) European Union
D) Microsoft
ANSWER: C
Who was Oracle's CEO at the time of the acquisition?
A) Larry Ellison
B) Safra Catz
C) Mark Hurd
D) Bob Miner
ANSWER: A
Who was responsible for Java's development at Oracle post-acquisition?
A) Oracle Java Platform Group
B) Oracle Cloud Division
C) Sun Microsystems' original Java team
D) Oracle Database Team
ANSWER: A
Who was the key person behind Project Oak?
A) Bill Joy
B) Patrick Naughton
C) James Gosling
D) Mike Sheridan
ANSWER: C
Who was the original creator of Java?
A) Bill Joy
B) Patrick Naughton
C) James Gosling
D) Mike Sheridan
ANSWER: C
Who were the initial team members of the Green Project where Oak was developed?
A) James Gosling, Mike Sheridan, Patrick Naughton
B) Bill Joy, James Gosling, Andy Bechtolsheim
C) Scott McNealy, Bill Joy, Vinod Dham
D) None of the above
ANSWER: A
Who wrote the original Java whitepaper?
A) James Gosling
B) Bill Joy
C) Mike Sheridan
D) Patrick Naughton
ANSWER: B
Why are constructors important in Java?
A) They provide a way to set initial values for object attributes
B) They are used to create objects
C) They initialize the newly created object
D) All of the above
ANSWER: D
Why are control structures essential in programming?
A) They make code easier to read
B) They allow for decision-making and looping
C) They reduce memory usage
D) They make the program run faster
ANSWER: B
Why is Java considered to be 'architecturally neutral'?
A) It supports all operating systems
B) It can be executed on any machine through the JVM
C) Its compiler can be installed on any device
D) It has a neutral impact on system architecture
ANSWER: B
Why is understanding padding important in JVM object layout?
A) To reduce object size
B) To speed up object creation
C) To reduce memory waste
D) To improve code readability
ANSWER: C
Why should you be cautious while using `CopyOnWriteArrayList` for write-heavy systems?
A) Thread contention
B) Memory overhead
C) Poor read performance
D) It's not thread-safe
ANSWER: B
Why was the name "Oak" chosen for the project?
A) It is an acronym
B) Named after an oak tree outside James Gosling's office
C) Named after Oak Street
D) None of the above
ANSWER: B
Why was the name "Oak" later changed to "Java"?
A) Trademark issues
B) Marketing reasons
C) The team didn't like the name
D) A and B
ANSWER: D
Why would you make a class immutable?
A) To improve security
B) To facilitate parallel processing
C) To simplify debugging
D) All of the above
ANSWER: D
Why would you use the `firstElement()` and `lastElement()` methods?
A) To add elements to the Vector
B) To get the first and last elements without removing them
C) To remove and return the first and last elements
D) To sort the Vector
ANSWER: B
