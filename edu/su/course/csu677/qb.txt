In JavaScript, which of the following operators has the highest precedence?
A. Exponentiation (**)
B. Addition (+)
C. Modulus (%)
D. Logical AND (&&)
ANSWER: A

What is the output of the following code: 'console.log(5 + 2 * 3);'?
A. 21
B. 7
C. 11
D. 10
ANSWER: C

Which operator in JavaScript checks both value and type equality?
A. ==
B. !=
C. ===
D. !==
ANSWER: C

Which of the following operators is left-associative in JavaScript?
A. Addition (+)
B. Exponentiation (**)
C. Assignment (=)
D. Ternary (?:)
ANSWER: A

What is the output of the following code: 'console.log(2 ** 3 ** 2);'?
A. 64
B. 8
C. 512
D. 6
ANSWER: C

Which of the following JavaScript operators does NOT follow right-associativity?
A. Exponentiation (**)
B. Assignment (=)
C. Ternary (?:)
D. Multiplication (*)
ANSWER: D

Which operator has the lowest precedence in JavaScript?
A. Comma (,)
B. Assignment (=)
C. Logical AND (&&)
D. Conditional (?:)
ANSWER: A

What does the 'delete' operator do in JavaScript?
A. Removes an element from an array
B. Deletes an object property
C. Removes an object instance
D. Nullifies a variable
ANSWER: B

What is the output of the following code: 'let a = 5; console.log(a++);'?
A. 6
B. 5
C. 4
D. NaN
ANSWER: B

Which operator is used to check if a property exists in an object in JavaScript?
A. instanceof
B. in
C. typeof
D. void
ANSWER: B

What is the output of 'console.log(5 == '5');'?
A. true
B. false
C. undefined
D. TypeError
ANSWER: A

Which JavaScript operator forces the grouping of expressions to control precedence?
A. Parentheses ()
B. Comma (,)
C. Logical AND (&&)
D. Modulus (%)
ANSWER: A

In JavaScript, the 'typeof' operator is used for which of the following?
A. Check an object’s constructor
B. Determine the data type of a variable
C. Evaluate an expression's return value
D. Remove an object property
ANSWER: B

Which operator has a higher precedence in JavaScript?
A. Addition (+)
B. Modulus (%)
C. Logical NOT (!)
D. Bitwise OR (|)
ANSWER: C

Which operator will return true only if both operands are true?
A. Logical AND (&&)
B. Bitwise AND (&)
C. Logical OR (||)
D. Bitwise OR (|)
ANSWER: A

What is the output of 'console.log(10 % 4);'?
A. 2
B. 0
C. 6
D. 10
ANSWER: A

Which of the following operators returns a boolean value in JavaScript?
A. typeof
B. delete
C. ||
D. +
ANSWER: C

What is the result of 'console.log(typeof null);'?
A. 'null'
B. 'object'
C. 'undefined'
D. 'number'
ANSWER: B

Which of the following is a right-associative operator in JavaScript?
A. Exponentiation (**)
B. Addition (+)
C. Division (/)
D. Logical AND (&&)
ANSWER: A

What is the output of 'console.log(3 + 4 * 5);'?
A. 23
B. 35
C. 7
D. 12
ANSWER: A

Which of the following operators is used for string concatenation in JavaScript?
A. +
B. ,
C. &&
D. ||
ANSWER: A

What does the comma operator (,) do in JavaScript?
A. Separates multiple function arguments
B. Executes each of its operands and returns the last one
C. Groups multiple expressions
D. Joins two strings
ANSWER: B

Which operator is used to check if an object is an instance of a particular class in JavaScript?
A. in
B. typeof
C. instanceof
D. delete
ANSWER: C

What is the output of the following code: 'let x = (5 + 3) * 2; console.log(x);'?
A. 13
B. 16
C. 10
D. 8
ANSWER: B

Which operator is used for creating a new instance of an object in JavaScript?
A. new
B. typeof
C. in
D. instanceof
ANSWER: A

What is the output of 'console.log(5 > 3 > 1);'?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What does the 'void' operator do in JavaScript?
A. Deletes an object property
B. Returns undefined
C. Skips the next expression
D. Replaces a value with null
ANSWER: B

What is the associativity of the addition operator (+) in JavaScript?
A. Left
B. Right
C. None
D. Unary
ANSWER: A

Which of the following operators allows you to execute code based on a condition?
A. Ternary (?:)
B. Logical OR (||)
C. Equality (==)
D. Assignment (=)
ANSWER: A

What is the result of 'console.log(3 ** (2 ** 2));'?
A. 81
B. 9
C. 16
D. 27
ANSWER: A

What will 'console.log(2 * 2 + 2);' output?
A. 6
B. 8
C. 10
D. 4
ANSWER: A

Which operator is used for strict inequality comparison in JavaScript?
A. !=
B. !==
C. &lt;
D. >
ANSWER: B

What is the result of the expression '(5 + 2) * 3;'?
A. 11
B. 21
C. 15
D. 23
ANSWER: B

What is the result of 'console.log(true && false);'?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

Which operator checks if a value is equal but ignores the data type?
A. ==
B. ===
C. !==
D. !===
ANSWER: A

What is the result of 'console.log("5" + 2);'?
A. "52"
B. 7
C. 5
D. "7"
ANSWER: A

Which of the following operators will return the first true operand?
A. &&
B. ||
C. +
D. **
ANSWER: B

What is the output of 'console.log(typeof NaN);'?
A. 'number'
B. 'undefined'
C. 'NaN'
D. 'string'
ANSWER: A

Which operator in JavaScript is used to delete an object property?
A. delete
B. void
C. typeof
D. new
ANSWER: A

What is the output of 'console.log(!!0);'?
A. true
B. false
C. 0
D. NaN
ANSWER: B

What does 'console.log(5 && 2);' output?
A. 2
B. 5
C. false
D. true
ANSWER: A

Which operator can be used to discard the result of an expression?
A. void
B. delete
C. new
D. typeof
ANSWER: A

What is the result of 'console.log(2 ** (3 ** 2));'?
A. 512
B. 64
C. 8
D. 9
ANSWER: A

Which operator in JavaScript forces type conversion?
A. ==
B. ===
C. &&
D. !=
ANSWER: A

What is the output of 'console.log(false || true);'?
A. false
B. true
C. undefined
D. NaN
ANSWER: B

What does the exponentiation operator (**) do in JavaScript?
A. Returns a number raised to a power
B. Multiplies two numbers
C. Divides two numbers
D. Returns the modulus
ANSWER: A

What is the result of 'console.log(1 + "2");'?
A. "12"
B. 3
C. 1
D. NaN
ANSWER: A

Which operator will return true if at least one operand is true?
A. ||
B. &&
C. !
D. ==
ANSWER: A

What is the output of 'console.log(5 !== "5");'?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

Which of the following operators checks if two values are NOT equal in both value and type?
A. !==
B. ==
C. !=
D. ===
ANSWER: A

What is a data type in programming?
A. A classification that specifies the type of value a variable can hold
B. A variable that can store only string values
C. A programming function that handles memory
D. An operator used for arithmetic operations
ANSWER: A

Why are data types important in programming?
A. They define how many variables can be declared
B. They ensure operations and values are interpreted correctly
C. They limit the memory usage of a program
D. They only apply to statically typed languages
ANSWER: B

Which data type represents whole numbers?
A. String
B. Integer
C. Boolean
D. Symbol
ANSWER: B

What does memory allocation depend on in programming?
A. The length of the code
B. The size of the data type
C. The variable name
D. The data type of the previous variable
ANSWER: B

Which of the following is not a primitive data type in JavaScript?
A. Number
B. BigInt
C. Object
D. Symbol
ANSWER: C

What does JavaScript’s 'Number' data type represent?
A. Only integers
B. Only floating-point numbers
C. Both integers and floating-point numbers
D. Strings and numbers
ANSWER: C

Which JavaScript primitive data type represents a logical value?
A. Boolean
B. String
C. Number
D. BigInt
ANSWER: A

Which special value does the 'Number' type include?
A. null
B. NaN
C. undefined
D. Symbol
ANSWER: B

What does the BigInt data type in JavaScript allow?
A. Representation of floating-point numbers
B. Representation of numbers larger than Number.MAX_SAFE_INTEGER
C. Conversion of numbers to strings
D. Concatenation of large numbers
ANSWER: B

How is a string represented in JavaScript?
A. As a sequence of numbers
B. As a sequence of characters
C. As a boolean value
D. As an integer
ANSWER: B

What is the result of the expression 'typeof 42' in JavaScript?
A. "string"
B. "boolean"
C. "number"
D. "undefined"
ANSWER: C

What is the purpose of the 'typeof' operator in JavaScript?
A. To create a new data type
B. To convert a value to a specific type
C. To return the type of a value
D. To check for undefined values
ANSWER: C

Which of the following is mutable in JavaScript?
A. Strings
B. Numbers
C. Arrays
D. Booleans
ANSWER: C

Which of the following is an example of a dynamically typed language?
A. C
B. Java
C. JavaScript
D. C++
ANSWER: C

What does 'undefined' represent in JavaScript?
A. A variable that has not been declared
B. A variable that has been declared but not assigned a value
C. A value that represents an object
D. A symbol used in key-value pairs
ANSWER: B

What does the term 'type coercion' refer to in JavaScript?
A. Manually converting a value to another type
B. Automatically converting a value to another type
C. Checking for undefined variables
D. Throwing an error when types do not match
ANSWER: B

What is the output of the following code? let x = 5 + '5'; console.log(x);
A. 10
B. 55
C. NaN
D. undefined
ANSWER: B

What does the 'null' value represent in JavaScript?
A. A non-existent function
B. An uninitialized variable
C. The intentional absence of any object value
D. A default value for undeclared variables
ANSWER: C

Which of the following is an example of implicit type conversion in JavaScript?
A. String(42)
B. Number("42")
C. 5 + '5'
D. parseInt('42')
ANSWER: C

What is the difference between statically typed and dynamically typed languages?
A. Statically typed languages allow type changes at runtime
B. Dynamically typed languages require type declarations at compile-time
C. Dynamically typed languages determine type at runtime
D. Statically typed languages are used only in low-level programming
ANSWER: C

What is a 'Symbol' used for in JavaScript?
A. To create unique object keys
B. To store large numbers
C. To handle boolean values
D. To represent undefined values
ANSWER: A

In JavaScript, which of the following is immutable?
A. Object
B. Array
C. String
D. Map
ANSWER: C

What does 'NaN' stand for in JavaScript?
A. Not a Null
B. New Assigned Number
C. Number after Null
D. Not a Number
ANSWER: D

What is the primary purpose of strict mode in JavaScript?
A. To allow type coercion
B. To enable dynamic typing
C. To catch errors related to variable declarations and types
D. To declare new primitive data types
ANSWER: C

Which of the following values can a boolean represent in JavaScript?
A. true and 1
B. true and false
C. true and NaN
D. true and undefined
ANSWER: B

Which type of data structure is an 'Array' in JavaScript?
A. Unordered collection of values
B. Ordered list of values
C. Key-value pair collection
D. Immutable sequence of characters
ANSWER: B

What is the output of the following code? let arr = [1, 2, 3]; arr.push(4); console.log(arr);
A. [1, 2, 3]
B. [1, 2, 3, 4]
C. [4, 1, 2, 3]
D. [2, 3, 4]
ANSWER: B

What is the result of the following code? let bigNum = 1234567890123456789012345678901234567890n; console.log(typeof bigNum);
A. "string"
B. "number"
C. "bigint"
D. "symbol"
ANSWER: C

Which of the following operations will cause a TypeError in JavaScript?
A. 'let x = undefined + 5;'
B. 'let y = null.length;'
C. 'let z = '5' - 2;'
D. 'let w = 'hello'.toUpperCase();'
ANSWER: B

Which of the following is a way to check if an object is an instance of a specific constructor?
A. typeof
B. instanceof
C. constructorOf
D. isType
ANSWER: B

What will be the result of the following code? let now = new Date(); console.log(typeof now);
A. "object"
B. "string"
C. "date"
D. "number"
ANSWER: A

Which of the following is used to match patterns in strings in JavaScript?
A. Symbol
B. Object
C. RegExp
D. Function
ANSWER: C

What does the 'new Date()' constructor return in JavaScript?
A. A date string
B. The current time as a string
C. An object representing a moment in time
D. A timestamp
ANSWER: C

What happens when you assign a new value to a constant object in JavaScript?
A. The object is redefined
B. The reference to the object remains unchanged
C. The object is converted to a string
D. The object is cloned
ANSWER: B

What is the purpose of a 'Map' in JavaScript?
A. To store key-value pairs
B. To create anonymous object properties
C. To enforce type safety
D. To handle errors
ANSWER: A

What is the result of coercion in JavaScript?
A. Converting one data type to another
B. Catching errors during variable declaration
C. Preventing runtime errors
D. Converting functions to objects
ANSWER: A

How does TypeScript help JavaScript developers?
A. By allowing implicit conversions
B. By introducing static typing
C. By providing mutable data types
D. By enforcing dynamic types at runtime
ANSWER: B

What does the expression 'person instanceof Object' evaluate to if 'person' is an object?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What is the purpose of the 'try...catch' block in JavaScript?
A. To handle errors during type coercion
B. To prevent data loss in immutable data types
C. To catch and handle runtime errors
D. To enforce static typing
ANSWER: C

Which of the following is a key difference between arrays and objects in JavaScript?
A. Arrays are unordered, while objects are ordered
B. Arrays are mutable, while objects are immutable
C. Arrays use indexed keys, while objects use named keys
D. Arrays store key-value pairs, while objects store a sequence of values
ANSWER: C

Which of the following is an example of explicit type conversion in JavaScript?
A. let result = 5 + '5';
B. let result = String(5);
C. let result = 5 - '5';
D. let result = typeof 5;
ANSWER: B

What will be the result of the following code? let sym1 = Symbol('test'); let sym2 = Symbol('test'); console.log(sym1 === sym2);
A. true
B. false
C. undefined
D. NaN
ANSWER: B

Which statement is correct regarding static typing in TypeScript?
A. It allows types to change at runtime
B. It prevents runtime errors by enforcing type checks during development
C. It forces dynamic type assignments
D. It requires using only primitive data types
ANSWER: B

What is the primary use of JavaScript in web development?
A. To handle server-side processing
B. To style web pages
C. To create dynamic, interactive web experiences
D. To manage databases
ANSWER: C

Which characteristic of JavaScript allows it to change the type of a variable at runtime?
A. Event-driven
B. Prototype-based
C. Dynamic typing
D. First-class functions
ANSWER: C

JavaScript is considered a ____ language because it does not need prior compilation.
A. Statically typed
B. Compiled
C. Interpreted
D. Strongly typed
ANSWER: C

How does JavaScript handle inheritance?
A. Using classes and interfaces
B. Using prototype-based inheritance
C. Using interfaces
D. Using packages
ANSWER: B

Which of the following is NOT a primitive data type in JavaScript?
A. String
B. Number
C. Object
D. Boolean
ANSWER: C

Which method in JavaScript is used to remove the last element of an array?
A. pop()
B. shift()
C. slice()
D. splice()
ANSWER: A

In JavaScript, functions are considered first-class citizens. Which of the following is NOT a first-class function behavior?
A. Functions can be passed as arguments
B. Functions can be returned from other functions
C. Functions can hold state across executions
D. Functions can be assigned to variables
ANSWER: C

What does the '===' operator do in JavaScript?
A. Compares two values, checking only the value
B. Compares two values, checking both value and type
C. Compares two objects for equality of reference
D. Assigns one value to another
ANSWER: B

What is the output of the following JavaScript code? let x; console.log(x);
A. undefined
B. null
C. Error: variable not declared
D. 0
ANSWER: A

Which of the following will NOT throw an error in JavaScript?
A. let a = 5 + '5';
B. let b = a * 'text';
C. console.log(undefinedVariable);
D. let obj = {key: 'value'};
ANSWER: A

How do you access the length of an array in JavaScript?
A. array.count
B. array.length()
C. array.size()
D. array.length
ANSWER: D

Which JavaScript method is used to call a function after a specified time?
A. setInterval()
B. setTimeout()
C. callLater()
D. delayFunction()
ANSWER: B

Which of the following statements is true about "hoisting" in JavaScript?
A. Function expressions are hoisted to the top of their scope
B. Function declarations are hoisted, but expressions are not
C. Variables and functions are not hoisted
D. Variables declared with 'let' are hoisted like 'var'
ANSWER: B

What is the result of the following code? console.log(5 == '5');
A. true
B. false
C. null
D. Error
ANSWER: A

What will 'console.log([] == []);' output?
A. true
B. false
C. undefined
D. Error
ANSWER: B

In JavaScript, the 'rest' parameter allows functions to:
A. Collect multiple arguments into an array
B. Return multiple values
C. Throw multiple exceptions
D. Store function state
ANSWER: A

What is the purpose of the 'this' keyword in JavaScript?
A. Refers to the global object in all cases
B. Refers to the current function's scope
C. Refers to the object that called the function
D. Refers to the most recently declared variable
ANSWER: C

Which operator would you use to find the remainder of a division in JavaScript?
A. /
B. %
C. //
D. mod
ANSWER: B

What will the following code output? let a = [1, 2, 3]; console.log(typeof a);
A. object
B. array
C. number
D. string
ANSWER: A

What does 'null' represent in JavaScript?
A. An object that has no properties
B. An intentional absence of any object value
C. A function that is undefined
D. A variable that has not been initialized
ANSWER: B

Which of the following correctly creates a new object in JavaScript?
A. var obj = Object.create();
B. var obj = new Object();
C. var obj = Object();
D. var obj = Object.new();
ANSWER: B

Which of the following loops will execute the block at least once, even if the condition is false?
A. for loop
B. while loop
C. do...while loop
D. break loop
ANSWER: C

Which method is used to add a new element to the end of an array in JavaScript?
A. shift()
B. append()
C. unshift()
D. push()
ANSWER: D

What is the role of the 'resolve' function in a Promise?
A. It catches errors in the promise
B. It triggers the promise to reject
C. It marks the promise as completed successfully
D. It pauses the execution of the promise
ANSWER: C

Which of the following is an example of event delegation?
A. Assigning events to all child elements individually
B. Assigning an event to a parent that manages child element events
C. Assigning a click event to an element
D. Using inline event handlers
ANSWER: B

What does the term "callback hell" refer to?
A. Nested callbacks that make code difficult to read
B. Asynchronous code that fails to execute properly
C. Promises that fail due to unhandled rejections
D. Errors that occur in callback functions
ANSWER: A

In the context of promises, what does 'Promise.all()' do?
A. Returns the first resolved promise
B. Executes all promises sequentially
C. Waits for all promises to resolve or reject
D. Only returns promises that resolve successfully
ANSWER: C

Which of the following is not a valid way to declare a function in JavaScript?
A. function myFunc() {}
B. let myFunc = function() {};
C. const myFunc = () => {};
D. myFunc() => {}
ANSWER: D

What is the correct way to declare a constant in JavaScript?
A. var myVar = 10;
B. const myVar = 10;
C. let myVar = 10;
D. define myVar = 10;
ANSWER: B

Which function method would you use to iterate over every element in an array?
A. forEach()
B. map()
C. filter()
D. reduce()
ANSWER: A

What does the 'async' keyword do when applied to a function in JavaScript?
A. It turns the function into a generator
B. It allows the function to return a promise
C. It makes the function synchronous
D. It schedules the function to run after a timeout
ANSWER: B

What will be the output of the following code? console.log(3 + 4 + "5");
A. 75
B. 345
C. 12
D. "12"
ANSWER: A

Which of the following methods is used to parse a JSON string in JavaScript?
A. JSON.parse()
B. JSON.stringify()
C. JSON.convert()
D. JSON.decode()
ANSWER: A

Which of the following correctly describes the result of hoisting a variable declared with 'let'?
A. It behaves the same as 'var'
B. It is accessible before its declaration
C. It exists in the Temporal Dead Zone until initialized
D. It is not hoisted at all
ANSWER: C

What does the method 'event.preventDefault()' do?
A. Prevents the event from triggering
B. Stops the browser's default action for the event
C. Stops event propagation
D. Prevents the event handler from being removed
ANSWER: B

Which method is used to remove whitespace from both ends of a string in JavaScript?
A. strip()
B. trim()
C. slice()
D. substr()
ANSWER: B

In JavaScript, which statement about arrow functions is NOT true?
A. Arrow functions do not have their own 'this'
B. Arrow functions cannot be used as constructors
C. Arrow functions allow implicit return for single expressions
D. Arrow functions bind 'this' at runtime
ANSWER: D

What is the output of the following code? let a = 10 + true; console.log(a);
A. 10
B. 11
C. NaN
D. Error
ANSWER: B

Which statement is true about the 'delete' operator in JavaScript?
A. It deletes variables from memory
B. It deletes properties from an object
C. It deletes methods from the global scope
D. It deletes references from arrays
ANSWER: B

Which keyword is used to handle errors in JavaScript?
A. throw
B. catch
C. try
D. finally
ANSWER: C

Which statement is true about closures in JavaScript?
A. They encapsulate code for reusability
B. They allow functions to access variables from an enclosing scope
C. They prevent variables from being accessed outside their scope
D. They allow asynchronous code to execute synchronously
ANSWER: B

What will the following code output? const name = 'Alice'; const greeting = 'Hello, ${name}'; console.log(greeting);
A. Hello, ${name}
B. Hello, Alice
C. Hello, 'Alice'
D. Undefined
ANSWER: B

What is the correct way to check if a variable is an array in JavaScript?
A. typeof variable === 'array'
B. variable instanceof Array
C. Array.isArray(variable)
D. variable instanceof Object
ANSWER: C

What is the purpose of the '!DOCTYPE html' declaration in an HTML document?
A. To define the document's title
B. To specify the character encoding of the document
C. To declare the document type and version of HTML
D. To add meta-information about the document
ANSWER: C

Which of the following elements is considered the root element in an HTML document?
A. &lt;head>
B. &lt;html>
C. &lt;body>
D. &lt;meta>
ANSWER: B

What tag is used to define metadata about the HTML document that is not displayed on the webpage?
A. &lt;meta>
B. &lt;link>
C. &lt;head>
D. &lt;title>
ANSWER: C

Which of the following HTML elements is responsible for displaying content visible on the webpage?
A. &lt;head>
B. &lt;meta>
C. &lt;html>
D. &lt;body>
ANSWER: D

Which tag is used to create a hyperlink to another webpage or section within a webpage?
A. &lt;p>
B. &lt;a>
C. &lt;link>
D. &lt;h1>
ANSWER: B

Which of the following HTML elements is NOT a semantic element?
A. &lt;nav>
B. &lt;div>
C. &lt;header>
D. &lt;footer>
ANSWER: B

What does the 'img' tag require in order to display an image on the webpage?
A. href and src
B. src and alt
C. alt and link
D. href and alt
ANSWER: B

How many heading levels are available in HTML, starting from the most important?
A. 5
B. 6
C. 7
D. 4
ANSWER: B

What is the purpose of the alt attribute in the 'img' tag?
A. To provide a clickable link for the image
B. To display the image on all devices
C. To describe the image for users with disabilities
D. To link the image to a CSS file
ANSWER: C

Which HTML tag is used to define a block of text that is treated as a paragraph?
A. &lt;div>
B. &lt;h1>
C. &lt;p>
D. &lt;span>
ANSWER: C

What is the correct way to link a CSS stylesheet to an HTML document?
A. &lt;meta charset="UTF-8">
B. &lt;link rel="stylesheet" href="styles.css">
C. &lt;script src="styles.css">
D. &lt;style src="styles.css">
ANSWER: B

Which of the following best describes "Semantic HTML"?
A. HTML that is error-free
B. HTML that improves accessibility and SEO
C. HTML used only for visual elements
D. HTML that includes JavaScript functions
ANSWER: B

Where should the 'meta charset="UTF-8"' tag be placed in an HTML document?
A. Inside the &lt;body> tag
B. After the &lt;html> tag
C. Inside the &lt;head> tag
D. Before the &lt;head> tag
ANSWER: C

Which of the following is NOT part of the basic structure of an HTML document?
A. &lt;footer>
B. &lt;head>
C. &lt;body>
D. &lt;html>
ANSWER: A

Which of the following tags is used to define a section of navigation links in HTML?
A. &lt;footer>
B. &lt;nav>
C. &lt;aside>
D. &lt;header>
ANSWER: B

The 'article' tag is used to define which type of content?
A. Metadata about the webpage
B. A self-contained piece of content
C. The title of the webpage
D. The footer of a webpage
ANSWER: B

In an HTML document, what is the function of the 'title' tag?
A. To define the page’s main heading
B. To specify the page's title shown on the browser tab
C. To define the header of the webpage
D. To display the title inside the webpage
ANSWER: B

Which of the following tags is used to group block-level content for CSS styling purposes?
A. &lt;section>
B. &lt;div>
C. &lt;span>
D. &lt;header>
ANSWER: B

What should be included in the 'head' section to make sure a webpage is displayed properly on different devices?
A. &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
B. &lt;meta charset="UTF-8">
C. &lt;link rel="stylesheet" href="styles.css">
D. &lt;script src="script.js">
ANSWER: A

Which tag is used to define a footer for a webpage?
A. &lt;header>
B. &lt;nav>
C. &lt;footer>
D. &lt;aside>
ANSWER: C

Which tag should always be included at the top of any HTML document?
A. &lt;html>
B. &lt;meta>
C. &lt;header>
D. &lt;!DOCTYPE html>
ANSWER: D

How would you link to an external website from an HTML document?
A. &lt;a href="http://example.com">Example&lt;/a>
B. &lt;link href="http://example.com">Example&lt;/link>
C. &lt;meta href="http://example.com">Example&lt;/meta>
D. &lt;div href="http://example.com">Example&lt;/div>
ANSWER: A

What does the following code do? &lt;meta charset="UTF-8">
A. Sets the character encoding for the webpage to UTF-8
B. Links a CSS file to the webpage
C. Adds a heading to the webpage
D. Links a JavaScript file to the webpage
ANSWER: A

Which tag is used to include an image in an HTML document?
A. &lt;a>
B. &lt;img>
C. &lt;span>
D. &lt;figure>
ANSWER: B

What is the correct format for creating an ordered list in HTML?
A. &lt;ol>&lt;li>Item&lt;/li>&lt;/ol>
B. &lt;ul>&lt;li>Item&lt;/li>&lt;/ul>
C. &lt;li>&lt;ol>Item&lt;/ol>&lt;/li>
D. &lt;list>&lt;item>Item&lt;/item>&lt;/list>
ANSWER: A

Which of the following tags is used to create an unordered (bulleteD. list?
A. &lt;ol>
B. &lt;ul>
C. &lt;li>
D. &lt;div>
ANSWER: B

In which section of an HTML document is the &lt;title> tag located?
A. &lt;body>
B. &lt;footer>
C. &lt;meta>
D. &lt;head>
ANSWER: D

Which tag is used to add a horizontal line in an HTML document?
A. &lt;hr>
B. &lt;line>
C. &lt;div>
D. &lt;span>
ANSWER: A

How can you make a piece of text bold in HTML?
A. &lt;b>This is bold&lt;/b>
B. &lt;i>This is bold&lt;/i>
C. &lt;strong>This is bold&lt;/strong>
D. &lt;em>This is bold&lt;/em>
ANSWER: C

What is the main purpose of CSS in web development?
A. To structure the content of a webpage
B. To add interactivity to a webpage
C. To describe the presentation and layout of a webpage
D. To write server-side scripts for a webpage
ANSWER: C

Which of the following is NOT a part of a CSS rule?
A. Selector
B. Property
C. Declaration
D. Method
ANSWER: D

Which CSS selector targets all elements with the class name "intro"?
A. #intro
B. .intro
C. intro
D. &lt;intro>
ANSWER: B

In CSS, what is the role of the "declaration block"?
A. To specify the HTML elements to be styled
B. To contain one or more style declarations
C. To group CSS selectors
D. To override the default browser styles
ANSWER: B

Which of the following represents a CSS type selector?
A. &lt;p>
B. #header
C. .main
D. p
ANSWER: D

How would you select all &lt;input> elements that have a type attribute equal to "text"?
A. input[type="text"]
B. input#text
C. input.text
D. input('text')
ANSWER: A

Which of the following selectors is the most specific?
A. #header
B. .header
C. header
D. div header
ANSWER: A

Which CSS property is used to change the background color of an element?
A. color
B. background-color
C. border-color
D. background-image
ANSWER: B

In the CSS box model, which property is responsible for the space between the content and the border?
A. Margin
B. Border
C. Padding
D. Content
ANSWER: C

Which property would you use to add spacing between elements on the outside of the border?
A. Margin
B. Padding
C. Content
D. Border-spacing
ANSWER: A

What is the default display value of the 'div' element in HTML?
A. inline
B. block
C. inline-block
D. none
ANSWER: B

What does the "flex" value in the display property do?
A. Positions elements in a grid layout
B. Aligns elements horizontally and vertically
C. Applies animations to the element
D. Creates a block-level element
ANSWER: B

Which CSS layout technique allows the creation of two-dimensional layouts using rows and columns?
A. Flexbox
B. Float
C. Grid
D. Inline-block
ANSWER: C

What CSS property is used to define the width of an element’s border?
A. border-size
B. border-width
C. border-style
D. border-height
ANSWER: B

What happens when you set the "display" property of an element to "none"?
A. The element is hidden but occupies space
B. The element is removed from the document flow
C. The element becomes a block-level element
D. The element is converted to an inline element
ANSWER: B

Which property would you use to center a block element horizontally inside its container?
A. padding
B. margin-left
C. text-align
D. margin: 0 auto;
ANSWER: D

Which CSS selector would be used to target an element with the ID "header"?
A. .header
B. #header
C. header
D. *header
ANSWER: B

Which CSS box model property determines the amount of space between adjacent elements?
A. Border
B. Padding
C. Margin
D. Content
ANSWER: C

In a flex container, what property is used to align items along the main axis?
A. align-items
B. justify-content
C. flex-direction
D. align-content
ANSWER: B

How would you set the size of an element’s content area using CSS?
A. content-size
B. height and width
C. padding and margin
D. border-size and height
ANSWER: B

What does the "grid-template-columns" property do in CSS Grid?
A. It defines the number and size of columns in a grid layout
B. It defines the alignment of grid items
C. It sets the spacing between grid items
D. It creates rows within the grid layout
ANSWER: A

Which property is used to set the amount of space between the grid cells in a CSS Grid layout?
A. grid-gap
B. grid-spacing
C. margin
D. padding
ANSWER: A

In the CSS rule "p { color: blue; }", which part is the declaration?
A. p
B. color
C. blue
D. color: blue;
ANSWER: D

What is the purpose of minimizing specificity in CSS selectors?
A. To reduce file size
B. To increase the priority of styles
C. To maintain flexibility and avoid conflicts
D. To ensure styles load faster
ANSWER: C

Which CSS property controls the space between an element’s border and its content?
A. margin
B. padding
C. border-spacing
D. display
ANSWER: B

What does the "justify-content" property do in a flex container?
A. Aligns items along the cross axis
B. Centers items horizontally
C. Distributes space between items along the main axis
D. Aligns items to the flex container’s edges
ANSWER: C

Which of the following is a common best practice in CSS?
A. Using multiple IDs for the same element
B. Organizing stylesheets and using comments
C. Applying inline styles directly to elements
D. Using as many CSS files as possible
ANSWER: B

What is the purpose of the "DRY" principle in CSS?
A. To ensure that styles are written once and reused where possible
B. To reduce the number of style declarations
C. To avoid using shorthand properties
D. To keep the file size small
ANSWER: A

Which CSS property would you use to make text bold?
A. font-weight
B. font-style
C. text-transform
D. font-size
ANSWER: A

Which of the following is NOT a value for the display property?
A. inline
B. flex
C. grid
D. float
ANSWER: D

Inline CSS can be added to an HTML element using which attribute?
A. css
B. style
C. class
D. id
ANSWER: B

How can you make a list of items in HTML?
A. &lt;ul>&lt;li>for ordered lists,&lt;ol>&lt;li>for unordered lists&lt;/li>&lt;/ol>&lt;/li>&lt;/ul>
B. &lt;ul>&lt;li>for unordered lists,&lt;ol>&lt;li>for ordered lists&lt;/li>&lt;/ol>&lt;/li>&lt;/ul>
C. for both ordered and unordered lists
D. &lt;ul>&lt;li>for both ordered and unordered lists&lt;/li>&lt;/ul>
ANSWER: B

Which of the following methods can be used to display data in JavaScript?
A. document.write()
B. All of the above
C. alert()
D. console.log()
ANSWER: B

In JavaScript, which of the following data types represents a collection of key-value pairs?
A. String
B. Function
C. Object
D. Array
ANSWER: C

Which of the following is the correct syntax for declaring a variable in JavaScript?
A. const x;
B. var x;
C. All of the above
D. let x;
ANSWER: C

How do you write a comment in CSS?
A. # This is a comment
B. // This is a comment
C. &lt;!-- This is a comment -->
D. /* This is a comment */
ANSWER: D

What does the "var" keyword in JavaScript do?
A. Declares a function-scoped variable
B. Declares a block-scoped variable
C. Declares a constant variable
D. Declares a global variable
ANSWER: A

Which HTML tag is used to include an external JavaScript file?
A. &lt;embed>
B. &lt;js>
C. &lt;link>
D. &lt;script>
ANSWER: D

Which of the following is NOT a valid JavaScript data type?
A. Boolean
B. Integer
C. Undefined
D. String
ANSWER: B

In CSS, how can you select an element with the class "button"?
A. #button
B. .button
C. button
D. class.button
ANSWER: B

Which of the following is used to declare a constant in JavaScript?
A. const
B. var
C. function
D. let
ANSWER: A

Which of the following is an example of a block-level HTML element?
A. &lt;div>
B. &lt;img>
C. &lt;span>
D. &lt;a>
ANSWER: A

Which JavaScript method is used to convert a string to an integer?
A. Integer()
B. toInt()
C. parseInt()
D. toInteger()
ANSWER: C

What is the default data type of variables in JavaScript?
A. String
B. Number
C. Object
D. Undefined
ANSWER: A

In CSS, which property is used to change the background color of an element?
A. bgcolor
B. background
C. color
D. background-color
ANSWER: D

Which event occurs when a user clicks on an HTML element?
A. onchange
B. onmouseout
C. onmouseover
D. onclick
ANSWER: D

What is the correct way to link an external CSS file in HTML?
A. &lt;style href="style.css">
B. &lt;style src="style.css">
C. &lt;css rel="stylesheet" href="style.css">
D. &lt;link rel="stylesheet" href="style.css">
ANSWER: D









Which method executes a function on each array element?
A. map()
B. forEach()
C. filter()
D. reduce()
ANSWER: B

What is the correct way to declare a JavaScript variable?
A. var myVariable;
B. let myVariable;
C. const myVariable;
D. All of the above
ANSWER: D

Which operator is used for strict equality in JavaScript?
A. ==
B. ===
C. !=
D. =
ANSWER: B

What does the `typeof` operator return for an array in JavaScript?
A. "object"
B. "array"
C. "undefined"
D. "list"
ANSWER: A

How do you write a single-line comment in JavaScript?
A. //
B. #
C. &lt;!-- -->
D. ::
ANSWER: A

What is the output of `typeof null` in JavaScript?
A. "null"
B. "undefined"
C. "object"
D. "NaN"
ANSWER: C

What will `Boolean(0)` return in JavaScript?
A. true
B. false
C. null
D. NaN
ANSWER: B

Which function is used to parse a string into an integer in JavaScript?
A. parseInt()
B. int()
C. Number()
D. toInteger()
ANSWER: A

Which method is used to add an element at the end of an array?
A. push()
B. append()
C. insert()
D. add()
ANSWER: A

What is the output of `2 + "2"` in JavaScript?
A. 4
B. "22"
C. NaN
D. Error
ANSWER: B

What is the default value of an uninitialized variable in JavaScript?
A. null
B. 0
C. undefined
D. ""
ANSWER: C

Which of these is not a valid way to declare a variable in JavaScript?
A. var myVariable;
B. let myVariable;
C. const myVariable;
D. int myVariable;
ANSWER: D

Which operator checks both value and type in JavaScript?
A. ==
B. !=
C. ===
D. !==
ANSWER: C

What is the output of `console.log("5" - 2)` in JavaScript?
A. 52
B. 3
C. NaN
D. Error
ANSWER: B

How do you check if a property exists in an object?
A. object.propertyExists()
B. object.hasOwnProperty("property")
C. "property" in object
D. Both B and C
ANSWER: D

Which keyword is used to define a constant in JavaScript?
A. let
B. var
C. const
D. static
ANSWER: C

What will `typeof NaN` return in JavaScript?
A. "undefined"
B. "number"
C. "object"
D. "NaN"
ANSWER: B

What is the purpose of the "this" keyword in JavaScript?
A. Refers to the current object
B. Refers to the global object
C. Refers to the parent object
D. Refers to the window object
ANSWER: A

Which method removes the last element from an array?
A. pop()
B. remove()
C. delete()
D. trim()
ANSWER: A

How do you create a function in JavaScript?
A. function myFunction() {}
B. create myFunction() {}
C. func myFunction() {}
D. def myFunction() {}
ANSWER: A

What does the `isNaN()` function do in JavaScript?
A. Checks if a value is null
B. Checks if a value is a number
C. Checks if a value is NaN
D. Checks if a value is undefined
ANSWER: C

What is the output of `typeof undefined` in JavaScript?
A. "undefined"
B. "null"
C. "object"
D. "NaN"
ANSWER: A

Which of these methods is used to combine two arrays?
A. concat()
B. join()
C. append()
D. merge()
ANSWER: A

What is the purpose of the `return` statement in a function?
A. It ends the function execution and specifies a value to return.
B. It logs a value to the console.
C. It creates a loop.
D. It defines a variable.
ANSWER: A

Which of the following is not a JavaScript data type?
A. Number
B. Boolean
C. Character
D. Object
ANSWER: C

How do you declare a promise in JavaScript?
A. var promise = new Promise();
B. let promise = new Promise((resolve, reject) => {});
C. const promise = Promise.create();
D. promise = Promise.make();
ANSWER: B

What does the `spread operator (...)` do in JavaScript?
A. Copies an object
B. Spreads elements of an array or object
C. Combines two arrays
D. Checks for equality
ANSWER: B

What will `1 == "1"` return in JavaScript?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

Which method can be used to round a number to the nearest integer?
A. Math.ceil()
B. Math.floor()
C. Math.round()
D. Math.trunc()
ANSWER: C

What is the correct way to handle errors in JavaScript?
A. Using `if` statements
B. Using `try...catch` blocks
C. Using `errorHandler` function
D. Using `finally` only
ANSWER: B

Which of these values is considered falsy in JavaScript?
A. 0
B. null
C. undefined
D. All of the above
ANSWER: D

What does `Array.isArray([])` return in JavaScript?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

Which event is triggered when the user clicks on an HTML element?
A. onmouseover
B. onclick
C. onchange
D. onfocus
ANSWER: B

What is the output of `typeof function() {}` in JavaScript?
A. "function"
B. "object"
C. "undefined"
D. "null"
ANSWER: A

How do you check if a variable is an array in JavaScript?
A. variable.isArray()
B. Array.isArray(variable)
C. typeof variable === "array"
D. variable instanceof Array
ANSWER: B

What is the output of `console.log(1 + "1")`?
A. 2
B. "11"
C. NaN
D. undefined
ANSWER: B

What is the purpose of the `map()` function in JavaScript?
A. Creates a new array by transforming each element
B. Filters elements of an array
C. Reduces the array to a single value
D. Searches for an element in the array
ANSWER: A







Which of the following creates a new array with all elements that pass a test?
A. map()
B. filter()
C. forEach()
D. reduce()
ANSWER: B

What does `0.1 + 0.2 === 0.3` return in JavaScript?
A. true
B. false
C. NaN
D. undefined
ANSWER: B

Which method can be used to convert a JSON string into an object?
A. JSON.parse()
B. JSON.stringify()
C. Object.fromJSON()
D. JSON.object()
ANSWER: A

What is the output of `console.log([] == ![])` in JavaScript?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What happens when you use `delete` on an array element?
A. Removes the element and reindexes the array.
B. Sets the element to `null`.
C. Deletes the element and leaves `undefined` in its place.
D. Throws an error.
ANSWER: C

How do you prevent event bubbling in JavaScript?
A. event.stopPropagation()
B. event.preventDefault()
C. event.cancelBubble()
D. Both A and C
ANSWER: D

What is the result of `true + false` in JavaScript?
A. true
B. 1
C. 0
D. NaN
ANSWER: B

What will `2 ** 3` evaluate to in JavaScript?
A. 5
B. 6
C. 8
D. Error
ANSWER: C

How do you access the second element of an array `arr`?
A. arr[1]
B. arr[2]
C. arr(1)
D. arr.get(1)
ANSWER: A

What will `console.log([1, 2, 3] + [4, 5, 6])` output?
A. [1, 2, 3, 4, 5, 6]
B. "1,2,34,5,6"
C. NaN
D. Error
ANSWER: B

Which function is used to delay code execution?
A. delay()
B. wait()
C. setTimeout()
D. setInterval()
ANSWER: C

What is the output of `console.log(typeof [])`?
A. "array"
B. "object"
C. "undefined"
D. "function"
ANSWER: B

What does `Promise.all()` do?
A. Waits for all promises to resolve or rejects on any failure.
B. Resolves when the first promise resolves.
C. Rejects all promises.
D. Chains multiple promises.
ANSWER: A

What is the result of `1 / 0` in JavaScript?
A. NaN
B. 0
C. Infinity
D. Error
ANSWER: C

How do you access the length of an array?
A. array.len()
B. array.length
C. array.size
D. array.count
ANSWER: B

What does `[].length = 5` do?
A. Creates an empty array of length 5.
B. Throws an error.
C. Removes elements from the array.
D. Fills the array with `undefined`.
ANSWER: D

How can you merge two arrays in JavaScript?
A. arr1.concat(arr2)
B. arr1.merge(arr2)
C. arr1.append(arr2)
D. Both A and B
ANSWER: A

What is the result of `null == undefined`?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What will `console.log("1" - 1)` output?
A. "10"
B. 0
C. NaN
D. undefined
ANSWER: B

How do you add a property to an object?
A. obj.add("key", value)
B. obj.key = value
C. obj.set(key, value)
D. Both B and C
ANSWER: B

What does `Object.keys()` return?
A. An array of object values.
B. An array of object keys.
C. A string of object keys.
D. An array of key-value pairs.
ANSWER: B

Which function converts a number to a string?
A. number.toString()
B. String(number)
C. Both A and B
D. number.toText()
ANSWER: C

What is the result of `!!"false"` in JavaScript?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What does `[].push(1, 2, 3)` return?
A. [1, 2, 3]
B. 3
C. undefined
D. [3]
ANSWER: B

What does `Object.freeze()` do?
A. Makes the object immutable.
B. Deletes the object.
C. Prevents adding new properties.
D. Both A and C
ANSWER: A

How do you compare two objects for equality?
A. obj1 == obj2
B. obj1 === obj2
C. JSON.stringify(obj1) === JSON.stringify(obj2)
D. obj1.equals(obj2)
ANSWER: C

What is the output of `typeof NaN`?
A. "NaN"
B. "number"
C. "undefined"
D. "object"
ANSWER: B

How do you make a shallow copy of an object?
A. Object.clone(obj)
B. {...obj}
C. Object.copy(obj)
D. Object.shallow(obj)
ANSWER: B

What will `console.log("5" + 5)` output?
A. 10
B. "55"
C. NaN
D. 5
ANSWER: B

What is the output of `console.log(1 || 0)`?
A. 0
B. 1
C. true
D. undefined
ANSWER: B

What will `console.log(0 && 1)` output?
A. 0
B. 1
C. true
D. false
ANSWER: A

What is the result of `!!0`?
A. true
B. false
C. NaN
D. Error
ANSWER: B

Which loop is best for iterating through an array?
A. for...in
B. for...of
C. while
D. do...while
ANSWER: B

What will `2 == "2"` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What will `2 === "2"` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

How do you define an arrow function?
A. function() => {}
B. () => {}
C. => {}
D. arrow() {}
ANSWER: B

What is the value of `Math.max()` with no arguments?
A. undefined
B. 0
C. -Infinity
D. NaN
ANSWER: C

How do you stop a setInterval function?
A. clearInterval()
B. stopInterval()
C. clearTimeout()
D. endInterval()
ANSWER: A

What will `typeof null` return?
A. "null"
B. "object"
C. "undefined"
D. "NaN"
ANSWER: B

Which symbol is used for default values in destructuring?
A. =
B. :
C. ?
D. ||
ANSWER: A

How do you clone an array?
A. [...arr]
B. arr.copy()
C. arr.clone()
D. arr.slice(0)
ANSWER: A

What will `typeof undefined` return?
A. "null"
B. "undefined"
C. "object"
D. "NaN"
ANSWER: B

What is the result of `0 == "0"`?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

Which function removes duplicates from an array?
A. Array.removeDuplicates()
B. Array.unique()
C. [...new Set(arr)]
D. arr.filterUnique()
ANSWER: C

What will `console.log(2 > "10")` output?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What does `console.log(!!(null && undefined))` output?
A. true
B. false
C. null
D. undefined
ANSWER: B

What will `console.log([] + {})` output?
A. [object Object]
B. {}
C. [][object Object]
D. NaN
ANSWER: A

What does `Object.is(NaN, NaN)` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What is the result of `typeof new Date()`?
A. "date"
B. "object"
C. "function"
D. "string"
ANSWER: B

What will `console.log({} === {})` return?
A. true
B. false
C. undefined
D. Error
ANSWER: B

How do you prevent a variable declared with `let` from being reassigned?
A. Use `Object.freeze(variable)`
B. Declare it with `const` instead
C. Use `let constant`
D. Use `Object.lock(variable)`
ANSWER: B

What will `console.log(1 &lt; 2 &lt; 3)` output?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What does `console.log(1 > 2 > 3)` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

How is `[] == ![]` evaluated in JavaScript?
A. Both sides are falsy, so true.
B. The left-hand side is `0` and the right-hand side is `false`.
C. Type coercion results in `true`.
D. This throws an error.
ANSWER: C

What is the output of `console.log(3 ** (2 ** 2))`?
A. 27
B. 81
C. 256
D. 9
ANSWER: B

What does `parseInt("10.5", 10)` return?
A. 10
B. 10.5
C. NaN
D. 11
ANSWER: A

What happens when you use `++` on `NaN`?
A. NaN
B. 0
C. Error
D. undefined
ANSWER: A

What does `console.log(0 || null && 2)` output?
A. 0
B. null
C. 2
D. undefined
ANSWER: B

What is the output of `console.log("foo" && "bar" && null)`?
A. foo
B. bar
C. null
D. undefined
ANSWER: C

What does `console.log([] + 1)` output?
A. "1"
B. 1
C. NaN
D. undefined
ANSWER: A

What will `console.log(!!"false" == !!"true")` output?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What happens if you set `document.body.innerHTML = "&lt;script>alert('XSS')&lt;/script>"`?
A. The page will throw an error.
B. The script tag will run and alert 'XSS'.
C. The script tag will be ignored.
D. Nothing happens.
ANSWER: B

What is the result of `console.log(2 * "2")`?
A. 4
B. "22"
C. NaN
D. Error
ANSWER: A

What does `isFinite(1 / 0)` return?
A. true
B. false
C. NaN
D. undefined
ANSWER: B

What is the result of `console.log(undefined + 1)`?
A. NaN
B. 1
C. undefined
D. 0
ANSWER: A

What will `console.log(+null + +'0' + !!undefined)` output?
A. 1
B. 0
C. NaN
D. 2
ANSWER: B

What does `console.log([1, 2, 3] == '1,2,3')` evaluate to?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What is the output of `console.log(0 || null || undefined || false || "foo")`?
A. 0
B. null
C. "foo"
D. false
ANSWER: C

What does `console.log([] + [])` return?
A. "[]"
B. ""
C. NaN
D. Error
ANSWER: B

What does `console.log(1 == '1' && 1 === '1')` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What will `console.log({} + {})` output?
A. "[object Object][object Object]"
B. NaN
C. "undefined"
D. Throws an error
ANSWER: A

What is the result of `console.log(+"Infinity" + +"Infinity")`?
A. Infinity
B. NaN
C. 0
D. "InfinityInfinity"
ANSWER: A

What does `console.log(!!'false' && !!'')` output?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What happens when you evaluate `[] == ![]`?
A. true
B. false
C. Throws an error
D. NaN
ANSWER: A

What does `console.log(typeof (function(){}))` return?
A. "function"
B. "object"
C. "undefined"
D. "null"
ANSWER: A

What does `console.log((true + false) > 1)` evaluate to?
A. true
B. false
C. NaN
D. undefined
ANSWER: B

What is the output of `console.log(0.2 + 0.1 == 0.3)`?
A. true
B. false
C. NaN
D. undefined
ANSWER: B

What will `console.log(2 ** 3 ** 2)` output?
A. 64
B. 512
C. 16
D. Error
ANSWER: B

What does `console.log([] == !true)` evaluate to?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What will `console.log({} instanceof Object)` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What is the result of `console.log(0 == "")`?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What does `console.log(!!"0" === !!0)` return?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What is the output of `console.log("5" - -"2")`?
A. 7
B. "52"
C. NaN
D. undefined
ANSWER: A

What happens when you evaluate `1 && 2 && 0 && 3`?
A. 0
B. 1
C. 2
D. 3
ANSWER: A

What does `console.log(true + false + null + 1)` output?
A. 2
B. NaN
C. 1
D. 3
ANSWER: A

What does `console.log(0.1 * 0.2 === 0.02)` evaluate to?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What will `console.log(-"5" + -"2")` return?
A. -7
B. 3
C. "52"
D. NaN
ANSWER: A

What does `console.log((!!"false") + (!!undefined))` output?
A. 1
B. 2
C. 0
D. NaN
ANSWER: A

What will `console.log(+true + false)` evaluate to?
A. 0
B. 1
C. NaN
D. undefined
ANSWER: B

What does `console.log({}.toString.call(null))` return?
A. "[object Null]"
B. "[object Undefined]"
C. "[object Object]"
D. Throws an error
ANSWER: A

What happens when you evaluate `NaN === NaN`?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What does `console.log(2 > 1 > 0)` output?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What is the result of `console.log("10" - -"5")`?
A. "105"
B. 5
C. 15
D. NaN
ANSWER: C

What does `console.log(0 || 1 && 2)` evaluate to?
A. 0
B. 2
C. 1
D. NaN
ANSWER: B

What does `console.log(null + 1)` return?
A. 1
B. null
C. NaN
D. undefined
ANSWER: A

What does JavaScript’s event loop do?
A. Executes all synchronous code only
B. Handles asynchronous callbacks using a queue and stack
C. Terminates processes in the browser
D. Provides recursion support
ANSWER: B

What is the purpose of the call stack in JavaScript?
A. Holds variables and functions
B. Keeps track of function execution order
C. Stores all asynchronous events
D. Clears memory for garbage collection
ANSWER: B

What is hoisting in JavaScript?
A. Moving function and variable declarations to the top of their scope
B. Lifting values to the heap
C. Declaring variables dynamically
D. Throwing errors for undeclared variables
ANSWER: A

What is the `Temporal Dead Zone` in JavaScript?
A. Area where `let` and `const` variables cannot be accessed before initialization
B. Code block where `var` declarations are invalid
C. Space where garbage collection occurs
D. Section of asynchronous code awaiting execution
ANSWER: A

What does `bind()` do in JavaScript?
A. Executes a function immediately with `this` context
B. Creates a new function with a fixed `this` context
C. Replaces function arguments dynamically
D. Calls a function only once
ANSWER: B

What is closure in JavaScript?
A. The ability of a function to access variables from its outer scope
B. A function that has no return value
C. A function that terminates immediately
D. Code that executes after an error
ANSWER: A

How does `Promise.race()` work?
A. Resolves as soon as the first promise resolves or rejects
B. Waits for all promises to resolve
C. Rejects when all promises fail
D. Combines multiple promises into one
ANSWER: A

What is the main difference between `==` and `===`?
A. `==` checks for value equality, while `===` checks for value and type equality
B. `==` checks types strictly, while `===` ignores types
C. Both are used interchangeably
D. `===` is deprecated
ANSWER: A

What does the `async` keyword do?
A. Converts a function into a generator
B. Makes a function return a promise
C. Suspends code execution indefinitely
D. Handles exceptions in functions
ANSWER: B

How do generators pause execution?
A. Using `await`
B. With the `yield` keyword
C. Using `setTimeout()`
D. By throwing an error
ANSWER: B

What does `this` refer to inside an arrow function?
A. The global object
B. The object in which the function is defined
C. It retains the value of `this` from its enclosing scope
D. The function itself
ANSWER: C

What is the difference between `Object.seal()` and `Object.freeze()`?
A. `seal` prevents adding properties, `freeze` prevents changes entirely
B. `seal` removes properties, `freeze` locks methods
C. Both make objects immutable
D. `freeze` is faster than `seal`
ANSWER: A

What is tail call optimization in JavaScript?
A. A mechanism to avoid stack overflow for recursive calls
B. An optimization to avoid memory leaks
C. A faster way to handle loops
D. A feature of asynchronous programming
ANSWER: A

What is the output of `console.log(typeof Symbol())`?
A. "symbol"
B. "object"
C. "function"
D. "undefined"
ANSWER: A

What is a WeakMap in JavaScript?
A. A map that allows keys to be garbage collected
B. A map with weak security features
C. A map that holds primitive keys
D. A temporary map stored in memory
ANSWER: A

What does `Object.create()` do?
A. Creates a shallow copy of an object
B. Creates a new object using an existing object as the prototype
C. Clones the values of an object
D. Freezes the object for modification
ANSWER: B

What is the purpose of `Reflect` in JavaScript?
A. To inspect and manipulate objects
B. To display the structure of a function
C. To provide backward compatibility
D. To manage memory leaks
ANSWER: A

How does garbage collection work in JavaScript?
A. It frees up unused memory automatically
B. It deletes unused variables on demand
C. It runs a manual cleanup function
D. It ignores primitive values
ANSWER: A

What will `console.log(2 ** -1)` return?
A. 0.5
B. -2
C. Error
D. undefined
ANSWER: A

What is an IIFE (Immediately Invoked Function Expression)?
A. A function that runs immediately after declaration
B. A function passed as a callback
C. A function with no return statement
D. A function that throws an exception
ANSWER: A

What happens when you set `__proto__` of an object?
A. It changes the prototype chain
B. It adds a new property
C. It freezes the object
D. It creates a circular reference
ANSWER: A

What does `typeof new Date()` return?
A. "object"
B. "function"
C. "date"
D. "undefined"
ANSWER: A

What is the event loop in JavaScript responsible for?
A. Handling asynchronous operations
B. Storing global variables
C. Looping over DOM events
D. Managing memory allocation
ANSWER: A

What happens if a promise is neither resolved nor rejected?
A. It remains pending forever
B. It throws an error
C. It resolves automatically
D. It becomes null
ANSWER: A

What is the purpose of `finally` in a Promise?
A. To run code regardless of success or failure
B. To handle errors explicitly
C. To stop promise chaining
D. To retry the promise
ANSWER: A

How do you chain promises?
A. Using `then()`
B. Using `catch()`
C. Using `finally()`
D. By using `await`
ANSWER: A

What happens if `await` is used outside of an async function?
A. Syntax error
B. It executes synchronously
C. It throws a runtime error
D. It works as expected
ANSWER: A

What is the output of `console.log(typeof (null))`?
A. "null"
B. "object"
C. "undefined"
D. "function"
ANSWER: B

What is the primary advantage of using `let` over `var`?
A. Block scoping prevents accidental redeclaration
B. Faster execution
C. Allows hoisting
D. It is immutable
ANSWER: A

What does the `new` keyword do when creating objects?
A. Creates a new empty object and sets the prototype
B. Instantiates a variable
C. Freezes the object for modification
D. Calls a static method
ANSWER: A

What does `Promise.resolve()` do?
A. Returns a resolved promise
B. Throws an error
C. Cancels all pending promises
D. Waits for all promises to resolve
ANSWER: A

What happens when `setTimeout()` is given 0ms delay?
A. It is added to the callback queue and executed later
B. It executes immediately
C. It creates an infinite loop
D. It throws an error
ANSWER: A

What does `console.log(1 && 2 && 3)` return?
A. 1
B. 2
C. 3
D. undefined
ANSWER: C

What is the purpose of `super()` in a constructor?
A. Calls the parent class constructor
B. Freezes the class
C. Creates a static method
D. Adds private variables
ANSWER: A

What is the primary difference between `Map` and `Object`?
A. `Map` allows keys of any type; `Object` only allows strings or symbols
B. `Map` is faster
C. `Object` supports weak references
D. `Map` allows prototype inheritance
ANSWER: A

What is the `prototype` property used for?
A. To share properties and methods across instances
B. To override built-in functions
C. To freeze object properties
D. To define closures
ANSWER: A

What happens if a `return` statement is missing in a generator function?
A. The generator returns `undefined` when exhausted
B. The generator throws an error
C. The generator loops infinitely
D. It terminates without yielding values
ANSWER: A

What does the `debounce()` function do?
A. Delays execution of a function until after a specified wait time
B. Ensures a function is called immediately
C. Executes a function at regular intervals
D. Repeats function calls indefinitely
ANSWER: A

What does `console.log([] == ![])` return?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What happens when `console.log(1 &lt; 2 &lt; 3)` executes?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What is the result of `console.log(1 > 2 > 3)`?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What will `console.log("2" + 2 - 2)` output?
A. 20
B. 22
C. "20"
D. NaN
ANSWER: A

What is the output of `console.log("10" - -"5")`?
A. 15
B. "105"
C. NaN
D. 5
ANSWER: A

What will `console.log([] + {})` output?
A. [object Object]
B. {}
C. NaN
D. Throws an error
ANSWER: A

What happens when `console.log({} + [])` executes?
A. "[object Object]"
B. "[object Object][object Object]"
C. 0
D. ""
ANSWER: D

What is the result of `console.log(true + true - false)`?
A. 1
B. 2
C. 0
D. NaN
ANSWER: B

What does `console.log(!!"false" && !!"true")` evaluate to?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What does `console.log((1 && 2) || 0)` output?
A. 1
B. 2
C. 0
D. undefined
ANSWER: B

What happens when `console.log(2 ** 3 ** 2)` runs?
A. 64
B. 512
C. 16
D. 8
ANSWER: B

What will `console.log([1, 2, 3] + [4, 5, 6])` output?
A. "1,2,34,5,6"
B. [1, 2, 3, 4, 5, 6]
C. NaN
D. undefined
ANSWER: A

What does `typeof NaN` return?
A. "NaN"
B. "number"
C. "undefined"
D. "object"
ANSWER: B

What does `console.log(0 || 1 && 2)` output?
A. 0
B. 1
C. 2
D. NaN
ANSWER: C

What does `console.log(+true + false)` return?
A. 0
B. 1
C. NaN
D. undefined
ANSWER: B

What happens when `console.log(null + undefined)` runs?
A. NaN
B. null
C. undefined
D. Throws an error
ANSWER: A

What will `console.log(({}).toString())` output?
A. [object Object]
B. {}
C. NaN
D. Throws an error
ANSWER: A

What happens when `console.log("5" - -"5")` runs?
A. 10
B. "55"
C. NaN
D. Throws an error
ANSWER: A

What is the output of `console.log([] + [])`?
A. "[]"
B. ""
C. NaN
D. undefined
ANSWER: B

What will `console.log(1 + "1" + 1)` output?
A. "111"
B. 3
C. NaN
D. Throws an error
ANSWER: A

What happens when `console.log(2 && 3 || 0)` executes?
A. 0
B. 3
C. 2
D. undefined
ANSWER: B

What does `console.log([1, 2, 3] == "1,2,3")` output?
A. true
B. false
C. undefined
D. NaN
ANSWER: A

What does `console.log(true + false)` return?
A. true
B. 1
C. NaN
D. 0
ANSWER: B

What will `console.log(!!null == !!undefined)` evaluate to?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What happens when you evaluate `console.log({} == {})`?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What is the output of `console.log(1 || 2 && 3)`?
A. 1
B. 3
C. 2
D. undefined
ANSWER: A

What does `console.log(-"3" * +"2")` output?
A. 6
B. -6
C. "6"
D. NaN
ANSWER: B

What happens when you run `console.log(+null + +"1")`?
A. 0
B. 1
C. NaN
D. undefined
ANSWER: B

What does `console.log([1, 2] + [3, 4])` output?
A. [1, 2, 3, 4]
B. "1,23,4"
C. 6
D. Throws an error
ANSWER: B

What is the result of `console.log(2 > 1 > 0)`?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What does `console.log(typeof function() {})` return?
A. "function"
B. "object"
C. "undefined"
D. "null"
ANSWER: A

What will `console.log(null == undefined)` return?
A. true
B. false
C. NaN
D. undefined
ANSWER: A

What does `console.log((2, 3, 4))` output?
A. 2
B. 3
C. 4
D. undefined
ANSWER: C

What happens when `console.log("1" - 1 + "2")` executes?
A. "02"
B. 12
C. "12"
D. NaN
ANSWER: C

What does `console.log(false == "false")` output?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What is the output of `console.log([] instanceof Array)`?
A. true
B. false
C. undefined
D. Throws an error
ANSWER: A

What does `console.log(!!"0" === !!"")` evaluate to?
A. true
B. false
C. undefined
D. NaN
ANSWER: B

What does `console.log(1 & 2)` output?
A. 3
B. 1
C. 0
D. 2
ANSWER: C

What will `console.log(null ?? "default")` return?
A. null
B. "default"
C. undefined
D. Throws an error
ANSWER: B

What happens when `console.log("5" - 3)` executes?
A. "53"
B. 2
C. NaN
D. undefined
ANSWER: B

What is the primary difference between `null` and `undefined` in JavaScript?
A. `null` represents an empty value, while `undefined` means a variable has been declared but not initialized.
B. Both are the same.
C. `undefined` is used for objects, while `null` is for arrays.
D. `null` is automatically assigned, but `undefined` must be declared.
ANSWER: A

What does JavaScript’s single-threaded nature mean?
A. It can execute only one task at a time.
B. It cannot handle asynchronous tasks.
C. It uses a single CPU core.
D. It executes tasks sequentially and never stops.
ANSWER: A

What is the purpose of lexical scoping in JavaScript?
A. It determines how functions access variables in nested scopes.
B. It binds `this` to the global object.
C. It ensures variables have block-level scope.
D. It allows variable hoisting.
ANSWER: A

What is the main difference between deep copy and shallow copy?
A. Shallow copy clones references; deep copy clones values.
B. Deep copy is faster than shallow copy.
C. Shallow copy removes unused properties.
D. Deep copy works only with objects.
ANSWER: A

What is the key feature of the event loop in JavaScript?
A. It handles asynchronous code execution.
B. It runs synchronous code first.
C. It clears memory for garbage collection.
D. It prevents code from blocking execution.
ANSWER: A

What happens when a function does not return a value?
A. It returns `undefined`.
B. It throws an error.
C. It returns `null`.
D. It freezes execution.
ANSWER: A

What is the primary benefit of using a closure?
A. It allows access to an outer function's variables after the function has returned.
B. It speeds up code execution.
C. It enables recursion.
D. It prevents memory leaks.
ANSWER: A

Why is `typeof null` an object in JavaScript?
A. It is a historical bug for backward compatibility.
B. `null` is a special type of object.
C. JavaScript treats null values as arrays.
D. The language coerces `null` into an object.
ANSWER: A

What is the significance of `use strict` in JavaScript?
A. It enforces stricter parsing and error handling.
B. It speeds up code execution.
C. It allows type coercion to be disabled.
D. It enables ES6 features.
ANSWER: A

What is the main difference between `call()` and `apply()`?
A. `call()` accepts arguments individually, while `apply()` accepts arguments as an array.
B. Both are identical.
C. `apply()` binds `this`, while `call()` does not.
D. `call()` is faster than `apply()`.
ANSWER: A

What is the purpose of the prototype chain?
A. It allows inheritance in JavaScript.
B. It ensures objects cannot be mutated.
C. It links variables to their scope.
D. It optimizes memory usage.
ANSWER: A

Why are JavaScript objects compared by reference and not value?
A. Objects store memory addresses, not content values.
B. JavaScript cannot compare object content.
C. Objects are immutable.
D. Comparing values of objects is inefficient.
ANSWER: A

How does `setTimeout` work in JavaScript?
A. It schedules a callback function to execute after a specified delay.
B. It runs code synchronously.
C. It creates a new execution thread.
D. It clears the event loop.
ANSWER: A

What is a "callback hell" in JavaScript?
A. Nested callbacks leading to unreadable and complex code.
B. A recursion error.
C. Multiple callbacks failing simultaneously.
D. Using callbacks inside promises.
ANSWER: A

Why does `NaN === NaN` return false?
A. `NaN` is not equal to itself by definition.
B. It is a type error.
C. `NaN` does not exist in JavaScript.
D. It throws a runtime error.
ANSWER: A

What is the main difference between `let` and `const`?
A. `const` prevents reassignment, while `let` allows it.
B. `let` is block-scoped, but `const` is global.
C. Both are identical except in performance.
D. `let` variables cannot hold objects.
ANSWER: A

What is event delegation in JavaScript?
A. It allows a single event listener to manage events for child elements.
B. It delegates event handling to parent nodes.
C. It postpones event handling until all DOM elements are loaded.
D. It prevents event propagation.
ANSWER: A

Why are arrow functions not suitable for methods in objects?
A. They do not bind `this` to the object context.
B. Arrow functions are slower.
C. They cannot accept arguments.
D. Arrow functions are immutable.
ANSWER: A

What is a promise chain?
A. A sequence of `.then()` handlers to process asynchronous operations.
B. A mechanism to resolve multiple promises at once.
C. A way to link multiple callbacks.
D. A feature that combines synchronous and asynchronous code.
ANSWER: A

What is the purpose of the `super()` keyword in class inheritance?
A. It calls the constructor of the parent class.
B. It freezes the parent class.
C. It links the parent and child class methods.
D. It creates private methods.
ANSWER: A

Why does `console.log(2 + "2")` return "22"?
A. String concatenation occurs due to type coercion.
B. The `+` operator is invalid.
C. JavaScript throws an error.
D. The second `2` is ignored.
ANSWER: A

What happens when you declare a variable without `var`, `let`, or `const`?
A. It becomes a global variable.
B. It throws a syntax error.
C. It creates a private variable.
D. It automatically gets the `undefined` value.
ANSWER: A

What is the purpose of the `Symbol` type in JavaScript?
A. It creates unique, immutable property keys.
B. It enables asynchronous programming.
C. It defines large integers.
D. It handles exceptions.
ANSWER: A

What is the purpose of `Object.defineProperty`?
A. It adds a new property with specific attributes to an object.
B. It removes properties from an object.
C. It freezes the object.
D. It defines a function within an object.
ANSWER: A

Why is the `bind()` method useful in JavaScript?
A. It creates a new function with a fixed `this` value.
B. It executes a function immediately.
C. It clones a function.
D. It prevents a function from being reused.
ANSWER: A

What is a higher-order function?
A. A function that takes another function as an argument or returns a function.
B. A function that runs faster than normal functions.
C. A function that creates objects.
D. A function that throws exceptions.
ANSWER: A

What happens if you do not use `return` in a function?
A. The function returns `undefined`.
B. It throws an error.
C. It returns `null`.
D. It stops execution.
ANSWER: A

What is the difference between `Promise.all()` and `Promise.race()`?
A. `Promise.all()` waits for all promises to resolve; `Promise.race()` resolves when the first promise resolves.
B. `Promise.race()` rejects all promises.
C. Both return the same output.
D. `Promise.all()` runs synchronously.
ANSWER: A

What does it mean when a variable is block-scoped?
A. It is only accessible within the block in which it is defined.
B. It cannot be reassigned.
C. It is declared globally.
D. It is frozen and immutable.
ANSWER: A

What is the purpose of `Array.prototype.reduce()`?
A. It applies a callback to reduce an array to a single value.
B. It creates a new array with filtered elements.
C. It sorts the array elements.
D. It removes duplicates from the array.
ANSWER: A

What happens when `undefined` is added to a number?
A. The result is `NaN`.
B. It throws an error.
C. The number is converted to `undefined`.
D. The result is `0`.
ANSWER: A

What is the purpose of `Object.assign()`?
A. To copy properties from one object to another.
B. To delete object properties.
C. To freeze an object.
D. To compare two objects.
ANSWER: A

Why are template literals useful in JavaScript?
A. They allow string interpolation and multi-line strings.
B. They execute code faster.
C. They prevent XSS attacks.
D. They freeze strings.
ANSWER: A

What is a pure function?
A. A function that always produces the same output for the same input and has no side effects.
B. A function that returns no value.
C. A function that runs asynchronously.
D. A function that throws exceptions.
ANSWER: A

What happens when you set an object property to `undefined`?
A. The property remains in the object with the value `undefined`.
B. The property is deleted automatically.
C. It throws an error.
D. It creates a new object.
ANSWER: A

What is short-circuit evaluation in logical operators?
A. It stops evaluating expressions once the result is determined.
B. It runs code synchronously.
C. It shortens the code execution time.
D. It optimizes recursion.
ANSWER: A

What is the purpose of the `in` operator in JavaScript?
A. It checks if a property exists in an object.
B. It iterates through array values.
C. It compares two objects.
D. It initializes new object properties.
ANSWER: A

What happens when you assign a value to `this`?
A. `this` cannot be assigned a value.
B. It changes the global object.
C. It creates a reference to a new object.
D. It throws a runtime error.
ANSWER: A

What is the purpose of the `use strict` directive?
A. Enables block scoping  
B. Enforces stricter code rules  
C. Adds ES6 support  
D. Prevents hoisting  
ANSWER: B

What does `Object.freeze()` do?
A. Prevents adding new properties  
B. Makes properties immutable  
C. Deletes all properties  
D. Both A and B  
ANSWER: B

Why does `typeof NaN` return "number"?  
A. NaN represents invalid numbers  
B. It’s a bug  
C. NaN is undefined  
D. NaN equals null  
ANSWER: A

What is the purpose of `this` in JavaScript?
A. Refers to the current function  
B. Refers to the current object  
C. Refers to the parent class  
D. Refers to global scope  
ANSWER: B

What happens when you declare a variable twice with `let`?  
A. Throws an error  
B. Overwrites the variable  
C. Ignores the second declaration  
D. Creates a global variable  
ANSWER: A

What is the primary purpose of a closure?
A. To improve performance  
B. To encapsulate private variables  
C. To bind `this` context  
D. To hoist functions  
ANSWER: B

What happens when a function returns nothing?
A. Returns null  
B. Returns `undefined`  
C. Throws an error  
D. Ends the script  
ANSWER: B

What does the `==` operator do?
A. Strict equality  
B. Type conversion and comparison  
C. Compares types only  
D. Always returns `true`  
ANSWER: B

Why are arrow functions unsuitable for methods?
A. Cannot take parameters  
B. Do not have their own `this`  
C. Always return undefined  
D. Block hoisting  
ANSWER: B

What does `Promise.race()` do?
A. Resolves all promises  
B. Waits for the first settled promise  
C. Rejects all failed promises  
D. Stops after one failure  
ANSWER: B

What is the purpose of `try...catch`?  
A. Handles errors in synchronous code  
B. Executes code conditionally  
C. Catches runtime warnings  
D. Prevents recursion  
ANSWER: A

What happens when `null` is coerced to a number?
A. Returns 0  
B. Throws an error  
C. Returns NaN  
D. Returns undefined  
ANSWER: A

Why is `undefined` falsy?
A. It’s equivalent to false  
B. It represents no value  
C. It’s a type error  
D. All falsy values are null  
ANSWER: B

What does `Array.isArray([])` return?
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A

What happens when you call a function with more arguments than it accepts?
A. Extra arguments are ignored  
B. Throws an error  
C. Creates a closure  
D. Overwrites previous values  
ANSWER: A

What is hoisting?
A. Moving declarations to the top of scope  
B. Freezing objects in memory  
C. Prioritizing asynchronous tasks  
D. Reassigning global variables  
ANSWER: A

What does `Object.keys({a: 1, b: 2})` return?
A. `["a", "b"]`  
B. `[1, 2]`  
C. `{"a": 1, "b": 2}`  
D. `[]`  
ANSWER: A

What happens when `true == 1` evaluates?
A. true  
B. false  
C. undefined  
D. Throws an error  
ANSWER: A

Why are functions in JavaScript first-class citizens?
A. They can return null  
B. They can be passed as arguments  
C. They are objects  
D. They hoist variables  
ANSWER: B

What is the result of `typeof []`?
A. "array"  
B. "object"  
C. "null"  
D. "function"  
ANSWER: B

What is the purpose of the `typeof` operator?
A. Checks data type  
B. Returns object keys  
C. Creates a new variable  
D. Compares types  
ANSWER: A  

What does `!!"false"` evaluate to?
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What happens if a function is called before its declaration with `var`?  
A. Executes normally  
B. Throws an error  
C. Returns undefined  
D. Skips execution  
ANSWER: A  

What is the default return value of `Array.prototype.push()`?  
A. The updated array  
B. The new length of the array  
C. undefined  
D. The last element added  
ANSWER: B  

Why does `null == undefined` return `true`?  
A. Both are falsy  
B. Both represent "no value"  
C. They are identical  
D. It’s a type coercion behavior  
ANSWER: D  

What happens when a non-function is invoked with `()`?  
A. Throws an error  
B. Returns undefined  
C. Coerces to function  
D. Logs null  
ANSWER: A  

What is the scope of variables declared with `var`?  
A. Block scope  
B. Global or function scope  
C. Local scope only  
D. Immutable scope  
ANSWER: B  

What does the `in` operator check?  
A. Property existence in an object  
B. Data type of a variable  
C. Index in an array  
D. Value comparison  
ANSWER: A  

Why are promises preferred over callbacks?  
A. Simplify code readability  
B. Execute synchronously  
C. Improve performance  
D. Prevent global scope pollution  
ANSWER: A  

What does `delete` do to an object property?  
A. Removes the property  
B. Sets it to `undefined`  
C. Returns `true` always  
D. Freezes the object  
ANSWER: A  

What is the purpose of `Object.getPrototypeOf()`?  
A. Returns an object’s prototype  
B. Modifies the prototype  
C. Deletes the prototype  
D. Creates a shallow copy  
ANSWER: A  

What happens if a `catch` block is missing in a `try` statement?  
A. Throws an uncaught error  
B. Executes finally block only  
C. Ignores errors silently  
D. Skips to the next line  
ANSWER: A  

What is the result of `[] == false`?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

Why is `setTimeout` not precise?  
A. The event loop causes delays  
B. CPU overloads  
C. Callback queue skips execution  
D. Global scope interference  
ANSWER: A  

What does `typeof NaN` return?  
A. "number"  
B. "NaN"  
C. "undefined"  
D. "object"  
ANSWER: A  

What happens when you access an object property that doesn’t exist?  
A. Returns `undefined`  
B. Throws an error  
C. Returns `null`  
D. Stops execution  
ANSWER: A  

What does `[].push(1, 2, 3)` return?  
A. [1, 2, 3]  
B. 3  
C. undefined  
D. "1,2,3"  
ANSWER: B  

Why is `null` falsy?  
A. Represents "no value"  
B. Is equivalent to `false`  
C. Behaves like `0`  
D. Is undefined by default  
ANSWER: A  

What happens when `console.log("5" - 2)` runs?  
A. 3  
B. "52"  
C. NaN  
D. undefined  
ANSWER: A  

What is the purpose of `Array.prototype.map()`?  
A. Transforms each array element  
B. Filters array values  
C. Reduces the array to a single value  
D. Deletes elements from the array  
ANSWER: A  

What is returned by `Symbol()`?  
A. A unique value  
B. A new object  
C. Undefined  
D. An immutable string  
ANSWER: A  

Why does `false == "0"` return `true`?  
A. Both are coerced to numbers  
B. `false` equals strings  
C. `false` ignores type checks  
D. `"0"` is falsy  
ANSWER: A  

What happens when a variable is declared without `var`, `let`, or `const`?  
A. Becomes global  
B. Throws an error  
C. Is undefined by default  
D. Cannot hold values  
ANSWER: A  

What does `Object.create(null)` create?  
A. An object with no prototype  
B. A frozen object  
C. A copy of an object  
D. A new array  
ANSWER: A  

What happens if `return` is used alone in a function?  
A. Returns `undefined`  
B. Throws an error  
C. Freezes the execution  
D. Creates a null value  
ANSWER: A  

What is the purpose of `Object.entries()`?  
A. Returns key-value pairs as arrays  
B. Returns all keys of an object  
C. Removes duplicate keys  
D. Clones the object  
ANSWER: A  

What happens when `typeof []` is evaluated?  
A. "object"  
B. "array"  
C. "null"  
D. "function"  
ANSWER: A  

Why does `console.log(0 && "hello")` return `0`?  
A. `0` is falsy and stops evaluation  
B. "hello" is ignored  
C. Both values are falsy  
D. Logical operators cannot compare strings  
ANSWER: A  

What does the `finally` block do in a `try...catch`?  
A. Executes always, regardless of errors  
B. Runs only if no error occurs  
C. Logs the error stack  
D. Ends the function execution  
ANSWER: A  

What does `Object.values({a: 1, b: 2})` return?  
A. [1, 2]  
B. ["a", "b"]  
C. {"a": 1, "b": 2}  
D. undefined  
ANSWER: A  

Why does `{} == {}` return `false`?  
A. Objects are compared by reference  
B. Objects are falsy values  
C. Objects cannot be compared  
D. Undefined properties cause an error  
ANSWER: A  

What happens when you access `arguments` in an arrow function?  
A. Throws an error  
B. Returns undefined  
C. Refers to the parent scope’s arguments  
D. Accesses a global object  
ANSWER: C  

What does `console.log(2 && 3 && 0)` output?  
A. 0  
B. 2  
C. 3  
D. undefined  
ANSWER: A  

Why does `undefined` not equal `null` with `===`?  
A. `===` checks type as well  
B. `null` cannot be compared  
C. `undefined` throws errors  
D. Type coercion converts both  
ANSWER: A  

What does `isNaN("10")` return?  
A. false  
B. true  
C. undefined  
D. null  
ANSWER: A  

What does `console.log([] instanceof Array)` return?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

Why is `let` preferred over `var`?  
A. It is block-scoped  
B. It allows redeclaration  
C. It throws fewer errors  
D. It improves performance  
ANSWER: A  

What does `Object.seal()` do?  
A. Prevents adding or deleting properties  
B. Freezes property values  
C. Deletes all object properties  
D. Creates shallow copies  
ANSWER: A

What does `typeof []` return?
A. "array"  
B. "object"  
C. "null"  
D. "undefined"  
ANSWER: B

What is the default value of `let x`?
A. null  
B. undefined  
C. 0  
D. false  
ANSWER: B

What does `!!0` return?
A. true  
B. false  
C. undefined  
D. null  
ANSWER: B

What is the output of `2 + "2"`?
A. "22"  
B. 4  
C. NaN  
D. "4"  
ANSWER: A

What does `Array.length` return?
A. Number of elements  
B. Array type  
C. Last element  
D. Index count  
ANSWER: A

What does `1 == "1"` return?
A. true  
B. false  
C. null  
D. undefined  
ANSWER: A

What does `console.log(2 ** 3)` output?
A. 5  
B. 6  
C. 8  
D. NaN  
ANSWER: C

What is `null`?
A. Undefined value  
B. Empty object  
C. Nothing value  
D. False boolean  
ANSWER: C

What does `isNaN("NaN")` return?
A. true  
B. false  
C. null  
D. undefined  
ANSWER: A

What is a `Promise`?
A. Callback wrapper  
B. Synchronous function  
C. Async handler  
D. Error catcher  
ANSWER: C

What does `setTimeout()` return?
A. Function  
B. Timer ID  
C. Null  
D. undefined  
ANSWER: B

What does `{} + []` output?
A. 0  
B. NaN  
C. "[object Object]"  
D. ""  
ANSWER: A

What is the scope of `var`?
A. Block  
B. Function  
C. Global only  
D. Local only  
ANSWER: B

What does `!!"0"` return?
A. true  
B. false  
C. null  
D. NaN  
ANSWER: A

What does `typeof null` return?
A. "null"  
B. "object"  
C. "undefined"  
D. "false"  
ANSWER: B

What does `new Array(3)` create?
A. [3]  
B. [null, null, null]  
C. [undefined × 3]  
D. An empty array  
ANSWER: D

What does `2 > 1 > 0` return?
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A

What does `1 && 0` return?
A. 0  
B. 1  
C. true  
D. false  
ANSWER: A

What does `console.log(null + 1)` output?
A. 1  
B. NaN  
C. 0  
D. undefined  
ANSWER: A

What does `[] == 0` return?
A. true  
B. false  
C. null  
D. undefined  
ANSWER: A

What is `NaN`?
A. Null object  
B. Not-a-Number  
C. Infinite value  
D. String  
ANSWER: B

What does `console.log([] + 1)` output?
A. "1"  
B. 1  
C. NaN  
D. null  
ANSWER: A

What is the value of `2 > "10"`?
A. true  
B. false  
C. NaN  
D. undefined  
ANSWER: B

What does `2 == "2"` return?
A. true  
B. false  
C. null  
D. undefined  
ANSWER: A

What does `typeof undefined` return?
A. "null"  
B. "object"  
C. "undefined"  
D. "false"  
ANSWER: C

What happens if `let` is redeclared?
A. Throws an error  
B. Overwrites value  
C. Ignores redeclaration  
D. Sets to undefined  
ANSWER: A

What does `Object.keys({a: 1, b: 2})` return?
A. [1, 2]  
B. ["a", "b"]  
C. {"a": 1, "b": 2}  
D. null  
ANSWER: B

What does `!!undefined` return?
A. true  
B. false  
C. null  
D. NaN  
ANSWER: B

What does `"5" - 2` return?
A. "3"  
B. 3  
C. 5  
D. NaN  
ANSWER: B

What does `typeof 123n` return?
A. "number"  
B. "bigint"  
C. "string"  
D. "undefined"  
ANSWER: B

What is `0 || 1`?
A. 0  
B. 1  
C. true  
D. undefined  
ANSWER: B

What does `console.log(1 && 2)` output?
A. 1  
B. 2  
C. true  
D. undefined  
ANSWER: B

What does `!!0` return?
A. true  
B. false  
C. null  
D. NaN  
ANSWER: B

What is returned by `typeof function(){}`?
A. "object"  
B. "function"  
C. "undefined"  
D. "null"  
ANSWER: B

What does `Symbol() === Symbol()` return?
A. true  
B. false  
C. null  
D. undefined  
ANSWER: B

What does `1 + true` return?
A. "1true"  
B. 2  
C. NaN  
D. undefined  
ANSWER: B

What is `typeof NaN`?
A. "undefined"  
B. "number"  
C. "NaN"  
D. "null"  
ANSWER: B

What is `typeof []`?
A. "object"  
B. "array"  
C. "null"  
D. "undefined"  
ANSWER: A

What does `2 ** -1` return?
A. 0  
B. 0.5  
C. -2  
D. NaN  
ANSWER: B

What does `"5" * 2` return?
A. 10  
B. "52"  
C. NaN  
D. undefined  
ANSWER: A

What happens with `delete obj.key`?
A. Removes the key  
B. Sets to null  
C. Returns undefined  
D. Throws an error  
ANSWER: A

What does `console.log(0 == "0" && 0 === "0")` return?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: B  

What is the result of `console.log("2" * "2" - "1")`?  
A. 3  
B. "3"  
C. NaN  
D. undefined  
ANSWER: A  

What does `Object.is(0, -0)` return?  
A. true  
B. false  
C. undefined  
D. NaN  
ANSWER: B  

What does `Object.is(NaN, NaN)` return?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What is the result of `console.log([] + {})`?  
A. 0  
B. "[object Object]"  
C. NaN  
D. undefined  
ANSWER: B  

What does `console.log(typeof new Function())` return?  
A. "object"  
B. "function"  
C. "undefined"  
D. "null"  
ANSWER: B  

What does `1.1 + 2.2 == 3.3` return?  
A. true  
B. false  
C. NaN  
D. undefined  
ANSWER: B  

What is the result of `console.log(0 && 1 || 2)`?  
A. 0  
B. 1  
C. 2  
D. undefined  
ANSWER: C  

What happens if you access `undefined.length`?  
A. Throws an error  
B. Returns 0  
C. Returns undefined  
D. Returns NaN  
ANSWER: A  

What does `console.log(2 | 3)` output?  
A. 2  
B. 3  
C. 1  
D. undefined  
ANSWER: B  

What happens when `1 / "a"` is evaluated?  
A. NaN  
B. 0  
C. Throws an error  
D. undefined  
ANSWER: A  

What does `console.log([] == ![])` return?  
A. true  
B. false  
C. undefined  
D. NaN  
ANSWER: A  

What is the output of `console.log(typeof NaN)`?  
A. "NaN"  
B. "number"  
C. "object"  
D. "undefined"  
ANSWER: B  

What does `console.log([] + [])` return?  
A. ""  
B. []  
C. 0  
D. null  
ANSWER: A  

What is the result of `console.log(!!" ")`?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What happens when `console.log(typeof null)` is executed?  
A. "null"  
B. "object"  
C. "undefined"  
D. "string"  
ANSWER: B  

What does `Math.max()` return when called with no arguments?  
A. undefined  
B. 0  
C. -Infinity  
D. NaN  
ANSWER: C  

What does `console.log(1 == "01")` evaluate to?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What is the result of `console.log(true - false)`?  
A. 0  
B. 1  
C. NaN  
D. undefined  
ANSWER: B  

What happens when you compare two empty arrays `[] == []`?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: B  

What is the output of `console.log(typeof Symbol())`?  
A. "symbol"  
B. "object"  
C. "string"  
D. "function"  
ANSWER: A  

What does `typeof (1n)` return?  
A. "number"  
B. "bigint"  
C. "string"  
D. "undefined"  
ANSWER: B  

What does `console.log([1, 2, 3] instanceof Array)` return?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What does `console.log(Object.getPrototypeOf([]) === Array.prototype)` return?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What happens when `console.log(typeof function(){}())` runs?  
A. "function"  
B. "object"  
C. "undefined"  
D. "null"  
ANSWER: C  

What does `console.log(new Set([1, 1, 2]).size)` return?  
A. 1  
B. 2  
C. 3  
D. undefined  
ANSWER: B  

What is the result of `console.log("10" - 1)`?  
A. 9  
B. "101"  
C. NaN  
D. undefined  
ANSWER: A  

What happens when `Number.isNaN("NaN")` runs?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: B  

What does `console.log(parseInt("10px"))` return?  
A. 10  
B. NaN  
C. "10"  
D. undefined  
ANSWER: A  

What happens when you call `console.log(2 === "2")`?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: B  

What is the output of `console.log(0.1 + 0.2)`?  
A. 0.3  
B. 0.30000000000000004  
C. NaN  
D. undefined  
ANSWER: B  

What happens when `console.log("5" - -"2")` runs?  
A. 7  
B. "52"  
C. NaN  
D. undefined  
ANSWER: A  

What does `console.log(2 &lt;&lt; 1)` output?  
A. 2  
B. 4  
C. 1  
D. 0  
ANSWER: B  

What happens when `console.log(false == 0)` executes?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What is the result of `console.log(1 | 2)`?  
A. 1  
B. 2  
C. 3  
D. NaN  
ANSWER: C  

What happens when `console.log(null > -1)` executes?  
A. true  
B. false  
C. NaN  
D. undefined  
ANSWER: A  

What does `console.log([] instanceof Object)` return?  
A. true  
B. false  
C. undefined  
D. null  
ANSWER: A  

What happens if `console.log(0 && "hello")` runs?  
A. "hello"  
B. 0  
C. NaN  
D. undefined  
ANSWER: B  

What is the default scope of a module in Node.js?  
A. Local to the module  
B. Global scope  
C. Function scope  
D. Block scope  
ANSWER: A  

How does Node.js handle file I/O operations?  
A. Blocking  
B. Synchronously  
C. Non-blocking and asynchronous  
D. Multi-threaded  
ANSWER: C  

What does `process.nextTick()` do in Node.js?  
A. Adds a callback to the event loop's next iteration  
B. Defers execution until the stack clears  
C. Runs after a `setTimeout` callback  
D. Terminates the current process  
ANSWER: B  

What is the purpose of the `cluster` module?  
A. To create multiple threads  
B. To split tasks into child processes  
C. To handle network requests  
D. To enable garbage collection  
ANSWER: B  

How does Node.js handle asynchronous exceptions?  
A. Using `try...catch`  
B. Using `process.on('uncaughtException')`  
C. By logging the exception silently  
D. Automatically restarting the process  
ANSWER: B  

What is the main difference between `fs.readFile` and `fs.createReadStream`?  
A. `fs.readFile` loads the file into memory, `fs.createReadStream` streams it  
B. `fs.createReadStream` is faster  
C. `fs.readFile` supports large files better  
D. `fs.createReadStream` blocks execution  
ANSWER: A  

What is the purpose of the `require.cache` in Node.js?  
A. To store module exports  
B. To improve module load speed  
C. To reload modules dynamically  
D. To handle circular dependencies  
ANSWER: B  

What happens if a callback throws an error in Node.js?  
A. The error is caught silently  
B. The process exits  
C. The error is ignored  
D. It triggers `process.on('uncaughtException')`  
ANSWER: D  

What does `os.cpus()` return in Node.js?  
A. Total CPU usage  
B. CPU architecture  
C. An array of CPU core details  
D. The CPU model  
ANSWER: C  

What is the role of the `eventEmitter` class in Node.js?  
A. To handle asynchronous events  
B. To create new processes  
C. To manage network connections  
D. To handle exceptions  
ANSWER: A  

What does the `Buffer` class in Node.js do?  
A. Stores binary data directly in memory  
B. Converts binary data to text  
C. Compresses memory usage  
D. Loads large files into memory  
ANSWER: A  

How does Node.js achieve single-threaded concurrency?  
A. Event loop and non-blocking I/O  
B. Thread pool for all operations  
C. Blocking operations with async/await  
D. Multi-threading for file I/O  
ANSWER: A  

What is the `global` object in Node.js?  
A. The same as `window` in browsers  
B. A global variable for all modules  
C. The root object for all variables  
D. A reference to `process`  
ANSWER: B  

What does the `setImmediate()` function do?  
A. Executes a callback after the current event loop cycle  
B. Executes code immediately  
C. Defers execution after `setTimeout`  
D. Runs callbacks before `process.nextTick()`  
ANSWER: A  

How do you share data across Node.js modules?  
A. Export and require  
B. Use global variables  
C. Create an event emitter  
D. Use `process.env`  
ANSWER: A  

What happens when you call `require()` twice for the same module?  
A. It reloads the module  
B. It returns the cached module  
C. It throws an error  
D. It creates a new module instance  
ANSWER: B  

What is the purpose of the `libuv` library in Node.js?  
A. Handles I/O operations and thread management  
B. Provides V8 integration  
C. Manages event listeners  
D. Handles HTTP requests  
ANSWER: A  

What does the `child_process` module allow?  
A. Managing child threads  
B. Running shell commands or scripts as child processes  
C. Creating new worker threads  
D. Managing system-level errors  
ANSWER: B  

What is the `streams` module used for?  
A. Reading and writing files  
B. Handling asynchronous events  
C. Processing large data chunks efficiently  
D. Buffering network requests  
ANSWER: C  

How does Node.js prevent blocking the event loop?  
A. By offloading I/O tasks to a thread pool  
B. By running all code synchronously  
C. By using `setTimeout` for tasks  
D. By using the garbage collector  
ANSWER: A  

What does the `--inspect` flag do when running a Node.js app?  
A. Enables debugging via Chrome DevTools  
B. Logs all errors to the console  
C. Starts the app in test mode  
D. Clears memory caches  
ANSWER: A  

How does Node.js detect circular dependencies in modules?  
A. By throwing an exception  
B. By logging a warning  
C. By loading partial exports during execution  
D. By stopping the process  
ANSWER: C  

What does `dns.lookup()` do differently than `dns.resolve()`?  
A. Uses the OS resolver for hostname lookup  
B. Performs a direct DNS query  
C. Ignores caching for hostnames  
D. Runs synchronously  
ANSWER: A  

How do you increase the memory limit for a Node.js process?  
A. Use `--max-old-space-size` flag  
B. Modify `global.memoryLimit`  
C. Use `process.memory()`  
D. Add more `Buffer` space  
ANSWER: A  

What happens when `process.exit()` is called?  
A. Ends the current process immediately  
B. Restarts the process automatically  
C. Logs the exit code  
D. Clears all active listeners  
ANSWER: A  

What does `server.close()` do in Node.js?  
A. Terminates all ongoing requests and closes the server  
B. Stops accepting new connections  
C. Restarts the server  
D. Clears all server listeners  
ANSWER: B  

How can you create a secure HTTPS server in Node.js?  
A. Use `https.createServer()` with a certificate  
B. Install HTTPS globally  
C. Use `http.createServer()` with encryption  
D. Use `tls.createSecureContext()`  
ANSWER: A  

What is the purpose of the `zlib` module in Node.js?  
A. Compress and decompress files  
B. Handle file encryption  
C. Manage binary files  
D. Optimize memory usage  
ANSWER: A  

What does `res.end()` do in an HTTP server?  
A. Ends the response and sends it to the client  
B. Closes the connection immediately  
C. Flushes data from the server buffer  
D. Clears all response headers  
ANSWER: A  

What is the purpose of `path.join()`?  
A. Normalizes and combines path segments  
B. Creates a new file path  
C. Changes the working directory  
D. Generates an absolute path  
ANSWER: A  

What does the `box-sizing: border-box` property do?  
A. Excludes padding and border from the element's width  
B. Includes padding and border in the element's width  
C. Applies a box shadow to the element  
D. Sets the content box only  
ANSWER: B  

What does the `object-fit: cover` property do?  
A. Resizes an image to fill its container while maintaining aspect ratio  
B. Stretches an image to fit the container  
C. Clips the image to its original size  
D. Aligns the image to the top-left corner  
ANSWER: A  

What does `position: sticky` do?  
A. Fixes the element to the viewport  
B. Scrolls the element into view  
C. Toggles between relative and fixed position  
D. Sticks the element within a scrollable container  
ANSWER: D  

How can you prevent flex items from shrinking?  
A. `flex: 0 1 auto;`  
B. `flex: 1 0 auto;`  
C. `flex-shrink: 0;`  
D. `flex-wrap: nowrap;`  
ANSWER: C  

What does the `initial` value do in CSS?  
A. Resets a property to the browser default  
B. Sets a property to inherit from the parent  
C. Removes all inline styles  
D. Overrides all rules with !important  
ANSWER: A  

What is the purpose of `grid-template-areas`?  
A. Defines the rows and columns in a grid  
B. Specifies named grid areas for layout  
C. Aligns content within grid items  
D. Adjusts grid column gaps  
ANSWER: B  

What does `line-height: 1` mean?  
A. The line height is equal to the font size  
B. The line height is set to 1px  
C. The line height doubles the font size  
D. The line height is inherited  
ANSWER: A  

How can you make text unselectable in CSS?  
A. `user-select: none;`  
B. `pointer-events: none;`  
C. `text-decoration: none;`  
D. `visibility: hidden;`  
ANSWER: A  

What does `will-change: transform` do?  
A. Applies the transform immediately  
B. Optimizes rendering for upcoming changes  
C. Prepares an element for 3D transformations  
D. Fixes the position of the element  
ANSWER: B  

What does the `@supports` rule do in CSS?  
A. Tests if a property is supported by the browser  
B. Applies conditional styles based on screen size  
C. Checks for media feature compatibility  
D. Extends CSS inheritance  
ANSWER: A  

What happens if `z-index` is applied to a `static` positioned element?  
A. It has no effect  
B. It raises the element above others  
C. It aligns the element to the center  
D. It creates a new stacking context  
ANSWER: A  

What does the `filter: blur(5px)` property do?  
A. Adds a 5px shadow  
B. Reduces the opacity of the element  
C. Blurs the element by 5 pixels  
D. Resizes the element  
ANSWER: C  

How do you create a triangle shape using pure CSS?  
A. Using `border` property with transparent edges  
B. Setting a triangle font character  
C. Combining `clip-path` and `width`  
D. Using `transform: skew`  
ANSWER: A  

What does `white-space: nowrap` do?  
A. Breaks text at whitespace only  
B. Prevents text from wrapping to the next line  
C. Collapses whitespace into a single space  
D. Preserves spaces and line breaks  
ANSWER: B  

What is the `minmax()` function used for in CSS Grid?  
A. Sets a range for row or column sizes  
B. Aligns items within the grid  
C. Limits the height of a grid container  
D. Adjusts item spacing dynamically  
ANSWER: A  

What does `backface-visibility: hidden` do?  
A. Hides the element when flipped  
B. Prevents the back side of a transformed element from displaying  
C. Makes the element transparent  
D. Fixes the element’s position  
ANSWER: B  

What does `clip-path: circle(50%)` do?  
A. Clips the element into a circular shape  
B. Creates a circular border  
C. Centers the element within its container  
D. Resizes the element to 50% width  
ANSWER: A  

What is the difference between `:nth-child()` and `:nth-of-type()`?  
A. `:nth-child()` targets position; `:nth-of-type()` targets type-specific position  
B. Both select elements based on index  
C. `:nth-of-type()` ignores inline styles  
D. `:nth-child()` selects all children  
ANSWER: A  

What does `overscroll-behavior: contain` do?  
A. Prevents scroll chaining beyond an element  
B. Locks scrolling to one direction  
C. Adds a scrollbar inside the element  
D. Reduces overflow content visibility  
ANSWER: A  

What does the `all: unset` property do?  
A. Removes all styles from an element  
B. Resets styles to browser defaults  
C. Inherits parent styles  
D. Unsets only inline styles  
ANSWER: B  

What is the default value of the `flex` property?  
A. `0 1 auto`  
B. `1 1 auto`  
C. `auto`  
D. `inherit`  
ANSWER: B  

What does `pointer-events: none` do?  
A. Prevents mouse interactions on an element  
B. Disables all CSS transitions  
C. Hides the element from the DOM  
D. Makes the element transparent  
ANSWER: A  

What is the purpose of the `gap` property in Flexbox?  
A. Adds space between flex items  
B. Sets margin for the container  
C. Defines padding for items  
D. Adjusts content alignment  
ANSWER: A  

How do you apply styles to elements after a flex item wraps?  
A. Use `flex-wrap: wrap`  
B. Use `align-items: baseline`  
C. Use `:nth-child()` on wrapped items  
D. Apply `order` property  
ANSWER: C  

What does `mix-blend-mode: multiply` do?  
A. Blends the element’s content with the background  
B. Creates a shadow effect  
C. Multiplies the opacity of the element  
D. Adds a color filter to the element  
ANSWER: A  

What does `scroll-behavior: smooth` do?  
A. Enables smooth scrolling for anchor links  
B. Creates parallax scrolling  
C. Prevents page scroll  
D. Aligns content to the center  
ANSWER: A  

What is the purpose of `column-count` in CSS?  
A. Splits content into a specified number of columns  
B. Sets column spacing  
C. Adjusts content alignment within columns  
D. Creates multiple table columns  
ANSWER: A  

What does `animation-timing-function: ease-in-out` do?  
A. Slows the animation at start and end  
B. Speeds up the animation midway  
C. Loops the animation infinitely  
D. Applies linear speed to the animation  
ANSWER: A  

What does `aspect-ratio: 16 / 9` do?  
A. Maintains a 16:9 width-to-height ratio  
B. Sets the element’s width to 16px  
C. Stretches the element horizontally  
D. Clips the content to a box  
ANSWER: A  


What is the default value of the `type` attribute in an `&lt;input>` element?
A. text  
B. password  
C. checkbox  
D. submit  
ANSWER: A  

What is the purpose of the `hidden` attribute in HTML?
A. Hides the element visually but keeps it in the DOM  
B. Removes the element from the DOM  
C. Prevents the element from being indexed by search engines  
D. Reduces the size of the element  
ANSWER: A  

What does the `draggable` attribute do in HTML5?
A. Makes an element draggable with the mouse  
B. Allows an element to be resized  
C. Makes the element interactive  
D. Makes the element hidden on page load  
ANSWER: A  

What is the purpose of the `&lt;noscript>` tag?
A. Defines content for browsers that support JavaScript  
B. Contains content to display when JavaScript is disabled  
C. Links to external JavaScript files  
D. Specifies scripts for offline use  
ANSWER: B  

What is the effect of using `charset` in the `&lt;meta>` tag?
A. Specifies the document’s character encoding  
B. Defines the language of the document  
C. Configures SEO settings  
D. Provides document security settings  
ANSWER: A  

What does the `contenteditable` attribute do in HTML?
A. Makes the element interactive  
B. Allows the element's content to be edited by the user  
C. Specifies the size of the element  
D. Hides the element  
ANSWER: B  

What is the purpose of the `alt` attribute in the `&lt;img>` tag?
A. Specifies the URL of the image  
B. Provides an alternative description for the image if it cannot be displayed  
C. Defines the height and width of the image  
D. Adds a caption below the image  
ANSWER: B  

What does the `&lt;progress>` tag represent in HTML5?
A. Defines a visual progress bar  
B. Displays an animated background  
C. Shows a countdown timer  
D. Represents a data table  
ANSWER: A  

What is the default display value of a `&lt;div>` element?
A. inline  
B. block  
C. flex  
D. none  
ANSWER: B  

What does the `async` attribute do in the `&lt;script>` tag?
A. Makes the script execute synchronously  
B. Makes the script execute asynchronously without blocking HTML parsing  
C. Defers the script execution until after the page has loaded  
D. Ensures the script runs in a specific order  
ANSWER: B  

What is the correct usage of the `srcset` attribute in HTML?
A. Specifies multiple image sources for different screen sizes or resolutions  
B. Defines the size of the image  
C. Specifies the image's border thickness  
D. Adds metadata to the image  
ANSWER: A  

What is the `lang` attribute used for in HTML?
A. Specifies the document's character encoding  
B. Defines the language of the document's content  
C. Links the document to an external style sheet  
D. Specifies the default font of the document  
ANSWER: B  

What is the purpose of the `&lt;figure>` element in HTML5?
A. Defines a group of images  
B. Represents media content with an optional caption  
C. Embeds a video file  
D. Links to external media sources  
ANSWER: B  

What is the role of the `&lt;main>` tag in HTML5?
A. Contains the header content of a page  
B. Represents the primary content of the document  
C. Contains navigation links  
D. Defines footer content  
ANSWER: B  

What does the `title` attribute do in most HTML elements?
A. Provides a tooltip text when the user hovers over the element  
B. Specifies the title of the page  
C. Links to an external stylesheet  
D. Defines a unique identifier for the element  
ANSWER: A  

What is the correct way to include an external CSS file in an HTML document?
A. `&lt;script src="style.css">`  
B. `&lt;link rel="stylesheet" href="style.css">`  
C. `&lt;style src="style.css">`  
D. `&lt;css src="style.css">`  
ANSWER: B  

What does the `&lt;details>` tag do in HTML5?
A. Displays a set of expandable and collapsible content  
B. Groups content together for styling  
C. Defines a form input element  
D. Specifies details about the page  
ANSWER: A  

What does the `placeholder` attribute do in an `&lt;input>` field?
A. Adds a default value to the field  
B. Specifies a hint that is displayed in the input field when it is empty  
C. Hides the input field value  
D. Ensures the field is required  
ANSWER: B  

What is the purpose of the `&lt;track>` element in HTML5?
A. Specifies text tracks for `&lt;video>` and `&lt;audio>` elements  
B. Defines a tracking code for analytics  
C. Adds a clickable link to a video  
D. Controls video playback speed  
ANSWER: A  

What does the `data-*` attribute do in HTML?
A. Stores custom data for an element  
B. Defines a unique identifier  
C. Specifies the font size for the element  
D. Provides a description of the element's content  
ANSWER: A  

What does the `&lt;template>` tag in HTML5 do?
A. Represents content that will be rendered when activated by JavaScript  
B. Defines the structure of a page  
C. Contains metadata for the document  
D. Defines reusable CSS styles  
ANSWER: A  

What is the purpose of the `rel="noopener"` attribute in a link (`&lt;a>`) tag?
A. Prevents the new page from accessing the original page’s window object  
B. Specifies the link’s relationship to the target page  
C. Adds metadata to the link  
D. Prevents the link from opening in a new window  
ANSWER: A  

What is the role of the `type="button"` attribute in a `&lt;button>` tag?
A. Specifies the button's function  
B. Defines the button's color  
C. Sets the button to submit a form  
D. Sets the button to clear form inputs  
ANSWER: A  

What does the `charset` attribute in the `&lt;meta>` tag do?
A. Specifies the character encoding for the document  
B. Defines the document’s language  
C. Links to a custom font  
D. Sets the viewport size  
ANSWER: A  

What is the effect of the `download` attribute in an anchor (`&lt;a>`) tag?
A. Forces the browser to download the linked file  
B. Opens the linked file in a new window  
C. Links the file to a custom server  
D. Downloads a file asynchronously  
ANSWER: A  

What is the difference between `&lt;iframe>` and `&lt;object>` in HTML?
A. `&lt;iframe>` embeds an external document within the page; `&lt;object>` embeds other media like audio and video  
B. `&lt;iframe>` loads video content; `&lt;object>` loads images  
C. `&lt;iframe>` is deprecated; `&lt;object>` is recommended  
D. `&lt;object>` is used for scripts; `&lt;iframe>` is used for forms  
ANSWER: A  

What is the `srcdoc` attribute used for in an `&lt;iframe>` tag?
A. Specifies inline HTML content to display in the `&lt;iframe>`  
B. Defines the source of the `&lt;iframe>` content  
C. Specifies the document's CSS  
D. Links to external JavaScript files  
ANSWER: A  

What does the `autofocus` attribute do in HTML?
A. Automatically focuses the input element when the page loads  
B. Highlights the input element when clicked  
C. Prevents users from typing in the input field  
D. Specifies the initial value of the input field  
ANSWER: A  

What is the purpose of the `&lt;head>` tag in an HTML document?
A. Contains metadata, links to stylesheets, and scripts  
B. Defines the body content of the document  
C. Represents the main content of the page  
D. Specifies the title of the page  
ANSWER: A  

What is the difference between the `&lt;section>` and `&lt;article>` tags in HTML5?
A. `&lt;section>` is used to group related content, `&lt;article>` represents independent, self-contained content  
B. `&lt;article>` groups content, `&lt;section>` defines separate content types  
C. `&lt;section>` is for headings, `&lt;article>` is for images  
D. `&lt;article>` defines page metadata, `&lt;section>` defines content  
ANSWER: A  

What is the purpose of the `accept-charset` attribute in a `&lt;form>` element?
A. Specifies the character encoding for the form submission  
B. Defines the allowed file types for form input fields  
C. Sets the timeout for form submission  
D. Specifies the target location for form submission  
ANSWER: A  

What is the purpose of the `unsafe` keyword in Rust?  
A. Allows the programmer to bypass the compiler’s safety checks  
B. Defines a variable as mutable  
C. Prevents the compiler from optimizing a function  
D. Ensures that the code runs in a separate thread  
ANSWER: A  

What does `Box&lt;T>` do in Rust?  
A. Allocates memory on the stack  
B. Provides ownership of heap-allocated data  
C. Converts a value into a reference  
D. Creates a copy of a value  
ANSWER: B  

What is the difference between `&` and `&mut` in Rust?  
A. `&` is an immutable reference, `&mut` is a mutable reference  
B. `&` is used for cloning, `&mut` is used for ownership  
C. `&mut` allows borrowing, `&` transfers ownership  
D. `&` is used for mutable variables, `&mut` for immutable  
ANSWER: A  

What is the purpose of the `dyn` keyword in Rust?  
A. Specifies a dynamic type in trait objects  
B. Defines a dynamic array  
C. Dynamically allocates memory  
D. Defines a function with dynamic behavior  
ANSWER: A  

What is the significance of Rust’s ownership system?  
A. Prevents data races and ensures memory safety  
B. Allows multiple mutable references  
C. Ensures faster compilation times  
D. Eliminates the need for garbage collection  
ANSWER: A  

How does Rust’s `Result` type differ from `Option`?  
A. `Result` is used for error handling, `Option` represents the absence of a value  
B. `Result` can hold a single value, `Option` holds a tuple  
C. `Option` is used for mutable references, `Result` for ownership  
D. `Result` holds boolean values, `Option` holds integers  
ANSWER: A  

What does `match` in Rust do?  
A. Matches values based on patterns and executes code accordingly  
B. Matches types between different structs  
C. Executes multiple threads concurrently  
D. Initializes variables based on conditions  
ANSWER: A  

What is the difference between `Copy` and `Clone` in Rust?  
A. `Copy` is for types that can be duplicated without explicit function calls, `Clone` requires an explicit call  
B. `Clone` is for primitive types, `Copy` is for complex types  
C. `Copy` allows ownership transfer, `Clone` does not  
D. `Copy` is for mutable references, `Clone` is for immutable  
ANSWER: A  

What does the `#[derive(Debug)]` attribute do in Rust?  
A. Automatically implements the `Debug` trait for a struct or enum  
B. Automatically generates getter and setter methods  
C. Implements error handling for the type  
D. Generates a default constructor for the struct  
ANSWER: A  

What is the purpose of `unsafe` blocks in Rust?  
A. To access features that bypass Rust's safety guarantees  
B. To speed up the compilation process  
C. To automatically handle memory allocation  
D. To force a function to return a reference  
ANSWER: A  

What is a `Borrow` in Rust?  
A. A reference to a value that does not take ownership  
B. A trait that enforces immutability  
C. A way to share ownership between functions  
D. A pointer to a mutable value  
ANSWER: A  

What does `Rc&lt;T>` in Rust represent?  
A. A reference-counted pointer that allows multiple ownerships of data  
B. A mutable reference to data in the heap  
C. A type used for thread-safe references  
D. A function that automatically clears memory  
ANSWER: A  

What does the `FnOnce` trait in Rust represent?  
A. A function that can be called once and consumes its arguments  
B. A function that is always callable  
C. A mutable closure that takes ownership of its arguments  
D. A function that returns a reference to its argument  
ANSWER: A  

How does Rust handle concurrency without data races?  
A. Through ownership rules that prevent simultaneous mutable references  
B. By using an interpreter for parallel execution  
C. Through garbage collection for memory safety  
D. By using synchronized locks in threads  
ANSWER: A  

What does the `Vec&lt;T>` type represent in Rust?  
A. A growable, heap-allocated vector  
B. A fixed-size array with stack allocation  
C. A reference to a sequence of data  
D. A binary tree implementation  
ANSWER: A  

What is the role of the `Send` trait in Rust?  
A. It ensures types are safe to transfer between threads  
B. It implements memory safety in concurrent environments  
C. It defines data structures that allow mutable access from multiple threads  
D. It optimizes synchronization between tasks  
ANSWER: A  

What is the purpose of `tokio` in Rust?  
A. A runtime for asynchronous programming  
B. A framework for compiling Rust to WebAssembly  
C. A library for memory management  
D. A tool for parsing command-line arguments  
ANSWER: A  

What is the `TryFrom` trait used for in Rust?  
A. Converting between types with fallible conversions  
B. Ensuring types are mutable during conversions  
C. Automatically creating references between types  
D. Converting values to and from strings  
ANSWER: A  

How does Rust ensure safety when using external C libraries via FFI?  
A. Through the `unsafe` keyword and manual memory management  
B. By using Rust’s built-in garbage collector  
C. Through automatic type safety checks  
D. By preventing direct calls to external libraries  
ANSWER: A  

What is the difference between `RefCell&lt;T>` and `Mutex&lt;T>` in Rust?  
A. `RefCell&lt;T>` is for single-threaded scenarios, `Mutex&lt;T>` is for multi-threaded scenarios  
B. `Mutex&lt;T>` allows mutable references, `RefCell&lt;T>` does not  
C. `RefCell&lt;T>` enforces immutability, `Mutex&lt;T>` does not  
D. `Mutex&lt;T>` is used for ownership, `RefCell&lt;T>` for borrowing  
ANSWER: A  

What is the purpose of `Lifetime` annotations in Rust?  
A. To ensure that references do not outlive the data they point to  
B. To track memory usage at runtime  
C. To enforce thread safety  
D. To automatically manage object creation  
ANSWER: A  

How does Rust handle errors using `Result&lt;T, E>`?  
A. By explicitly handling success and error variants  
B. By throwing exceptions and catching them  
C. By aborting execution when an error occurs  
D. By using `panic!` to stop the program  
ANSWER: A  

What is the `Drop` trait in Rust?  
A. A way to define custom behavior for when an object goes out of scope  
B. A method for resetting object values  
C. A trait used for lazy initialization  
D. A function that clears the object’s memory  
ANSWER: A  

What does `std::thread::spawn` do in Rust?  
A. Creates a new thread for concurrent execution  
B. Spawns a new process  
C. Allocates memory in a separate heap  
D. Automatically synchronizes threads  
ANSWER: A  

What is the purpose of the `Box&lt;T>` in Rust’s heap memory management?  
A. To allocate data on the heap and enforce ownership  
B. To allocate data on the stack and improve performance  
C. To guarantee thread safety  
D. To store large arrays  
ANSWER: A  

What is the result of attempting to borrow a `mut` reference while another `mut` reference exists in Rust?  
A. A compile-time error due to Rust’s ownership rules  
B. The second reference is allowed, but the first reference is invalidated  
C. The second reference overwrites the first one  
D. A runtime exception is thrown  
ANSWER: A  

What does the `npm ci` command do?  
A. Installs dependencies based on `package-lock.json` and ignores `node_modules`  
B. Installs the latest versions of all dependencies  
C. Clears the cache and installs fresh dependencies  
D. Installs dependencies without creating a `package-lock.json`  
ANSWER: A  

What is the purpose of the `npm audit` command?  
A. To check the system for outdated npm versions  
B. To analyze the project's dependencies for known vulnerabilities  
C. To optimize package installation performance  
D. To delete unused packages from `node_modules`  
ANSWER: B  

What does `npm outdated` show?  
A. The current and latest versions of installed packages  
B. The packages that need to be updated in the `package.json`  
C. The packages that have been deprecated  
D. The differences between `package-lock.json` and `package.json`  
ANSWER: A  

What does the `npm start` command do?  
A. Executes a script specified in the `scripts.start` section of `package.json`  
B. Installs the dependencies and starts the application  
C. Launches the npm registry  
D. Starts a new Node.js server  
ANSWER: A  

How does `npm publish` work?  
A. Publishes the package to a custom npm registry  
B. Uploads a package to the npm public registry  
C. Publishes the package only if the version number is updated  
D. Starts an npm server locally for testing  
ANSWER: B  

What is the purpose of the `npm init` command?  
A. Creates a new package file with default configuration  
B. Installs dependencies and creates the `node_modules` folder  
C. Sets up a global package for the current project  
D. Initializes a new Git repository in the project folder  
ANSWER: A  

What does the `npm link` command do?  
A. Links a local package to the global `node_modules` directory for testing  
B. Links the local repository to a remote npm registry  
C. Creates a symbolic link between two projects  
D. Installs a package globally and links it to the current project  
ANSWER: A  

How do you install a specific version of a package using npm?  
A. `npm install &lt;package>@&lt;version>`  
B. `npm install &lt;version> &lt;package>`  
C. `npm install &lt;package> --version=&lt;version>`  
D. `npm install --specific &lt;package>:&lt;version>`  
ANSWER: A  

What does the `npm cache verify` command do?  
A. Clears the npm cache to free up disk space  
B. Verifies the integrity of the npm cache and checks for errors  
C. Ensures that all packages are up to date in the cache  
D. Deletes corrupted packages from the npm cache  
ANSWER: B  

What is the `npm run &lt;script>` command used for?  
A. Executes a custom script defined in the `scripts` section of `package.json`  
B. Runs the `npm` command with the specified script name  
C. Starts the Node.js application and runs the start script  
D. Runs the script defined in the `npm start` section of `package.json`  
ANSWER: A  

How do you uninstall a global package with npm?  
A. `npm uninstall -g &lt;package>`  
B. `npm remove --global &lt;package>`  
C. `npm uninstall &lt;package> --global`  
D. `npm global remove &lt;package>`  
ANSWER: A  

What is the effect of running `npm install --save-dev &lt;package>`?  
A. Installs the package as a devDependency and adds it to `package.json`  
B. Installs the package globally for development use  
C. Installs the package as a regular dependency  
D. Installs the package and its dependencies for production  
ANSWER: A  

What is the purpose of the `npm shrinkwrap` command?  
A. Locks down the versions of dependencies to ensure reproducible builds  
B. Shrinks the size of the installed dependencies  
C. Wraps npm dependencies for easier shipping  
D. Bundles dependencies into a single file  
ANSWER: A  

How do you install a package from a GitHub repository using npm?  
A. `npm install &lt;username>/&lt;repository>`  
B. `npm install git://&lt;username>/&lt;repository>`  
C. `npm install &lt;repository>@git`  
D. `npm install &lt;username>/&lt;repository>.git`  
ANSWER: A  

What does the `npm uninstall` command do?  
A. Removes the installed package from `node_modules`  
B. Uninstalls a package and removes it from the `package.json` file  
C. Deletes the entire `node_modules` folder  
D. Uninstalls global packages only  
ANSWER: B  

What is `npm install --no-save` used for?  
A. Installs the package without adding it to `package.json`  
B. Prevents the installation of dependencies in the `node_modules` folder  
C. Installs the package globally without saving it  
D. Installs the package without verifying its version  
ANSWER: A  

What is the purpose of the `npm dedupe` command?  
A. Removes duplicates from the `node_modules` folder  
B. Resolves conflicting dependencies in the `package.json`  
C. Updates the installed packages to their latest versions  
D. Installs packages in a single `node_modules` folder  
ANSWER: A  

What is the effect of the `npm ls` command?  
A. Lists the installed packages and their dependencies  
B. Lists the packages installed globally  
C. Displays the current version of npm  
D. Lists all available versions of a package  
ANSWER: A  

What is the purpose of `npm install -g &lt;package>`?  
A. Installs the package globally for use across projects  
B. Installs the package in the current project only  
C. Updates the global package registry  
D. Installs the package as a devDependency  
ANSWER: A  

What does `npm outdated` show?  
A. Lists all outdated packages in the project  
B. Displays the current version of the installed packages  
C. Lists deprecated packages in the npm registry  
D. Shows the available updates for global packages  
ANSWER: A  

What does the `npm bin` command do?  
A. Displays the location of the npm executable files  
B. Installs a package globally  
C. Bundles executable scripts into a single file  
D. Clears the npm binary cache  
ANSWER: A  

What is the purpose of the `npm run build` command?  
A. Executes the build script defined in `package.json`  
B. Compiles the package into a distributable file  
C. Installs dependencies for building the project  
D. Initializes the project’s build configuration  
ANSWER: A  

What does `npm config set &lt;key> &lt;value>` do?  
A. Sets a configuration option for npm  
B. Installs a configuration file for npm  
C. Sets a key for npm authentication  
D. Updates the npm registry URL  
ANSWER: A  

How do you install multiple packages at once using npm?  
A. `npm install &lt;package1> &lt;package2> &lt;package3>`  
B. `npm install --batch &lt;package1>,&lt;package2>,&lt;package3>`  
C. `npm install &lt;package1> &lt;package2>,&lt;package3>`  
D. `npm install [&lt;package1>, &lt;package2>, &lt;package3>]`  
ANSWER: A  

What is the purpose of the `npm update` command?  
A. Updates installed packages to the latest version according to `package.json`  
B. Installs missing packages  
C. Checks for new versions of npm  
D. Deletes outdated packages from the project  
ANSWER: A  

What does the `npm run test` command do?  
A. Executes the test script defined in the `scripts` section of `package.json`  
B. Installs testing dependencies  
C. Runs unit tests on the current package  
D. Initiates a test run for global packages  
ANSWER: A  

What is the effect of running `npm audit fix`?  
A. Automatically fixes vulnerabilities in dependencies  
B. Installs updates for vulnerable packages  
C. Displays a list of available updates  
D. Removes problematic packages  
ANSWER: A  

What is the purpose of the `spl_autoload_register()` function in PHP?  
A. Automatically loads classes when they are needed  
B. Registers functions to be executed during runtime  
C. Allows loading of external libraries  
D. Registers the functions in the global scope  
ANSWER: A  

What does `gettype()` do in PHP?  
A. Returns the type of a variable  
B. Returns the class name of an object  
C. Converts a variable to a string  
D. Checks if a variable is of a specific type  
ANSWER: A  

What does `unset()` do in PHP?  
A. Removes an element from an array  
B. Deletes a variable or an element from an array  
C. Clears the content of a string  
D. Reassigns null to a variable  
ANSWER: B  

What is the result of using `include()` vs `require()` in PHP?  
A. `require()` will stop the script if the file cannot be included, `include()` will give a warning  
B. `include()` will stop the script if the file cannot be included, `require()` will give a warning  
C. `require()` is used for external libraries, `include()` is used for internal files  
D. There is no functional difference between the two  
ANSWER: A  

How can you prevent SQL injection in PHP?  
A. By using `mysqli_real_escape_string()`  
B. By using prepared statements with bound parameters  
C. By using `htmlspecialchars()`  
D. By validating user input with regex  
ANSWER: B  

What is the default session save path in PHP?  
A. `/var/lib/php/sessions`  
B. `/tmp/sessions`  
C. `session.save_path` in `php.ini`  
D. `/home/user/sessions`  
ANSWER: C  

How do you start a session in PHP?  
A. `session_start()`  
B. `start_session()`  
C. `initialize_session()`  
D. `create_session()`  
ANSWER: A  

What does `$_SERVER['PHP_SELF']` return in PHP?  
A. The file path of the current script  
B. The full URL of the current script  
C. The query string of the URL  
D. The IP address of the user  
ANSWER: A  

What is the purpose of `filter_var()` in PHP?  
A. Filters a string and returns a modified version  
B. Validates and sanitizes input data  
C. Formats an input string for output  
D. Converts a string to a specific encoding  
ANSWER: B  

What does `session_destroy()` do in PHP?  
A. Clears all session variables  
B. Deletes the session data from the server  
C. Terminates the session completely  
D. Destroys the session cookie  
ANSWER: C  

How do you fetch a specific column value from a MySQL database in PHP?  
A. `mysqli_fetch_assoc()`  
B. `mysqli_fetch_column()`  
C. `mysqli_query()`  
D. `mysqli_fetch_row()`  
ANSWER: A  

What is the function of the `__construct()` method in PHP?  
A. Initializes the class  
B. Sets default values for object properties  
C. Creates a new instance of a class  
D. Executes when a class object is destroyed  
ANSWER: A  

How do you define a constant in PHP?  
A. `define('CONSTANT_NAME', 'value');`  
B. `const CONSTANT_NAME = 'value';`  
C. `set_constant('CONSTANT_NAME', 'value');`  
D. Both A and B  
ANSWER: D  

What is the purpose of `mysqli_fetch_assoc()` in PHP?  
A. Fetches a result row as an associative array  
B. Returns the next row of results as an object  
C. Fetches all rows from the result set  
D. Converts the result set into an indexed array  
ANSWER: A  

What is the behavior of `die()` or `exit()` in PHP?  
A. Displays a message and terminates the script execution  
B. Ends the current request but continues to load resources  
C. Logs an error and continues to execute further code  
D. Kills the current database connection and exits the script  
ANSWER: A  

What does `$_SESSION` represent in PHP?  
A. The server-side session data  
B. A global array for storing session variables  
C. The query string parameters  
D. The global variables set by the user  
ANSWER: B  

How do you check if a form has been submitted in PHP?  
A. By checking `isset($_POST['submit'])`  
B. By checking `$_POST['submit'] == true`  
C. By checking `isset($_GET['submit'])`  
D. By using `form_submitted()` function  
ANSWER: A  

What is the difference between `==` and `===` in PHP?  
A. `==` compares values, `===` compares both values and types  
B. `==` checks if two variables exist, `===` compares their values  
C. `==` is used for type checking, `===` is for content matching  
D. `===` is used for string comparison, `==` for numbers  
ANSWER: A  

What does `mysqli_query()` do in PHP?  
A. Executes an SQL query against the database  
B. Prepares a statement for execution  
C. Fetches results from the database  
D. Closes the database connection  
ANSWER: A  

How do you include a PHP file inside another PHP file?  
A. `include('file.php');`  
B. `require('file.php');`  
C. `require_once('file.php');`  
D. All of the above  
ANSWER: D  

What is the purpose of the `$_FILES` superglobal in PHP?  
A. Handles file uploads from the user  
B. Stores the list of all uploaded files on the server  
C. Allows access to file metadata  
D. Stores the file name for downloading  
ANSWER: A  

What does `header('Location: page.php');` do in PHP?  
A. Redirects the user to another page  
B. Downloads the file specified  
C. Starts a new session  
D. Sends the page title to the browser  
ANSWER: A  

How can you pass variables between PHP pages?  
A. By using URL query parameters  
B. Using session variables  
C. By using cookies  
D. All of the above  
ANSWER: D  

What does `get_declared_classes()` do in PHP?  
A. Returns a list of all declared classes  
B. Lists the classes available for autoloading  
C. Returns the classes defined within a specific namespace  
D. Fetches the classes from the current file  
ANSWER: A  

What does `$_SERVER['REQUEST_METHOD']` return in PHP?  
A. The method used for the HTTP request (GET, POST, etc.)  
B. The name of the server  
C. The URI of the request  
D. The user-agent string of the client  
ANSWER: A  

What is the `__destruct()` method used for in PHP?  
A. Cleans up resources when an object is destroyed  
B. Initializes a class instance  
C. Handles error logging and cleanup  
D. Called at the start of the script execution  
ANSWER: A  

What does the `include_once` statement do in PHP?  
A. Includes the file only once, even if it is called multiple times  
B. Includes the file and checks if the function exists  
C. Includes the file but allows it to be overwritten later  
D. Includes the file at the beginning of the script  
ANSWER: A  

How do you prevent SQL injection in PHP when using `mysqli`?  
A. By using prepared statements with bound parameters  
B. By escaping user inputs with `mysqli_real_escape_string()`  
C. By limiting database access with user roles  
D. Both A and B  
ANSWER: D  

What is the purpose of the `Content-Security-Policy` (CSP) header?  
A. Prevents cross-site scripting (XSS) and data injection attacks  
B. Controls caching behavior for web pages  
C. Restricts access to external resources  
D. Sets the expiration date for cookies  
ANSWER: A  

What does the `SameSite` cookie attribute do?  
A. Prevents cross-origin requests from sending cookies  
B. Sets the maximum age of cookies  
C. Restricts cookies to a particular domain  
D. Ensures cookies are always sent securely  
ANSWER: A  

What is the difference between `GET` and `POST` HTTP methods?  
A. `GET` sends data in the URL, `POST` sends data in the request body  
B. `GET` is secure, `POST` is not  
C. `GET` can handle larger data, `POST` cannot  
D. `POST` is idempotent, `GET` is not  
ANSWER: A  

What does the `cross-origin resource sharing` (CORS) policy enable?  
A. Sharing resources across different domains securely  
B. Preventing caching of assets on different domains  
C. Restricting the access to resources on a different server  
D. Reducing latency in resource loading  
ANSWER: A  

What is the purpose of the `viewport` meta tag in HTML?  
A. Controls the scaling and dimensions of the web page on different devices  
B. Sets the character encoding for the document  
C. Defines the layout of a web page  
D. Controls the size of the web browser window  
ANSWER: A  

What does `async` do in a `&lt;script>` tag?  
A. Allows the script to load asynchronously without blocking the rendering of the page  
B. Ensures that the script runs only after the page is fully loaded  
C. Runs the script in a separate thread  
D. Makes the script execute after all other scripts have finished  
ANSWER: A  

What is the purpose of the `rel="noopener"` attribute in an anchor (`&lt;a>`) tag?  
A. Prevents the new page from accessing the original page’s window object  
B. Ensures that the link is opened in a new tab  
C. Restricts the link to only HTTP links  
D. Prevents the link from being cached  
ANSWER: A  

What does the `loading="lazy"` attribute do in an `&lt;img>` tag?  
A. Defers loading of the image until it is about to enter the viewport  
B. Compresses the image to save bandwidth  
C. Loads the image immediately after the page is loaded  
D. Prevents the image from being loaded until the user interacts with it  
ANSWER: A  

What is the main purpose of the `Service Workers` in web technology?  
A. To cache assets and provide offline capabilities  
B. To speed up the loading of web pages  
C. To validate the integrity of the web page’s content  
D. To manage the event loop in JavaScript  
ANSWER: A  

What is the role of `WebAssembly`?  
A. To run code written in languages other than JavaScript directly in the browser  
B. To provide advanced CSS features for styling  
C. To optimize network requests for web pages  
D. To compile JavaScript into a binary format for faster execution  
ANSWER: A  

What is the difference between `localStorage` and `sessionStorage`?  
A. `localStorage` persists across sessions, `sessionStorage` is cleared when the browser is closed  
B. `localStorage` is more secure than `sessionStorage`  
C. `sessionStorage` can hold larger data than `localStorage`  
D. Both are used to store data only for the current session  
ANSWER: A  

What does the `fetch()` API do in JavaScript?  
A. Allows network requests to be made asynchronously  
B. Sends data to a server for processing  
C. Loads HTML content dynamically  
D. Refreshes the page without reloading  
ANSWER: A  

What is the purpose of the `Link` element in the `&lt;head>` section of an HTML document?  
A. To define relationships between the current document and external resources  
B. To define navigation links within the page  
C. To load external JavaScript libraries  
D. To specify the character encoding for the document  
ANSWER: A  

What is the role of the `HTML5` `&lt;article>` tag?  
A. Represents independent, self-contained content that can be reused elsewhere  
B. Represents the footer of a web page  
C. Contains metadata for the document  
D. Specifies the main content of the page  
ANSWER: A  

What is the significance of the `aria-label` attribute in HTML?  
A. Provides an accessible name for elements for screen readers  
B. Adds a label to form elements  
C. Sets the title for an image or video element  
D. Allows elements to be interacted with via keyboard shortcuts  
ANSWER: A  

What is the function of the `content` property in the `::before` and `::after` pseudo-elements?  
A. Inserts content before or after an element  
B. Sets the content type of the element  
C. Specifies the text color for pseudo-elements  
D. Defines the width and height of pseudo-elements  
ANSWER: A  

What does `window.localStorage.setItem()` do in JavaScript?  
A. Saves a key-value pair in the browser’s local storage  
B. Retrieves the value of a key from local storage  
C. Removes a key-value pair from local storage  
D. Clears all data stored in local storage  
ANSWER: A  

What does the `:focus-within` pseudo-class do in CSS?  
A. Matches elements that have focus or contain an element with focus  
B. Matches elements that are focused and have a child element focused  
C. Applies styles to elements when the user hovers over them  
D. Matches only form elements that are focused  
ANSWER: A  

What does the `display: flex` CSS property do?  
A. Creates a flex container that arranges child elements in a flexible manner  
B. Hides elements from the page while maintaining their place in the layout  
C. Positions elements based on their size and alignment  
D. Creates a grid layout with flexible rows and columns  
ANSWER: A  

What is the purpose of the `border-box` value in the `box-sizing` property in CSS?  
A. Includes padding and border in the element’s total width and height  
B. Resizes the element based on content size  
C. Excludes padding and border from the element’s width  
D. Defines a fixed width and height for the element  
ANSWER: A  

What is the difference between `display: block` and `display: inline-block` in CSS?  
A. `display: inline-block` allows elements to flow alongside others, while `display: block` takes up the full width  
B. `display: block` allows multiple elements on a single line, while `inline-block` forces elements into separate lines  
C. `inline-block` elements create a block-level element, while `block` creates an inline element  
D. `inline-block` allows elements to be aligned vertically, while `block` aligns horizontally  
ANSWER: A  

What does the `@media` rule do in CSS?  
A. Defines conditional CSS styles based on device characteristics such as screen size or orientation  
B. Creates custom fonts for specific media types  
C. Optimizes the media for responsive designs  
D. Links to external stylesheets based on media types  
ANSWER: A  

What is the difference between `position: relative` and `position: absolute` in CSS?  
A. `relative` positions an element relative to its normal position, while `absolute` positions it relative to the nearest positioned ancestor  
B. `relative` positions an element at a fixed position, while `absolute` allows the element to move freely  
C. `absolute` positions the element at the top-left corner, while `relative` keeps it in the document flow  
D. `relative` is used for fixed elements, while `absolute` is used for non-fixed elements  
ANSWER: A  

What is the purpose of `Service Workers` in Progressive Web Apps (PWAs)?  
A. Enables offline functionality and background data synchronization  
B. Caches assets to speed up page loading  
C. Provides enhanced security for web pages  
D. Optimizes server requests for dynamic content  
ANSWER: A  

What does `position: sticky` do in CSS?  
A. Positions an element relative to the viewport and sticks it there when scrolling  
B. Makes an element stay at the top of the page while scrolling  
C. Positions the element within the document flow but makes it float  
D. Pins the element in a fixed position to the screen’s edges  
ANSWER: A  

What is the purpose of the `viewport` meta tag in HTML?  
A. Sets the dimensions and scaling of the page for different devices  
B. Defines the default zoom level for the page  
C. Specifies the layout of the page based on device width  
D. Defines the resolution of images on the page  
ANSWER: A  

What does the `box-shadow` property in CSS do?  
A. Adds shadow effects around elements  
B. Defines a border with a shadowed effect  
C. Increases the spacing between elements  
D. Applies a transparent background with a shadow  
ANSWER: A  

What does the `async` attribute do in a `&lt;script>` tag?  
A. Allows the script to be executed asynchronously without blocking the HTML parsing  
B. Forces the script to run after the page content has loaded  
C. Makes the script execute after all images have been loaded  
D. Forces the script to run synchronously  
ANSWER: A  

What is the purpose of the `SameSite` cookie attribute in web security?  
A. Prevents cookies from being sent in cross-origin requests  
B. Encrypts cookie data during transmission  
C. Restricts cookies to a specific domain  
D. Prevents cookies from being stored on client devices  
ANSWER: A  

What is Cross-Site Scripting (XSS)?  
A. A vulnerability where an attacker injects malicious scripts into web pages viewed by other users  
B. A security flaw in server-side validation processes  
C. A method for securing HTTP requests  
D. A technique to hide sensitive data in the DOM  
ANSWER: A  

What is the purpose of Content Security Policy (CSP)?  
A. To mitigate the risk of XSS by specifying allowed content sources  
B. To encrypt all data sent over the network  
C. To control the loading of third-party scripts  
D. To enforce authentication on external APIs  
ANSWER: A  

What does `Strict-Transport-Security` (HSTS) enforce?  
A. Forces all HTTP requests to be redirected to HTTPS  
B. Ensures cookies are only sent over secure channels  
C. Prevents cookies from being shared across domains  
D. Verifies the server’s SSL certificate  
ANSWER: A  

What is a SQL Injection attack?  
A. An attack that allows attackers to manipulate SQL queries to execute arbitrary commands  
B. A method for stealing sensitive data from HTTP headers  
C. A technique to exploit vulnerable third-party libraries  
D. An attack that bypasses HTTP authorization mechanisms  
ANSWER: A  

How does Cross-Site Request Forgery (CSRF) work?  
A. By tricking the user into submitting a request that they did not intend, using their credentials  
B. By injecting malicious scripts into user inputs to access cookies  
C. By exploiting weak passwords to gain unauthorized access  
D. By intercepting traffic between the client and the server  
ANSWER: A  

What is the role of the `X-Content-Type-Options` header?  
A. Prevents browsers from interpreting files as a different MIME type  
B. Specifies the content type for uploaded files  
C. Forces content to be served as text  
D. Encrypts files to prevent data theft  
ANSWER: A  

What is the purpose of using HTTPS instead of HTTP?  
A. It encrypts the data sent between the client and server, ensuring secure communication  
B. It makes the website more visible to search engines  
C. It improves the speed of data transfer  
D. It prevents IP address tracking  
ANSWER: A  

What is a Man-in-the-Middle (MITM) attack?  
A. An attacker intercepts and possibly alters communication between two parties  
B. An attacker uses stolen credentials to gain unauthorized access  
C. An attack that tricks users into clicking malicious links  
D. A form of phishing that targets users through email  
ANSWER: A  

What does the `X-Frame-Options` header prevent?  
A. Embedding the page in a frame or iframe to mitigate clickjacking attacks  
B. Accessing the page from different domains  
C. Caching the page on third-party servers  
D. Automatically logging out after a period of inactivity  
ANSWER: A  

What is the primary function of Web Application Firewalls (WAFs)?  
A. To filter and monitor HTTP requests to protect against common attacks  
B. To encrypt sensitive data before sending it to the server  
C. To limit the number of users accessing the application  
D. To manage user authentication and authorization  
ANSWER: A  

What is the purpose of Multi-Factor Authentication (MFA)?  
A. To require more than one method of verification for users accessing sensitive information  
B. To automatically generate secure passwords for users  
C. To protect against brute force attacks  
D. To encrypt communication between users and the server  
ANSWER: A  

What does the `Content-Type` header do in web security?  
A. Specifies the media type of the resource being sent  
B. Ensures that data is encrypted during transmission  
C. Controls the caching of web pages  
D. Blocks malicious scripts from being executed  
ANSWER: A  

How can you protect your website from Clickjacking attacks?  
A. By using the `X-Frame-Options` header to prevent the page from being embedded in a frame  
B. By enabling HTTPS on your website  
C. By setting a secure password policy  
D. By blocking requests from unknown domains  
ANSWER: A  

What is the purpose of `HSTS` in securing websites?  
A. Forces browsers to always use HTTPS when communicating with the server  
B. Verifies the authenticity of user credentials  
C. Encrypts all cookies sent over the network  
D. Ensures that requests are never cached in the browser  
ANSWER: A  

What does the `CORS` policy prevent?  
A. Unauthorized cross-origin requests from malicious websites  
B. Users from submitting credentials to a different domain  
C. Data from being encrypted during transmission  
D. Scripts from being executed on the client-side  
ANSWER: A  

What is the difference between `HTTP` and `HTTPS`?  
A. `HTTPS` encrypts communication using SSL/TLS, while `HTTP` does not  
B. `HTTPS` allows for faster data transfer  
C. `HTTP` is more secure than `HTTPS`  
D. `HTTP` is used for secure sites, while `HTTPS` is for unsecured sites  
ANSWER: A  

What is an example of an OWASP Top 10 vulnerability?  
A. SQL Injection  
B. DDoS attacks  
C. Insufficient bandwidth  
D. Outdated web servers  
ANSWER: A  

How can you mitigate risks from XSS attacks?  
A. By sanitizing and escaping user input to prevent malicious script execution  
B. By enabling CORS on the server  
C. By implementing Multi-Factor Authentication (MFA)  
D. By blocking access to specific geographic locations  
ANSWER: A  

What is the `X-Permitted-Cross-Domain-Policies` header used for?  
A. Specifies whether Flash or Adobe Acrobat can access the server  
B. Defines the types of cross-origin requests allowed  
C. Specifies content encoding for the browser  
D. Blocks third-party cookies from being set  
ANSWER: A  

What is the purpose of using a `Referrer-Policy` header?  
A. Controls how much information about the referring page is sent with requests  
B. Defines the maximum size of the referrer header  
C. Encrypts the referrer information during transmission  
D. Prevents the referrer from being sent at all  
ANSWER: A  

How does the `X-Content-Type-Options: nosniff` header enhance security?  
A. Prevents browsers from interpreting files as a different MIME type  
B. Ensures that content is only served over HTTPS  
C. Blocks non-secure file uploads  
D. Prevents the browser from caching content  
ANSWER: A  

What is a CSRF token and how does it prevent attacks?  
A. A unique token that verifies a user’s request to prevent forged requests from malicious websites  
B. A method to encrypt all data sent in HTTP requests  
C. A system that checks the IP address of the requester  
D. A token used to authenticate users during login  
ANSWER: A  

What is the difference between symmetric and asymmetric encryption?  
A. Symmetric encryption uses the same key for encryption and decryption, while asymmetric uses a public and private key  
B. Symmetric encryption is slower than asymmetric encryption  
C. Asymmetric encryption is used for file storage, symmetric for real-time communication  
D. Symmetric encryption is unbreakable, asymmetric is not  
ANSWER: A  

What is the purpose of `DNSSEC` (DNS Security Extensions)?  
A. To protect DNS queries from being hijacked or spoofed  
B. To accelerate the DNS resolution process  
C. To prevent DDoS attacks on DNS servers  
D. To encrypt all DNS traffic  
ANSWER: A  

What is the purpose of `SSL/TLS` in web security?  
A. Encrypts the data between client and server to prevent interception by unauthorized parties  
B. Protects against cross-origin attacks  
C. Blocks access to sensitive data  
D. Provides authentication for users  
ANSWER: A  

What is a Denial-of-Service (DoS) attack?  
A. An attack that floods a server with traffic to make it unavailable to users  
B. A method to access unauthorized data  
C. An attack that infects client devices with malware  
D. A technique to bypass authentication  
ANSWER: A  

What is the main function of a Web Application Firewall (WAF)?  
A. To filter and monitor HTTP requests to protect against common attacks like XSS and SQL Injection  
B. To encrypt all incoming and outgoing web traffic  
C. To block traffic from malicious IP addresses  
D. To handle all server-side authentication  
ANSWER: A  
